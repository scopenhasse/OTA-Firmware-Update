
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003764  08008190  08008190  00008190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800b8f4  0800b8f4  0000b8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b994  0800b994  00010068  2**0
                  CONTENTS
  4 .ARM          00000000  0800b994  0800b994  00010068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b994  0800b994  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b994  0800b994  0000b994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b998  0800b998  0000b998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b99c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00010068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00010068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000892a  00000000  00000000  000100db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014e4  00000000  00000000  00018a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006d8  00000000  00000000  00019ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000530  00000000  00000000  0001a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b0b6  00000000  00000000  0001aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009478  00000000  00000000  00035bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009c29b  00000000  00000000  0003f026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002204  00000000  00000000  000db2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000dd4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	; (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000068 	.word	0x20000068
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800b8dc 	.word	0x0800b8dc

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	; (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	; (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	2000006c 	.word	0x2000006c
 80081cc:	0800b8dc 	.word	0x0800b8dc

080081d0 <memchr>:
 80081d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80081d4:	2a10      	cmp	r2, #16
 80081d6:	db2b      	blt.n	8008230 <memchr+0x60>
 80081d8:	f010 0f07 	tst.w	r0, #7
 80081dc:	d008      	beq.n	80081f0 <memchr+0x20>
 80081de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80081e2:	3a01      	subs	r2, #1
 80081e4:	428b      	cmp	r3, r1
 80081e6:	d02d      	beq.n	8008244 <memchr+0x74>
 80081e8:	f010 0f07 	tst.w	r0, #7
 80081ec:	b342      	cbz	r2, 8008240 <memchr+0x70>
 80081ee:	d1f6      	bne.n	80081de <memchr+0xe>
 80081f0:	b4f0      	push	{r4, r5, r6, r7}
 80081f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80081f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80081fa:	f022 0407 	bic.w	r4, r2, #7
 80081fe:	f07f 0700 	mvns.w	r7, #0
 8008202:	2300      	movs	r3, #0
 8008204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008208:	3c08      	subs	r4, #8
 800820a:	ea85 0501 	eor.w	r5, r5, r1
 800820e:	ea86 0601 	eor.w	r6, r6, r1
 8008212:	fa85 f547 	uadd8	r5, r5, r7
 8008216:	faa3 f587 	sel	r5, r3, r7
 800821a:	fa86 f647 	uadd8	r6, r6, r7
 800821e:	faa5 f687 	sel	r6, r5, r7
 8008222:	b98e      	cbnz	r6, 8008248 <memchr+0x78>
 8008224:	d1ee      	bne.n	8008204 <memchr+0x34>
 8008226:	bcf0      	pop	{r4, r5, r6, r7}
 8008228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800822c:	f002 0207 	and.w	r2, r2, #7
 8008230:	b132      	cbz	r2, 8008240 <memchr+0x70>
 8008232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008236:	3a01      	subs	r2, #1
 8008238:	ea83 0301 	eor.w	r3, r3, r1
 800823c:	b113      	cbz	r3, 8008244 <memchr+0x74>
 800823e:	d1f8      	bne.n	8008232 <memchr+0x62>
 8008240:	2000      	movs	r0, #0
 8008242:	4770      	bx	lr
 8008244:	3801      	subs	r0, #1
 8008246:	4770      	bx	lr
 8008248:	2d00      	cmp	r5, #0
 800824a:	bf06      	itte	eq
 800824c:	4635      	moveq	r5, r6
 800824e:	3803      	subeq	r0, #3
 8008250:	3807      	subne	r0, #7
 8008252:	f015 0f01 	tst.w	r5, #1
 8008256:	d107      	bne.n	8008268 <memchr+0x98>
 8008258:	3001      	adds	r0, #1
 800825a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800825e:	bf02      	ittt	eq
 8008260:	3001      	addeq	r0, #1
 8008262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008266:	3001      	addeq	r0, #1
 8008268:	bcf0      	pop	{r4, r5, r6, r7}
 800826a:	3801      	subs	r0, #1
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008276:	f000 fa67 	bl	8008748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800827a:	f000 f82d 	bl	80082d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800827e:	f000 f897 	bl	80083b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8008282:	f000 f865 	bl	8008350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application : version = %d,%d\n",APPversion[0],APPversion[1]);
 8008286:	2300      	movs	r3, #0
 8008288:	2201      	movs	r2, #1
 800828a:	4619      	mov	r1, r3
 800828c:	480f      	ldr	r0, [pc, #60]	; (80082cc <main+0x5c>)
 800828e:	f002 fcaf 	bl	800abf0 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t i = 0 ;
 8008292:	2300      	movs	r3, #0
 8008294:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8008296:	2201      	movs	r2, #1
 8008298:	2108      	movs	r1, #8
 800829a:	480d      	ldr	r0, [pc, #52]	; (80082d0 <main+0x60>)
 800829c:	f000 fd36 	bl	8008d0c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80082a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082a4:	f000 fab6 	bl	8008814 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80082a8:	2200      	movs	r2, #0
 80082aa:	2108      	movs	r1, #8
 80082ac:	4808      	ldr	r0, [pc, #32]	; (80082d0 <main+0x60>)
 80082ae:	f000 fd2d 	bl	8008d0c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80082b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082b6:	f000 faad 	bl	8008814 <HAL_Delay>
	  printf("Loop N = %d",i);
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	4619      	mov	r1, r3
 80082be:	4805      	ldr	r0, [pc, #20]	; (80082d4 <main+0x64>)
 80082c0:	f002 fc96 	bl	800abf0 <iprintf>
	  i++;
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	3301      	adds	r3, #1
 80082c8:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80082ca:	e7e4      	b.n	8008296 <main+0x26>
 80082cc:	0800b8f4 	.word	0x0800b8f4
 80082d0:	48000400 	.word	0x48000400
 80082d4:	0800b91c 	.word	0x0800b91c

080082d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b090      	sub	sp, #64	; 0x40
 80082dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80082de:	f107 0318 	add.w	r3, r7, #24
 80082e2:	2228      	movs	r2, #40	; 0x28
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f002 fcd7 	bl	800ac9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80082ec:	1d3b      	adds	r3, r7, #4
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	605a      	str	r2, [r3, #4]
 80082f4:	609a      	str	r2, [r3, #8]
 80082f6:	60da      	str	r2, [r3, #12]
 80082f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80082fa:	2302      	movs	r3, #2
 80082fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082fe:	2301      	movs	r3, #1
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008302:	2310      	movs	r3, #16
 8008304:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008306:	2300      	movs	r3, #0
 8008308:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800830a:	f107 0318 	add.w	r3, r7, #24
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fd14 	bl	8008d3c <HAL_RCC_OscConfig>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800831a:	f000 f899 	bl	8008450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800831e:	230f      	movs	r3, #15
 8008320:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008322:	2300      	movs	r3, #0
 8008324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800832a:	2300      	movs	r3, #0
 800832c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800832e:	2300      	movs	r3, #0
 8008330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008332:	1d3b      	adds	r3, r7, #4
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fd3e 	bl	8009db8 <HAL_RCC_ClockConfig>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8008342:	f000 f885 	bl	8008450 <Error_Handler>
  }
}
 8008346:	bf00      	nop
 8008348:	3740      	adds	r7, #64	; 0x40
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
	...

08008350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008354:	4b14      	ldr	r3, [pc, #80]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 8008356:	4a15      	ldr	r2, [pc, #84]	; (80083ac <MX_USART2_UART_Init+0x5c>)
 8008358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800835a:	4b13      	ldr	r3, [pc, #76]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 800835c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008362:	4b11      	ldr	r3, [pc, #68]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 8008364:	2200      	movs	r2, #0
 8008366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 800836a:	2200      	movs	r2, #0
 800836c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800836e:	4b0e      	ldr	r3, [pc, #56]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 8008370:	2200      	movs	r2, #0
 8008372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008374:	4b0c      	ldr	r3, [pc, #48]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 8008376:	220c      	movs	r2, #12
 8008378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800837a:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 800837c:	2200      	movs	r2, #0
 800837e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 8008382:	2200      	movs	r2, #0
 8008384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008386:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 8008388:	2200      	movs	r2, #0
 800838a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800838c:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 800838e:	2200      	movs	r2, #0
 8008390:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008392:	4805      	ldr	r0, [pc, #20]	; (80083a8 <MX_USART2_UART_Init+0x58>)
 8008394:	f001 ff46 	bl	800a224 <HAL_UART_Init>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800839e:	f000 f857 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80083a2:	bf00      	nop
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000084 	.word	0x20000084
 80083ac:	40004400 	.word	0x40004400

080083b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b6:	f107 030c 	add.w	r3, r7, #12
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	605a      	str	r2, [r3, #4]
 80083c0:	609a      	str	r2, [r3, #8]
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80083c6:	4b17      	ldr	r3, [pc, #92]	; (8008424 <MX_GPIO_Init+0x74>)
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	4a16      	ldr	r2, [pc, #88]	; (8008424 <MX_GPIO_Init+0x74>)
 80083cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083d0:	6153      	str	r3, [r2, #20]
 80083d2:	4b14      	ldr	r3, [pc, #80]	; (8008424 <MX_GPIO_Init+0x74>)
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083da:	60bb      	str	r3, [r7, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80083de:	4b11      	ldr	r3, [pc, #68]	; (8008424 <MX_GPIO_Init+0x74>)
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	4a10      	ldr	r2, [pc, #64]	; (8008424 <MX_GPIO_Init+0x74>)
 80083e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083e8:	6153      	str	r3, [r2, #20]
 80083ea:	4b0e      	ldr	r3, [pc, #56]	; (8008424 <MX_GPIO_Init+0x74>)
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80083f6:	2200      	movs	r2, #0
 80083f8:	2108      	movs	r1, #8
 80083fa:	480b      	ldr	r0, [pc, #44]	; (8008428 <MX_GPIO_Init+0x78>)
 80083fc:	f000 fc86 	bl	8008d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008400:	2308      	movs	r3, #8
 8008402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008404:	2301      	movs	r3, #1
 8008406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800840c:	2300      	movs	r3, #0
 800840e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008410:	f107 030c 	add.w	r3, r7, #12
 8008414:	4619      	mov	r1, r3
 8008416:	4804      	ldr	r0, [pc, #16]	; (8008428 <MX_GPIO_Init+0x78>)
 8008418:	f000 fb06 	bl	8008a28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800841c:	bf00      	nop
 800841e:	3720      	adds	r7, #32
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40021000 	.word	0x40021000
 8008428:	48000400 	.word	0x48000400

0800842c <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE * f)
#endif
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8008434:	1d39      	adds	r1, r7, #4
 8008436:	f04f 33ff 	mov.w	r3, #4294967295
 800843a:	2201      	movs	r2, #1
 800843c:	4803      	ldr	r0, [pc, #12]	; (800844c <__io_putchar+0x20>)
 800843e:	f001 ff3f 	bl	800a2c0 <HAL_UART_Transmit>
	return ch;
 8008442:	687b      	ldr	r3, [r7, #4]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20000084 	.word	0x20000084

08008450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008454:	b672      	cpsid	i
}
 8008456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008458:	e7fe      	b.n	8008458 <Error_Handler+0x8>
	...

0800845c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008462:	4b0f      	ldr	r3, [pc, #60]	; (80084a0 <HAL_MspInit+0x44>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	4a0e      	ldr	r2, [pc, #56]	; (80084a0 <HAL_MspInit+0x44>)
 8008468:	f043 0301 	orr.w	r3, r3, #1
 800846c:	6193      	str	r3, [r2, #24]
 800846e:	4b0c      	ldr	r3, [pc, #48]	; (80084a0 <HAL_MspInit+0x44>)
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	607b      	str	r3, [r7, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800847a:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <HAL_MspInit+0x44>)
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	4a08      	ldr	r2, [pc, #32]	; (80084a0 <HAL_MspInit+0x44>)
 8008480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008484:	61d3      	str	r3, [r2, #28]
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <HAL_MspInit+0x44>)
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008492:	bf00      	nop
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40021000 	.word	0x40021000

080084a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08a      	sub	sp, #40	; 0x28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ac:	f107 0314 	add.w	r3, r7, #20
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	605a      	str	r2, [r3, #4]
 80084b6:	609a      	str	r2, [r3, #8]
 80084b8:	60da      	str	r2, [r3, #12]
 80084ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a18      	ldr	r2, [pc, #96]	; (8008524 <HAL_UART_MspInit+0x80>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d129      	bne.n	800851a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80084c6:	4b18      	ldr	r3, [pc, #96]	; (8008528 <HAL_UART_MspInit+0x84>)
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	4a17      	ldr	r2, [pc, #92]	; (8008528 <HAL_UART_MspInit+0x84>)
 80084cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d0:	61d3      	str	r3, [r2, #28]
 80084d2:	4b15      	ldr	r3, [pc, #84]	; (8008528 <HAL_UART_MspInit+0x84>)
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084de:	4b12      	ldr	r3, [pc, #72]	; (8008528 <HAL_UART_MspInit+0x84>)
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	4a11      	ldr	r2, [pc, #68]	; (8008528 <HAL_UART_MspInit+0x84>)
 80084e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084e8:	6153      	str	r3, [r2, #20]
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <HAL_UART_MspInit+0x84>)
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80084f6:	f248 0304 	movw	r3, #32772	; 0x8004
 80084fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084fc:	2302      	movs	r3, #2
 80084fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008504:	2303      	movs	r3, #3
 8008506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008508:	2307      	movs	r3, #7
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	4619      	mov	r1, r3
 8008512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008516:	f000 fa87 	bl	8008a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800851a:	bf00      	nop
 800851c:	3728      	adds	r7, #40	; 0x28
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	40004400 	.word	0x40004400
 8008528:	40021000 	.word	0x40021000

0800852c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008530:	e7fe      	b.n	8008530 <NMI_Handler+0x4>

08008532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008532:	b480      	push	{r7}
 8008534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008536:	e7fe      	b.n	8008536 <HardFault_Handler+0x4>

08008538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800853c:	e7fe      	b.n	800853c <MemManage_Handler+0x4>

0800853e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800853e:	b480      	push	{r7}
 8008540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008542:	e7fe      	b.n	8008542 <BusFault_Handler+0x4>

08008544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008544:	b480      	push	{r7}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008548:	e7fe      	b.n	8008548 <UsageFault_Handler+0x4>

0800854a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800854a:	b480      	push	{r7}
 800854c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800854e:	bf00      	nop
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008558:	b480      	push	{r7}
 800855a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800855c:	bf00      	nop
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008566:	b480      	push	{r7}
 8008568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800856a:	bf00      	nop
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008578:	f000 f92c 	bl	80087d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800857c:	bf00      	nop
 800857e:	bd80      	pop	{r7, pc}

08008580 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800858c:	2300      	movs	r3, #0
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e00a      	b.n	80085a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008592:	f3af 8000 	nop.w
 8008596:	4601      	mov	r1, r0
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	60ba      	str	r2, [r7, #8]
 800859e:	b2ca      	uxtb	r2, r1
 80085a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	3301      	adds	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	697a      	ldr	r2, [r7, #20]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	dbf0      	blt.n	8008592 <_read+0x12>
  }

  return len;
 80085b0:	687b      	ldr	r3, [r7, #4]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	e009      	b.n	80085e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	1c5a      	adds	r2, r3, #1
 80085d0:	60ba      	str	r2, [r7, #8]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff ff29 	bl	800842c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	3301      	adds	r3, #1
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	dbf1      	blt.n	80085cc <_write+0x12>
  }
  return len;
 80085e8:	687b      	ldr	r3, [r7, #4]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <_close>:

int _close(int file)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80085fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80085fe:	4618      	mov	r0, r3
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800861a:	605a      	str	r2, [r3, #4]
  return 0;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <_isatty>:

int _isatty(int file)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008632:	2301      	movs	r3, #1
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008664:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <_sbrk+0x5c>)
 8008666:	4b15      	ldr	r3, [pc, #84]	; (80086bc <_sbrk+0x60>)
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008670:	4b13      	ldr	r3, [pc, #76]	; (80086c0 <_sbrk+0x64>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008678:	4b11      	ldr	r3, [pc, #68]	; (80086c0 <_sbrk+0x64>)
 800867a:	4a12      	ldr	r2, [pc, #72]	; (80086c4 <_sbrk+0x68>)
 800867c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800867e:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <_sbrk+0x64>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	429a      	cmp	r2, r3
 800868a:	d207      	bcs.n	800869c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800868c:	f002 fb54 	bl	800ad38 <__errno>
 8008690:	4603      	mov	r3, r0
 8008692:	220c      	movs	r2, #12
 8008694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008696:	f04f 33ff 	mov.w	r3, #4294967295
 800869a:	e009      	b.n	80086b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800869c:	4b08      	ldr	r3, [pc, #32]	; (80086c0 <_sbrk+0x64>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80086a2:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <_sbrk+0x64>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4413      	add	r3, r2
 80086aa:	4a05      	ldr	r2, [pc, #20]	; (80086c0 <_sbrk+0x64>)
 80086ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80086ae:	68fb      	ldr	r3, [r7, #12]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20003000 	.word	0x20003000
 80086bc:	00000400 	.word	0x00000400
 80086c0:	2000010c 	.word	0x2000010c
 80086c4:	20000260 	.word	0x20000260

080086c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80086cc:	4b07      	ldr	r3, [pc, #28]	; (80086ec <SystemInit+0x24>)
 80086ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d2:	4a06      	ldr	r2, [pc, #24]	; (80086ec <SystemInit+0x24>)
 80086d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80086dc:	4b03      	ldr	r3, [pc, #12]	; (80086ec <SystemInit+0x24>)
 80086de:	4a04      	ldr	r2, [pc, #16]	; (80086f0 <SystemInit+0x28>)
 80086e0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80086e2:	bf00      	nop
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	e000ed00 	.word	0xe000ed00
 80086f0:	08008000 	.word	0x08008000

080086f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80086f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800872c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80086f8:	f7ff ffe6 	bl	80086c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80086fc:	480c      	ldr	r0, [pc, #48]	; (8008730 <LoopForever+0x6>)
  ldr r1, =_edata
 80086fe:	490d      	ldr	r1, [pc, #52]	; (8008734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008700:	4a0d      	ldr	r2, [pc, #52]	; (8008738 <LoopForever+0xe>)
  movs r3, #0
 8008702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008704:	e002      	b.n	800870c <LoopCopyDataInit>

08008706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800870a:	3304      	adds	r3, #4

0800870c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800870c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800870e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008710:	d3f9      	bcc.n	8008706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008712:	4a0a      	ldr	r2, [pc, #40]	; (800873c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008714:	4c0a      	ldr	r4, [pc, #40]	; (8008740 <LoopForever+0x16>)
  movs r3, #0
 8008716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008718:	e001      	b.n	800871e <LoopFillZerobss>

0800871a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800871a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800871c:	3204      	adds	r2, #4

0800871e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800871e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008720:	d3fb      	bcc.n	800871a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008722:	f002 fb0f 	bl	800ad44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008726:	f7ff fda3 	bl	8008270 <main>

0800872a <LoopForever>:

LoopForever:
    b LoopForever
 800872a:	e7fe      	b.n	800872a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800872c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8008730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008734:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008738:	0800b99c 	.word	0x0800b99c
  ldr r2, =_sbss
 800873c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008740:	20000260 	.word	0x20000260

08008744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008744:	e7fe      	b.n	8008744 <ADC1_2_IRQHandler>
	...

08008748 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800874c:	4b08      	ldr	r3, [pc, #32]	; (8008770 <HAL_Init+0x28>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a07      	ldr	r2, [pc, #28]	; (8008770 <HAL_Init+0x28>)
 8008752:	f043 0310 	orr.w	r3, r3, #16
 8008756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008758:	2003      	movs	r0, #3
 800875a:	f000 f931 	bl	80089c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800875e:	200f      	movs	r0, #15
 8008760:	f000 f808 	bl	8008774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008764:	f7ff fe7a 	bl	800845c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40022000 	.word	0x40022000

08008774 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800877c:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <HAL_InitTick+0x54>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	4b12      	ldr	r3, [pc, #72]	; (80087cc <HAL_InitTick+0x58>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	4619      	mov	r1, r3
 8008786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800878a:	fbb3 f3f1 	udiv	r3, r3, r1
 800878e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008792:	4618      	mov	r0, r3
 8008794:	f000 f93b 	bl	8008a0e <HAL_SYSTICK_Config>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e00e      	b.n	80087c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b0f      	cmp	r3, #15
 80087a6:	d80a      	bhi.n	80087be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087a8:	2200      	movs	r2, #0
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	f000 f911 	bl	80089d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80087b4:	4a06      	ldr	r2, [pc, #24]	; (80087d0 <HAL_InitTick+0x5c>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	e000      	b.n	80087c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000000 	.word	0x20000000
 80087cc:	20000008 	.word	0x20000008
 80087d0:	20000004 	.word	0x20000004

080087d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087d8:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <HAL_IncTick+0x20>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <HAL_IncTick+0x24>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4413      	add	r3, r2
 80087e4:	4a04      	ldr	r2, [pc, #16]	; (80087f8 <HAL_IncTick+0x24>)
 80087e6:	6013      	str	r3, [r2, #0]
}
 80087e8:	bf00      	nop
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20000008 	.word	0x20000008
 80087f8:	20000110 	.word	0x20000110

080087fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8008800:	4b03      	ldr	r3, [pc, #12]	; (8008810 <HAL_GetTick+0x14>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000110 	.word	0x20000110

08008814 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800881c:	f7ff ffee 	bl	80087fc <HAL_GetTick>
 8008820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882c:	d005      	beq.n	800883a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <HAL_Delay+0x44>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800883a:	bf00      	nop
 800883c:	f7ff ffde 	bl	80087fc <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	429a      	cmp	r2, r3
 800884a:	d8f7      	bhi.n	800883c <HAL_Delay+0x28>
  {
  }
}
 800884c:	bf00      	nop
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20000008 	.word	0x20000008

0800885c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800886c:	4b0c      	ldr	r3, [pc, #48]	; (80088a0 <__NVIC_SetPriorityGrouping+0x44>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008878:	4013      	ands	r3, r2
 800887a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800888e:	4a04      	ldr	r2, [pc, #16]	; (80088a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	60d3      	str	r3, [r2, #12]
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	e000ed00 	.word	0xe000ed00

080088a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088a8:	4b04      	ldr	r3, [pc, #16]	; (80088bc <__NVIC_GetPriorityGrouping+0x18>)
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	0a1b      	lsrs	r3, r3, #8
 80088ae:	f003 0307 	and.w	r3, r3, #7
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	e000ed00 	.word	0xe000ed00

080088c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	6039      	str	r1, [r7, #0]
 80088ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80088cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	db0a      	blt.n	80088ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	490c      	ldr	r1, [pc, #48]	; (800890c <__NVIC_SetPriority+0x4c>)
 80088da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088de:	0112      	lsls	r2, r2, #4
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	440b      	add	r3, r1
 80088e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80088e8:	e00a      	b.n	8008900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	4908      	ldr	r1, [pc, #32]	; (8008910 <__NVIC_SetPriority+0x50>)
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	3b04      	subs	r3, #4
 80088f8:	0112      	lsls	r2, r2, #4
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	440b      	add	r3, r1
 80088fe:	761a      	strb	r2, [r3, #24]
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	e000e100 	.word	0xe000e100
 8008910:	e000ed00 	.word	0xe000ed00

08008914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008914:	b480      	push	{r7}
 8008916:	b089      	sub	sp, #36	; 0x24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f1c3 0307 	rsb	r3, r3, #7
 800892e:	2b04      	cmp	r3, #4
 8008930:	bf28      	it	cs
 8008932:	2304      	movcs	r3, #4
 8008934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	3304      	adds	r3, #4
 800893a:	2b06      	cmp	r3, #6
 800893c:	d902      	bls.n	8008944 <NVIC_EncodePriority+0x30>
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	3b03      	subs	r3, #3
 8008942:	e000      	b.n	8008946 <NVIC_EncodePriority+0x32>
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008948:	f04f 32ff 	mov.w	r2, #4294967295
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	43da      	mvns	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	401a      	ands	r2, r3
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800895c:	f04f 31ff 	mov.w	r1, #4294967295
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	fa01 f303 	lsl.w	r3, r1, r3
 8008966:	43d9      	mvns	r1, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800896c:	4313      	orrs	r3, r2
         );
}
 800896e:	4618      	mov	r0, r3
 8008970:	3724      	adds	r7, #36	; 0x24
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
	...

0800897c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3b01      	subs	r3, #1
 8008988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800898c:	d301      	bcc.n	8008992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800898e:	2301      	movs	r3, #1
 8008990:	e00f      	b.n	80089b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008992:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <SysTick_Config+0x40>)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3b01      	subs	r3, #1
 8008998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800899a:	210f      	movs	r1, #15
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	f7ff ff8e 	bl	80088c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80089a4:	4b05      	ldr	r3, [pc, #20]	; (80089bc <SysTick_Config+0x40>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80089aa:	4b04      	ldr	r3, [pc, #16]	; (80089bc <SysTick_Config+0x40>)
 80089ac:	2207      	movs	r2, #7
 80089ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	e000e010 	.word	0xe000e010

080089c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff ff47 	bl	800885c <__NVIC_SetPriorityGrouping>
}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b086      	sub	sp, #24
 80089da:	af00      	add	r7, sp, #0
 80089dc:	4603      	mov	r3, r0
 80089de:	60b9      	str	r1, [r7, #8]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089e8:	f7ff ff5c 	bl	80088a4 <__NVIC_GetPriorityGrouping>
 80089ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	6978      	ldr	r0, [r7, #20]
 80089f4:	f7ff ff8e 	bl	8008914 <NVIC_EncodePriority>
 80089f8:	4602      	mov	r2, r0
 80089fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7ff ff5d 	bl	80088c0 <__NVIC_SetPriority>
}
 8008a06:	bf00      	nop
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff ffb0 	bl	800897c <SysTick_Config>
 8008a1c:	4603      	mov	r3, r0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
	...

08008a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008a36:	e14e      	b.n	8008cd6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	fa01 f303 	lsl.w	r3, r1, r3
 8008a44:	4013      	ands	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8140 	beq.w	8008cd0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d005      	beq.n	8008a68 <HAL_GPIO_Init+0x40>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d130      	bne.n	8008aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	2203      	movs	r2, #3
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	43db      	mvns	r3, r3
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	091b      	lsrs	r3, r3, #4
 8008ab4:	f003 0201 	and.w	r2, r3, #1
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d017      	beq.n	8008b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	43db      	mvns	r3, r3
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4013      	ands	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d123      	bne.n	8008b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	08da      	lsrs	r2, r3, #3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	3208      	adds	r2, #8
 8008b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	220f      	movs	r2, #15
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43db      	mvns	r3, r3
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	4013      	ands	r3, r2
 8008b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	691a      	ldr	r2, [r3, #16]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	08da      	lsrs	r2, r3, #3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3208      	adds	r2, #8
 8008b54:	6939      	ldr	r1, [r7, #16]
 8008b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	2203      	movs	r2, #3
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	43db      	mvns	r3, r3
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f003 0203 	and.w	r2, r3, #3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 809a 	beq.w	8008cd0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b9c:	4b55      	ldr	r3, [pc, #340]	; (8008cf4 <HAL_GPIO_Init+0x2cc>)
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	4a54      	ldr	r2, [pc, #336]	; (8008cf4 <HAL_GPIO_Init+0x2cc>)
 8008ba2:	f043 0301 	orr.w	r3, r3, #1
 8008ba6:	6193      	str	r3, [r2, #24]
 8008ba8:	4b52      	ldr	r3, [pc, #328]	; (8008cf4 <HAL_GPIO_Init+0x2cc>)
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	60bb      	str	r3, [r7, #8]
 8008bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008bb4:	4a50      	ldr	r2, [pc, #320]	; (8008cf8 <HAL_GPIO_Init+0x2d0>)
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	089b      	lsrs	r3, r3, #2
 8008bba:	3302      	adds	r3, #2
 8008bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f003 0303 	and.w	r3, r3, #3
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	220f      	movs	r2, #15
 8008bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd0:	43db      	mvns	r3, r3
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008bde:	d013      	beq.n	8008c08 <HAL_GPIO_Init+0x1e0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a46      	ldr	r2, [pc, #280]	; (8008cfc <HAL_GPIO_Init+0x2d4>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00d      	beq.n	8008c04 <HAL_GPIO_Init+0x1dc>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a45      	ldr	r2, [pc, #276]	; (8008d00 <HAL_GPIO_Init+0x2d8>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d007      	beq.n	8008c00 <HAL_GPIO_Init+0x1d8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a44      	ldr	r2, [pc, #272]	; (8008d04 <HAL_GPIO_Init+0x2dc>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d101      	bne.n	8008bfc <HAL_GPIO_Init+0x1d4>
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e006      	b.n	8008c0a <HAL_GPIO_Init+0x1e2>
 8008bfc:	2305      	movs	r3, #5
 8008bfe:	e004      	b.n	8008c0a <HAL_GPIO_Init+0x1e2>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e002      	b.n	8008c0a <HAL_GPIO_Init+0x1e2>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <HAL_GPIO_Init+0x1e2>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	697a      	ldr	r2, [r7, #20]
 8008c0c:	f002 0203 	and.w	r2, r2, #3
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	4093      	lsls	r3, r2
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008c1a:	4937      	ldr	r1, [pc, #220]	; (8008cf8 <HAL_GPIO_Init+0x2d0>)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	089b      	lsrs	r3, r3, #2
 8008c20:	3302      	adds	r3, #2
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c28:	4b37      	ldr	r3, [pc, #220]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	43db      	mvns	r3, r3
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4013      	ands	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008c4c:	4a2e      	ldr	r2, [pc, #184]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c52:	4b2d      	ldr	r3, [pc, #180]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008c76:	4a24      	ldr	r2, [pc, #144]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008c7c:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	43db      	mvns	r3, r3
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008ca0:	4a19      	ldr	r2, [pc, #100]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ca6:	4b18      	ldr	r3, [pc, #96]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008cca:	4a0f      	ldr	r2, [pc, #60]	; (8008d08 <HAL_GPIO_Init+0x2e0>)
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f47f aea9 	bne.w	8008a38 <HAL_GPIO_Init+0x10>
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	40010000 	.word	0x40010000
 8008cfc:	48000400 	.word	0x48000400
 8008d00:	48000800 	.word	0x48000800
 8008d04:	48000c00 	.word	0x48000c00
 8008d08:	40010400 	.word	0x40010400

08008d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	807b      	strh	r3, [r7, #2]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d1c:	787b      	ldrb	r3, [r7, #1]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008d22:	887a      	ldrh	r2, [r7, #2]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008d28:	e002      	b.n	8008d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008d2a:	887a      	ldrh	r2, [r7, #2]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d48:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008d4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d102      	bne.n	8008d62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f001 b823 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 817d 	beq.w	8009072 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008d78:	4bbc      	ldr	r3, [pc, #752]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f003 030c 	and.w	r3, r3, #12
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d00c      	beq.n	8008d9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008d84:	4bb9      	ldr	r3, [pc, #740]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f003 030c 	and.w	r3, r3, #12
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	d15c      	bne.n	8008e4a <HAL_RCC_OscConfig+0x10e>
 8008d90:	4bb6      	ldr	r3, [pc, #728]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d9c:	d155      	bne.n	8008e4a <HAL_RCC_OscConfig+0x10e>
 8008d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008da2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008daa:	fa93 f3a3 	rbit	r3, r3
 8008dae:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008db2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008db6:	fab3 f383 	clz	r3, r3
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	f043 0301 	orr.w	r3, r3, #1
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d102      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x94>
 8008dca:	4ba8      	ldr	r3, [pc, #672]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	e015      	b.n	8008dfc <HAL_RCC_OscConfig+0xc0>
 8008dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008dd4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008ddc:	fa93 f3a3 	rbit	r3, r3
 8008de0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008de8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008dec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008df0:	fa93 f3a3 	rbit	r3, r3
 8008df4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008df8:	4b9c      	ldr	r3, [pc, #624]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e00:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008e04:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008e08:	fa92 f2a2 	rbit	r2, r2
 8008e0c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8008e10:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008e14:	fab2 f282 	clz	r2, r2
 8008e18:	b2d2      	uxtb	r2, r2
 8008e1a:	f042 0220 	orr.w	r2, r2, #32
 8008e1e:	b2d2      	uxtb	r2, r2
 8008e20:	f002 021f 	and.w	r2, r2, #31
 8008e24:	2101      	movs	r1, #1
 8008e26:	fa01 f202 	lsl.w	r2, r1, r2
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 811f 	beq.w	8009070 <HAL_RCC_OscConfig+0x334>
 8008e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f040 8116 	bne.w	8009070 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f000 bfaf 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e5a:	d106      	bne.n	8008e6a <HAL_RCC_OscConfig+0x12e>
 8008e5c:	4b83      	ldr	r3, [pc, #524]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a82      	ldr	r2, [pc, #520]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	e036      	b.n	8008ed8 <HAL_RCC_OscConfig+0x19c>
 8008e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10c      	bne.n	8008e94 <HAL_RCC_OscConfig+0x158>
 8008e7a:	4b7c      	ldr	r3, [pc, #496]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a7b      	ldr	r2, [pc, #492]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e84:	6013      	str	r3, [r2, #0]
 8008e86:	4b79      	ldr	r3, [pc, #484]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a78      	ldr	r2, [pc, #480]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	e021      	b.n	8008ed8 <HAL_RCC_OscConfig+0x19c>
 8008e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ea4:	d10c      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x184>
 8008ea6:	4b71      	ldr	r3, [pc, #452]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a70      	ldr	r2, [pc, #448]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	4b6e      	ldr	r3, [pc, #440]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a6d      	ldr	r2, [pc, #436]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	e00b      	b.n	8008ed8 <HAL_RCC_OscConfig+0x19c>
 8008ec0:	4b6a      	ldr	r3, [pc, #424]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a69      	ldr	r2, [pc, #420]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eca:	6013      	str	r3, [r2, #0]
 8008ecc:	4b67      	ldr	r3, [pc, #412]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a66      	ldr	r2, [pc, #408]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ed6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008ed8:	4b64      	ldr	r3, [pc, #400]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	f023 020f 	bic.w	r2, r3, #15
 8008ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	495f      	ldr	r1, [pc, #380]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d059      	beq.n	8008fb6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f02:	f7ff fc7b 	bl	80087fc <HAL_GetTick>
 8008f06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f0a:	e00a      	b.n	8008f22 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f0c:	f7ff fc76 	bl	80087fc <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b64      	cmp	r3, #100	; 0x64
 8008f1a:	d902      	bls.n	8008f22 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	f000 bf43 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
 8008f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f26:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f2a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8008f2e:	fa93 f3a3 	rbit	r3, r3
 8008f32:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8008f36:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f3a:	fab3 f383 	clz	r3, r3
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	f043 0301 	orr.w	r3, r3, #1
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d102      	bne.n	8008f54 <HAL_RCC_OscConfig+0x218>
 8008f4e:	4b47      	ldr	r3, [pc, #284]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	e015      	b.n	8008f80 <HAL_RCC_OscConfig+0x244>
 8008f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f58:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8008f60:	fa93 f3a3 	rbit	r3, r3
 8008f64:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f6c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008f70:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8008f74:	fa93 f3a3 	rbit	r3, r3
 8008f78:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008f7c:	4b3b      	ldr	r3, [pc, #236]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f84:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8008f88:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008f8c:	fa92 f2a2 	rbit	r2, r2
 8008f90:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8008f94:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8008f98:	fab2 f282 	clz	r2, r2
 8008f9c:	b2d2      	uxtb	r2, r2
 8008f9e:	f042 0220 	orr.w	r2, r2, #32
 8008fa2:	b2d2      	uxtb	r2, r2
 8008fa4:	f002 021f 	and.w	r2, r2, #31
 8008fa8:	2101      	movs	r1, #1
 8008faa:	fa01 f202 	lsl.w	r2, r1, r2
 8008fae:	4013      	ands	r3, r2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d0ab      	beq.n	8008f0c <HAL_RCC_OscConfig+0x1d0>
 8008fb4:	e05d      	b.n	8009072 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb6:	f7ff fc21 	bl	80087fc <HAL_GetTick>
 8008fba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fbe:	e00a      	b.n	8008fd6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fc0:	f7ff fc1c 	bl	80087fc <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b64      	cmp	r3, #100	; 0x64
 8008fce:	d902      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	f000 bee9 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
 8008fd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008fda:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fde:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8008fe2:	fa93 f3a3 	rbit	r3, r3
 8008fe6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8008fea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fee:	fab3 f383 	clz	r3, r3
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f043 0301 	orr.w	r3, r3, #1
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d102      	bne.n	8009008 <HAL_RCC_OscConfig+0x2cc>
 8009002:	4b1a      	ldr	r3, [pc, #104]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	e015      	b.n	8009034 <HAL_RCC_OscConfig+0x2f8>
 8009008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800900c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009010:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8009014:	fa93 f3a3 	rbit	r3, r3
 8009018:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800901c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009020:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009024:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8009028:	fa93 f3a3 	rbit	r3, r3
 800902c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <HAL_RCC_OscConfig+0x330>)
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009038:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800903c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8009040:	fa92 f2a2 	rbit	r2, r2
 8009044:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8009048:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800904c:	fab2 f282 	clz	r2, r2
 8009050:	b2d2      	uxtb	r2, r2
 8009052:	f042 0220 	orr.w	r2, r2, #32
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	f002 021f 	and.w	r2, r2, #31
 800905c:	2101      	movs	r1, #1
 800905e:	fa01 f202 	lsl.w	r2, r1, r2
 8009062:	4013      	ands	r3, r2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1ab      	bne.n	8008fc0 <HAL_RCC_OscConfig+0x284>
 8009068:	e003      	b.n	8009072 <HAL_RCC_OscConfig+0x336>
 800906a:	bf00      	nop
 800906c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 817d 	beq.w	8009382 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009088:	4ba6      	ldr	r3, [pc, #664]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	f003 030c 	and.w	r3, r3, #12
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009094:	4ba3      	ldr	r3, [pc, #652]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f003 030c 	and.w	r3, r3, #12
 800909c:	2b08      	cmp	r3, #8
 800909e:	d172      	bne.n	8009186 <HAL_RCC_OscConfig+0x44a>
 80090a0:	4ba0      	ldr	r3, [pc, #640]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d16c      	bne.n	8009186 <HAL_RCC_OscConfig+0x44a>
 80090ac:	2302      	movs	r3, #2
 80090ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80090b6:	fa93 f3a3 	rbit	r3, r3
 80090ba:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80090be:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090c2:	fab3 f383 	clz	r3, r3
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	095b      	lsrs	r3, r3, #5
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	f043 0301 	orr.w	r3, r3, #1
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d102      	bne.n	80090dc <HAL_RCC_OscConfig+0x3a0>
 80090d6:	4b93      	ldr	r3, [pc, #588]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	e013      	b.n	8009104 <HAL_RCC_OscConfig+0x3c8>
 80090dc:	2302      	movs	r3, #2
 80090de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80090e6:	fa93 f3a3 	rbit	r3, r3
 80090ea:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80090ee:	2302      	movs	r3, #2
 80090f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80090f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80090f8:	fa93 f3a3 	rbit	r3, r3
 80090fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8009100:	4b88      	ldr	r3, [pc, #544]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2202      	movs	r2, #2
 8009106:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800910a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800910e:	fa92 f2a2 	rbit	r2, r2
 8009112:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8009116:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800911a:	fab2 f282 	clz	r2, r2
 800911e:	b2d2      	uxtb	r2, r2
 8009120:	f042 0220 	orr.w	r2, r2, #32
 8009124:	b2d2      	uxtb	r2, r2
 8009126:	f002 021f 	and.w	r2, r2, #31
 800912a:	2101      	movs	r1, #1
 800912c:	fa01 f202 	lsl.w	r2, r1, r2
 8009130:	4013      	ands	r3, r2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <HAL_RCC_OscConfig+0x410>
 8009136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800913a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d002      	beq.n	800914c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	f000 be2e 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800914c:	4b75      	ldr	r3, [pc, #468]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	21f8      	movs	r1, #248	; 0xf8
 8009162:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009166:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800916a:	fa91 f1a1 	rbit	r1, r1
 800916e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8009172:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8009176:	fab1 f181 	clz	r1, r1
 800917a:	b2c9      	uxtb	r1, r1
 800917c:	408b      	lsls	r3, r1
 800917e:	4969      	ldr	r1, [pc, #420]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 8009180:	4313      	orrs	r3, r2
 8009182:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009184:	e0fd      	b.n	8009382 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800918a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8088 	beq.w	80092a8 <HAL_RCC_OscConfig+0x56c>
 8009198:	2301      	movs	r3, #1
 800919a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800919e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80091a2:	fa93 f3a3 	rbit	r3, r3
 80091a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80091aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091ae:	fab3 f383 	clz	r3, r3
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80091b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	461a      	mov	r2, r3
 80091c0:	2301      	movs	r3, #1
 80091c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c4:	f7ff fb1a 	bl	80087fc <HAL_GetTick>
 80091c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091cc:	e00a      	b.n	80091e4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091ce:	f7ff fb15 	bl	80087fc <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d902      	bls.n	80091e4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	f000 bde2 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
 80091e4:	2302      	movs	r3, #2
 80091e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80091ee:	fa93 f3a3 	rbit	r3, r3
 80091f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80091f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091fa:	fab3 f383 	clz	r3, r3
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	095b      	lsrs	r3, r3, #5
 8009202:	b2db      	uxtb	r3, r3
 8009204:	f043 0301 	orr.w	r3, r3, #1
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b01      	cmp	r3, #1
 800920c:	d102      	bne.n	8009214 <HAL_RCC_OscConfig+0x4d8>
 800920e:	4b45      	ldr	r3, [pc, #276]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	e013      	b.n	800923c <HAL_RCC_OscConfig+0x500>
 8009214:	2302      	movs	r3, #2
 8009216:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800921a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800921e:	fa93 f3a3 	rbit	r3, r3
 8009222:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009226:	2302      	movs	r3, #2
 8009228:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800922c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009230:	fa93 f3a3 	rbit	r3, r3
 8009234:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8009238:	4b3a      	ldr	r3, [pc, #232]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 800923a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923c:	2202      	movs	r2, #2
 800923e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8009242:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009246:	fa92 f2a2 	rbit	r2, r2
 800924a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800924e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009252:	fab2 f282 	clz	r2, r2
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	f042 0220 	orr.w	r2, r2, #32
 800925c:	b2d2      	uxtb	r2, r2
 800925e:	f002 021f 	and.w	r2, r2, #31
 8009262:	2101      	movs	r1, #1
 8009264:	fa01 f202 	lsl.w	r2, r1, r2
 8009268:	4013      	ands	r3, r2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0af      	beq.n	80091ce <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800926e:	4b2d      	ldr	r3, [pc, #180]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800927a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	21f8      	movs	r1, #248	; 0xf8
 8009284:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009288:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800928c:	fa91 f1a1 	rbit	r1, r1
 8009290:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8009294:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009298:	fab1 f181 	clz	r1, r1
 800929c:	b2c9      	uxtb	r1, r1
 800929e:	408b      	lsls	r3, r1
 80092a0:	4920      	ldr	r1, [pc, #128]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	600b      	str	r3, [r1, #0]
 80092a6:	e06c      	b.n	8009382 <HAL_RCC_OscConfig+0x646>
 80092a8:	2301      	movs	r3, #1
 80092aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80092b2:	fa93 f3a3 	rbit	r3, r3
 80092b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80092ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092be:	fab3 f383 	clz	r3, r3
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80092c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	461a      	mov	r2, r3
 80092d0:	2300      	movs	r3, #0
 80092d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092d4:	f7ff fa92 	bl	80087fc <HAL_GetTick>
 80092d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092dc:	e00a      	b.n	80092f4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092de:	f7ff fa8d 	bl	80087fc <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d902      	bls.n	80092f4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	f000 bd5a 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
 80092f4:	2302      	movs	r3, #2
 80092f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80092fe:	fa93 f3a3 	rbit	r3, r3
 8009302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8009306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800930a:	fab3 f383 	clz	r3, r3
 800930e:	b2db      	uxtb	r3, r3
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f043 0301 	orr.w	r3, r3, #1
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b01      	cmp	r3, #1
 800931c:	d104      	bne.n	8009328 <HAL_RCC_OscConfig+0x5ec>
 800931e:	4b01      	ldr	r3, [pc, #4]	; (8009324 <HAL_RCC_OscConfig+0x5e8>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	e015      	b.n	8009350 <HAL_RCC_OscConfig+0x614>
 8009324:	40021000 	.word	0x40021000
 8009328:	2302      	movs	r3, #2
 800932a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800932e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009332:	fa93 f3a3 	rbit	r3, r3
 8009336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800933a:	2302      	movs	r3, #2
 800933c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009340:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009344:	fa93 f3a3 	rbit	r3, r3
 8009348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800934c:	4bc8      	ldr	r3, [pc, #800]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	2202      	movs	r2, #2
 8009352:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8009356:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800935a:	fa92 f2a2 	rbit	r2, r2
 800935e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8009362:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009366:	fab2 f282 	clz	r2, r2
 800936a:	b2d2      	uxtb	r2, r2
 800936c:	f042 0220 	orr.w	r2, r2, #32
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	f002 021f 	and.w	r2, r2, #31
 8009376:	2101      	movs	r1, #1
 8009378:	fa01 f202 	lsl.w	r2, r1, r2
 800937c:	4013      	ands	r3, r2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1ad      	bne.n	80092de <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0308 	and.w	r3, r3, #8
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8110 	beq.w	80095b8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800939c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	699b      	ldr	r3, [r3, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d079      	beq.n	800949c <HAL_RCC_OscConfig+0x760>
 80093a8:	2301      	movs	r3, #1
 80093aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80093b2:	fa93 f3a3 	rbit	r3, r3
 80093b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80093ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093be:	fab3 f383 	clz	r3, r3
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	461a      	mov	r2, r3
 80093c6:	4bab      	ldr	r3, [pc, #684]	; (8009674 <HAL_RCC_OscConfig+0x938>)
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	461a      	mov	r2, r3
 80093ce:	2301      	movs	r3, #1
 80093d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093d2:	f7ff fa13 	bl	80087fc <HAL_GetTick>
 80093d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093da:	e00a      	b.n	80093f2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093dc:	f7ff fa0e 	bl	80087fc <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d902      	bls.n	80093f2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	f000 bcdb 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
 80093f2:	2302      	movs	r3, #2
 80093f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80093fc:	fa93 f3a3 	rbit	r3, r3
 8009400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009408:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800940c:	2202      	movs	r2, #2
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009414:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	fa93 f2a3 	rbit	r2, r3
 800941e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009430:	2202      	movs	r2, #2
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	fa93 f2a3 	rbit	r2, r3
 8009442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800944a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800944c:	4b88      	ldr	r3, [pc, #544]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 800944e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009454:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009458:	2102      	movs	r1, #2
 800945a:	6019      	str	r1, [r3, #0]
 800945c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	fa93 f1a3 	rbit	r1, r3
 800946a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800946e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009472:	6019      	str	r1, [r3, #0]
  return result;
 8009474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009478:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	fab3 f383 	clz	r3, r3
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009488:	b2db      	uxtb	r3, r3
 800948a:	f003 031f 	and.w	r3, r3, #31
 800948e:	2101      	movs	r1, #1
 8009490:	fa01 f303 	lsl.w	r3, r1, r3
 8009494:	4013      	ands	r3, r2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0a0      	beq.n	80093dc <HAL_RCC_OscConfig+0x6a0>
 800949a:	e08d      	b.n	80095b8 <HAL_RCC_OscConfig+0x87c>
 800949c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80094a4:	2201      	movs	r2, #1
 80094a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	fa93 f2a3 	rbit	r2, r3
 80094b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80094be:	601a      	str	r2, [r3, #0]
  return result;
 80094c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80094c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80094c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094ca:	fab3 f383 	clz	r3, r3
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	461a      	mov	r2, r3
 80094d2:	4b68      	ldr	r3, [pc, #416]	; (8009674 <HAL_RCC_OscConfig+0x938>)
 80094d4:	4413      	add	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	461a      	mov	r2, r3
 80094da:	2300      	movs	r3, #0
 80094dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094de:	f7ff f98d 	bl	80087fc <HAL_GetTick>
 80094e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094e6:	e00a      	b.n	80094fe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094e8:	f7ff f988 	bl	80087fc <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d902      	bls.n	80094fe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	f000 bc55 	b.w	8009da8 <HAL_RCC_OscConfig+0x106c>
 80094fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009502:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009506:	2202      	movs	r2, #2
 8009508:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800950a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800950e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	fa93 f2a3 	rbit	r2, r3
 8009518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800951c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009526:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800952a:	2202      	movs	r2, #2
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009532:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	fa93 f2a3 	rbit	r2, r3
 800953c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009544:	601a      	str	r2, [r3, #0]
 8009546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800954a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800954e:	2202      	movs	r2, #2
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	fa93 f2a3 	rbit	r2, r3
 8009560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009564:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009568:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800956a:	4b41      	ldr	r3, [pc, #260]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 800956c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800956e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009572:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009576:	2102      	movs	r1, #2
 8009578:	6019      	str	r1, [r3, #0]
 800957a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800957e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	fa93 f1a3 	rbit	r1, r3
 8009588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800958c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009590:	6019      	str	r1, [r3, #0]
  return result;
 8009592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009596:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	fab3 f383 	clz	r3, r3
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 031f 	and.w	r3, r3, #31
 80095ac:	2101      	movs	r1, #1
 80095ae:	fa01 f303 	lsl.w	r3, r1, r3
 80095b2:	4013      	ands	r3, r2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d197      	bne.n	80094e8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0304 	and.w	r3, r3, #4
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 81a1 	beq.w	8009910 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095ce:	2300      	movs	r3, #0
 80095d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095d4:	4b26      	ldr	r3, [pc, #152]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d116      	bne.n	800960e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095e0:	4b23      	ldr	r3, [pc, #140]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	4a22      	ldr	r2, [pc, #136]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 80095e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ea:	61d3      	str	r3, [r2, #28]
 80095ec:	4b20      	ldr	r3, [pc, #128]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80095f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095f8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80095fc:	601a      	str	r2, [r3, #0]
 80095fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009602:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8009606:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009608:	2301      	movs	r3, #1
 800960a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800960e:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <HAL_RCC_OscConfig+0x93c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11a      	bne.n	8009650 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800961a:	4b17      	ldr	r3, [pc, #92]	; (8009678 <HAL_RCC_OscConfig+0x93c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a16      	ldr	r2, [pc, #88]	; (8009678 <HAL_RCC_OscConfig+0x93c>)
 8009620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009624:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009626:	f7ff f8e9 	bl	80087fc <HAL_GetTick>
 800962a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800962e:	e009      	b.n	8009644 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009630:	f7ff f8e4 	bl	80087fc <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b64      	cmp	r3, #100	; 0x64
 800963e:	d901      	bls.n	8009644 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e3b1      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009644:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <HAL_RCC_OscConfig+0x93c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0ef      	beq.n	8009630 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d10d      	bne.n	800967c <HAL_RCC_OscConfig+0x940>
 8009660:	4b03      	ldr	r3, [pc, #12]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	4a02      	ldr	r2, [pc, #8]	; (8009670 <HAL_RCC_OscConfig+0x934>)
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	6213      	str	r3, [r2, #32]
 800966c:	e03c      	b.n	80096e8 <HAL_RCC_OscConfig+0x9ac>
 800966e:	bf00      	nop
 8009670:	40021000 	.word	0x40021000
 8009674:	10908120 	.word	0x10908120
 8009678:	40007000 	.word	0x40007000
 800967c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009680:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10c      	bne.n	80096a6 <HAL_RCC_OscConfig+0x96a>
 800968c:	4bc1      	ldr	r3, [pc, #772]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	4ac0      	ldr	r2, [pc, #768]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 8009692:	f023 0301 	bic.w	r3, r3, #1
 8009696:	6213      	str	r3, [r2, #32]
 8009698:	4bbe      	ldr	r3, [pc, #760]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	4abd      	ldr	r2, [pc, #756]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 800969e:	f023 0304 	bic.w	r3, r3, #4
 80096a2:	6213      	str	r3, [r2, #32]
 80096a4:	e020      	b.n	80096e8 <HAL_RCC_OscConfig+0x9ac>
 80096a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b05      	cmp	r3, #5
 80096b4:	d10c      	bne.n	80096d0 <HAL_RCC_OscConfig+0x994>
 80096b6:	4bb7      	ldr	r3, [pc, #732]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	4ab6      	ldr	r2, [pc, #728]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096bc:	f043 0304 	orr.w	r3, r3, #4
 80096c0:	6213      	str	r3, [r2, #32]
 80096c2:	4bb4      	ldr	r3, [pc, #720]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	4ab3      	ldr	r2, [pc, #716]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096c8:	f043 0301 	orr.w	r3, r3, #1
 80096cc:	6213      	str	r3, [r2, #32]
 80096ce:	e00b      	b.n	80096e8 <HAL_RCC_OscConfig+0x9ac>
 80096d0:	4bb0      	ldr	r3, [pc, #704]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	4aaf      	ldr	r2, [pc, #700]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096d6:	f023 0301 	bic.w	r3, r3, #1
 80096da:	6213      	str	r3, [r2, #32]
 80096dc:	4bad      	ldr	r3, [pc, #692]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	4aac      	ldr	r2, [pc, #688]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80096e2:	f023 0304 	bic.w	r3, r3, #4
 80096e6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80096e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8081 	beq.w	80097fc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80096fa:	f7ff f87f 	bl	80087fc <HAL_GetTick>
 80096fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009702:	e00b      	b.n	800971c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009704:	f7ff f87a 	bl	80087fc <HAL_GetTick>
 8009708:	4602      	mov	r2, r0
 800970a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	f241 3288 	movw	r2, #5000	; 0x1388
 8009714:	4293      	cmp	r3, r2
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e345      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
 800971c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009720:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009724:	2202      	movs	r2, #2
 8009726:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800972c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	fa93 f2a3 	rbit	r2, r3
 8009736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800973a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009744:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009748:	2202      	movs	r2, #2
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009750:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	fa93 f2a3 	rbit	r2, r3
 800975a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800975e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009762:	601a      	str	r2, [r3, #0]
  return result;
 8009764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009768:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800976c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800976e:	fab3 f383 	clz	r3, r3
 8009772:	b2db      	uxtb	r3, r3
 8009774:	095b      	lsrs	r3, r3, #5
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f043 0302 	orr.w	r3, r3, #2
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b02      	cmp	r3, #2
 8009780:	d102      	bne.n	8009788 <HAL_RCC_OscConfig+0xa4c>
 8009782:	4b84      	ldr	r3, [pc, #528]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	e013      	b.n	80097b0 <HAL_RCC_OscConfig+0xa74>
 8009788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800978c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009790:	2202      	movs	r2, #2
 8009792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009798:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	fa93 f2a3 	rbit	r2, r3
 80097a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	4b79      	ldr	r3, [pc, #484]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80097ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80097b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80097b8:	2102      	movs	r1, #2
 80097ba:	6011      	str	r1, [r2, #0]
 80097bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80097c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	fa92 f1a2 	rbit	r1, r2
 80097ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80097ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80097d2:	6011      	str	r1, [r2, #0]
  return result;
 80097d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80097d8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	fab2 f282 	clz	r2, r2
 80097e2:	b2d2      	uxtb	r2, r2
 80097e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e8:	b2d2      	uxtb	r2, r2
 80097ea:	f002 021f 	and.w	r2, r2, #31
 80097ee:	2101      	movs	r1, #1
 80097f0:	fa01 f202 	lsl.w	r2, r1, r2
 80097f4:	4013      	ands	r3, r2
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d084      	beq.n	8009704 <HAL_RCC_OscConfig+0x9c8>
 80097fa:	e07f      	b.n	80098fc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097fc:	f7fe fffe 	bl	80087fc <HAL_GetTick>
 8009800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009804:	e00b      	b.n	800981e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009806:	f7fe fff9 	bl	80087fc <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	f241 3288 	movw	r2, #5000	; 0x1388
 8009816:	4293      	cmp	r3, r2
 8009818:	d901      	bls.n	800981e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e2c4      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
 800981e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009822:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009826:	2202      	movs	r2, #2
 8009828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800982a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800982e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	fa93 f2a3 	rbit	r2, r3
 8009838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800983c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009846:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800984a:	2202      	movs	r2, #2
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009852:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	fa93 f2a3 	rbit	r2, r3
 800985c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009860:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009864:	601a      	str	r2, [r3, #0]
  return result;
 8009866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800986a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800986e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009870:	fab3 f383 	clz	r3, r3
 8009874:	b2db      	uxtb	r3, r3
 8009876:	095b      	lsrs	r3, r3, #5
 8009878:	b2db      	uxtb	r3, r3
 800987a:	f043 0302 	orr.w	r3, r3, #2
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b02      	cmp	r3, #2
 8009882:	d102      	bne.n	800988a <HAL_RCC_OscConfig+0xb4e>
 8009884:	4b43      	ldr	r3, [pc, #268]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	e013      	b.n	80098b2 <HAL_RCC_OscConfig+0xb76>
 800988a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800988e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009892:	2202      	movs	r2, #2
 8009894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800989a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	fa93 f2a3 	rbit	r2, r3
 80098a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	4b39      	ldr	r3, [pc, #228]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80098ba:	2102      	movs	r1, #2
 80098bc:	6011      	str	r1, [r2, #0]
 80098be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80098c6:	6812      	ldr	r2, [r2, #0]
 80098c8:	fa92 f1a2 	rbit	r1, r2
 80098cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80098d4:	6011      	str	r1, [r2, #0]
  return result;
 80098d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80098da:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80098de:	6812      	ldr	r2, [r2, #0]
 80098e0:	fab2 f282 	clz	r2, r2
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	f002 021f 	and.w	r2, r2, #31
 80098f0:	2101      	movs	r1, #1
 80098f2:	fa01 f202 	lsl.w	r2, r1, r2
 80098f6:	4013      	ands	r3, r2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d184      	bne.n	8009806 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80098fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009900:	2b01      	cmp	r3, #1
 8009902:	d105      	bne.n	8009910 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009904:	4b23      	ldr	r3, [pc, #140]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	4a22      	ldr	r2, [pc, #136]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 800990a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800990e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69db      	ldr	r3, [r3, #28]
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8242 	beq.w	8009da6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009922:	4b1c      	ldr	r3, [pc, #112]	; (8009994 <HAL_RCC_OscConfig+0xc58>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f003 030c 	and.w	r3, r3, #12
 800992a:	2b08      	cmp	r3, #8
 800992c:	f000 8213 	beq.w	8009d56 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	2b02      	cmp	r3, #2
 800993e:	f040 8162 	bne.w	8009c06 <HAL_RCC_OscConfig+0xeca>
 8009942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009946:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800994a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800994e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009954:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	fa93 f2a3 	rbit	r2, r3
 800995e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009962:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009966:	601a      	str	r2, [r3, #0]
  return result;
 8009968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800996c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009970:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009972:	fab3 f383 	clz	r3, r3
 8009976:	b2db      	uxtb	r3, r3
 8009978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800997c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	461a      	mov	r2, r3
 8009984:	2300      	movs	r3, #0
 8009986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009988:	f7fe ff38 	bl	80087fc <HAL_GetTick>
 800998c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009990:	e00c      	b.n	80099ac <HAL_RCC_OscConfig+0xc70>
 8009992:	bf00      	nop
 8009994:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009998:	f7fe ff30 	bl	80087fc <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d901      	bls.n	80099ac <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e1fd      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
 80099ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099b0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80099b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80099b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099be:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	fa93 f2a3 	rbit	r2, r3
 80099c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80099d0:	601a      	str	r2, [r3, #0]
  return result;
 80099d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099d6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80099da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80099dc:	fab3 f383 	clz	r3, r3
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	095b      	lsrs	r3, r3, #5
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	f043 0301 	orr.w	r3, r3, #1
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d102      	bne.n	80099f6 <HAL_RCC_OscConfig+0xcba>
 80099f0:	4bb0      	ldr	r3, [pc, #704]	; (8009cb4 <HAL_RCC_OscConfig+0xf78>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	e027      	b.n	8009a46 <HAL_RCC_OscConfig+0xd0a>
 80099f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099fa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80099fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	fa93 f2a3 	rbit	r2, r3
 8009a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a20:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a2e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	fa93 f2a3 	rbit	r2, r3
 8009a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	4b9c      	ldr	r3, [pc, #624]	; (8009cb4 <HAL_RCC_OscConfig+0xf78>)
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a4a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009a4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009a52:	6011      	str	r1, [r2, #0]
 8009a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a58:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	fa92 f1a2 	rbit	r1, r2
 8009a62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009a6a:	6011      	str	r1, [r2, #0]
  return result;
 8009a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a70:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009a74:	6812      	ldr	r2, [r2, #0]
 8009a76:	fab2 f282 	clz	r2, r2
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	f042 0220 	orr.w	r2, r2, #32
 8009a80:	b2d2      	uxtb	r2, r2
 8009a82:	f002 021f 	and.w	r2, r2, #31
 8009a86:	2101      	movs	r1, #1
 8009a88:	fa01 f202 	lsl.w	r2, r1, r2
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d182      	bne.n	8009998 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009a92:	4b88      	ldr	r3, [pc, #544]	; (8009cb4 <HAL_RCC_OscConfig+0xf78>)
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	497f      	ldr	r1, [pc, #508]	; (8009cb4 <HAL_RCC_OscConfig+0xf78>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	604b      	str	r3, [r1, #4]
 8009aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009abe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009ac2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009acc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	fa93 f2a3 	rbit	r2, r3
 8009ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ada:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009ade:	601a      	str	r2, [r3, #0]
  return result;
 8009ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ae4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009ae8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009aea:	fab3 f383 	clz	r3, r3
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009af4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	461a      	mov	r2, r3
 8009afc:	2301      	movs	r3, #1
 8009afe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b00:	f7fe fe7c 	bl	80087fc <HAL_GetTick>
 8009b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009b08:	e009      	b.n	8009b1e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b0a:	f7fe fe77 	bl	80087fc <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e144      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
 8009b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b22:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	fa93 f2a3 	rbit	r2, r3
 8009b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b3e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009b42:	601a      	str	r2, [r3, #0]
  return result;
 8009b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b48:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009b4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009b4e:	fab3 f383 	clz	r3, r3
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	095b      	lsrs	r3, r3, #5
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f043 0301 	orr.w	r3, r3, #1
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d102      	bne.n	8009b68 <HAL_RCC_OscConfig+0xe2c>
 8009b62:	4b54      	ldr	r3, [pc, #336]	; (8009cb4 <HAL_RCC_OscConfig+0xf78>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	e027      	b.n	8009bb8 <HAL_RCC_OscConfig+0xe7c>
 8009b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b6c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009b70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b7a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	fa93 f2a3 	rbit	r2, r3
 8009b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b88:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b92:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009b96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ba0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	fa93 f2a3 	rbit	r2, r3
 8009baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bae:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	4b3f      	ldr	r3, [pc, #252]	; (8009cb4 <HAL_RCC_OscConfig+0xf78>)
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bbc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009bc4:	6011      	str	r1, [r2, #0]
 8009bc6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bca:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009bce:	6812      	ldr	r2, [r2, #0]
 8009bd0:	fa92 f1a2 	rbit	r1, r2
 8009bd4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bd8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009bdc:	6011      	str	r1, [r2, #0]
  return result;
 8009bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009be2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	fab2 f282 	clz	r2, r2
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	f042 0220 	orr.w	r2, r2, #32
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	f002 021f 	and.w	r2, r2, #31
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8009bfe:	4013      	ands	r3, r2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d082      	beq.n	8009b0a <HAL_RCC_OscConfig+0xdce>
 8009c04:	e0cf      	b.n	8009da6 <HAL_RCC_OscConfig+0x106a>
 8009c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c0a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009c0e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c18:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	fa93 f2a3 	rbit	r2, r3
 8009c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c26:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009c2a:	601a      	str	r2, [r3, #0]
  return result;
 8009c2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c30:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009c34:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c36:	fab3 f383 	clz	r3, r3
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009c40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	461a      	mov	r2, r3
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c4c:	f7fe fdd6 	bl	80087fc <HAL_GetTick>
 8009c50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c54:	e009      	b.n	8009c6a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c56:	f7fe fdd1 	bl	80087fc <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e09e      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
 8009c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c7c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	fa93 f2a3 	rbit	r2, r3
 8009c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c8a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009c8e:	601a      	str	r2, [r3, #0]
  return result;
 8009c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c94:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009c98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c9a:	fab3 f383 	clz	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	095b      	lsrs	r3, r3, #5
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f043 0301 	orr.w	r3, r3, #1
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d104      	bne.n	8009cb8 <HAL_RCC_OscConfig+0xf7c>
 8009cae:	4b01      	ldr	r3, [pc, #4]	; (8009cb4 <HAL_RCC_OscConfig+0xf78>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	e029      	b.n	8009d08 <HAL_RCC_OscConfig+0xfcc>
 8009cb4:	40021000 	.word	0x40021000
 8009cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cbc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009cc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	fa93 f2a3 	rbit	r2, r3
 8009cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cd8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009ce6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cf0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	fa93 f2a3 	rbit	r2, r3
 8009cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cfe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	4b2b      	ldr	r3, [pc, #172]	; (8009db4 <HAL_RCC_OscConfig+0x1078>)
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d0c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009d14:	6011      	str	r1, [r2, #0]
 8009d16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d1a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	fa92 f1a2 	rbit	r1, r2
 8009d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009d2c:	6011      	str	r1, [r2, #0]
  return result;
 8009d2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d32:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009d36:	6812      	ldr	r2, [r2, #0]
 8009d38:	fab2 f282 	clz	r2, r2
 8009d3c:	b2d2      	uxtb	r2, r2
 8009d3e:	f042 0220 	orr.w	r2, r2, #32
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	f002 021f 	and.w	r2, r2, #31
 8009d48:	2101      	movs	r1, #1
 8009d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8009d4e:	4013      	ands	r3, r2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d180      	bne.n	8009c56 <HAL_RCC_OscConfig+0xf1a>
 8009d54:	e027      	b.n	8009da6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e01e      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009d6a:	4b12      	ldr	r3, [pc, #72]	; (8009db4 <HAL_RCC_OscConfig+0x1078>)
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009d72:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009d76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d10b      	bne.n	8009da2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8009d8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009d8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d001      	beq.n	8009da6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	40021000 	.word	0x40021000

08009db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b09e      	sub	sp, #120	; 0x78
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e162      	b.n	800a096 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009dd0:	4b90      	ldr	r3, [pc, #576]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0307 	and.w	r3, r3, #7
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d910      	bls.n	8009e00 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009dde:	4b8d      	ldr	r3, [pc, #564]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f023 0207 	bic.w	r2, r3, #7
 8009de6:	498b      	ldr	r1, [pc, #556]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009dee:	4b89      	ldr	r3, [pc, #548]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d001      	beq.n	8009e00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e14a      	b.n	800a096 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0302 	and.w	r3, r3, #2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d008      	beq.n	8009e1e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e0c:	4b82      	ldr	r3, [pc, #520]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	497f      	ldr	r1, [pc, #508]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f000 80dc 	beq.w	8009fe4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d13c      	bne.n	8009eae <HAL_RCC_ClockConfig+0xf6>
 8009e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e38:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e3c:	fa93 f3a3 	rbit	r3, r3
 8009e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e44:	fab3 f383 	clz	r3, r3
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	f043 0301 	orr.w	r3, r3, #1
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d102      	bne.n	8009e5e <HAL_RCC_ClockConfig+0xa6>
 8009e58:	4b6f      	ldr	r3, [pc, #444]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	e00f      	b.n	8009e7e <HAL_RCC_ClockConfig+0xc6>
 8009e5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e66:	fa93 f3a3 	rbit	r3, r3
 8009e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8009e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e70:	663b      	str	r3, [r7, #96]	; 0x60
 8009e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e74:	fa93 f3a3 	rbit	r3, r3
 8009e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e7a:	4b67      	ldr	r3, [pc, #412]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009e82:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e86:	fa92 f2a2 	rbit	r2, r2
 8009e8a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009e8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e8e:	fab2 f282 	clz	r2, r2
 8009e92:	b2d2      	uxtb	r2, r2
 8009e94:	f042 0220 	orr.w	r2, r2, #32
 8009e98:	b2d2      	uxtb	r2, r2
 8009e9a:	f002 021f 	and.w	r2, r2, #31
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d17b      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e0f3      	b.n	800a096 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d13c      	bne.n	8009f30 <HAL_RCC_ClockConfig+0x178>
 8009eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009eba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ebe:	fa93 f3a3 	rbit	r3, r3
 8009ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ec6:	fab3 f383 	clz	r3, r3
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d102      	bne.n	8009ee0 <HAL_RCC_ClockConfig+0x128>
 8009eda:	4b4f      	ldr	r3, [pc, #316]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	e00f      	b.n	8009f00 <HAL_RCC_ClockConfig+0x148>
 8009ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ee4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ee8:	fa93 f3a3 	rbit	r3, r3
 8009eec:	647b      	str	r3, [r7, #68]	; 0x44
 8009eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8009ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef6:	fa93 f3a3 	rbit	r3, r3
 8009efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009efc:	4b46      	ldr	r3, [pc, #280]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f04:	63ba      	str	r2, [r7, #56]	; 0x38
 8009f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f08:	fa92 f2a2 	rbit	r2, r2
 8009f0c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f10:	fab2 f282 	clz	r2, r2
 8009f14:	b2d2      	uxtb	r2, r2
 8009f16:	f042 0220 	orr.w	r2, r2, #32
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	f002 021f 	and.w	r2, r2, #31
 8009f20:	2101      	movs	r1, #1
 8009f22:	fa01 f202 	lsl.w	r2, r1, r2
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d13a      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e0b2      	b.n	800a096 <HAL_RCC_ClockConfig+0x2de>
 8009f30:	2302      	movs	r3, #2
 8009f32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	fa93 f3a3 	rbit	r3, r3
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f3e:	fab3 f383 	clz	r3, r3
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	095b      	lsrs	r3, r3, #5
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d102      	bne.n	8009f58 <HAL_RCC_ClockConfig+0x1a0>
 8009f52:	4b31      	ldr	r3, [pc, #196]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	e00d      	b.n	8009f74 <HAL_RCC_ClockConfig+0x1bc>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	fa93 f3a3 	rbit	r3, r3
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
 8009f64:	2302      	movs	r3, #2
 8009f66:	623b      	str	r3, [r7, #32]
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	fa93 f3a3 	rbit	r3, r3
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	4b29      	ldr	r3, [pc, #164]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	2202      	movs	r2, #2
 8009f76:	61ba      	str	r2, [r7, #24]
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	fa92 f2a2 	rbit	r2, r2
 8009f7e:	617a      	str	r2, [r7, #20]
  return result;
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	fab2 f282 	clz	r2, r2
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	f042 0220 	orr.w	r2, r2, #32
 8009f8c:	b2d2      	uxtb	r2, r2
 8009f8e:	f002 021f 	and.w	r2, r2, #31
 8009f92:	2101      	movs	r1, #1
 8009f94:	fa01 f202 	lsl.w	r2, r1, r2
 8009f98:	4013      	ands	r3, r2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e079      	b.n	800a096 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fa2:	4b1d      	ldr	r3, [pc, #116]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	f023 0203 	bic.w	r2, r3, #3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	491a      	ldr	r1, [pc, #104]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009fb4:	f7fe fc22 	bl	80087fc <HAL_GetTick>
 8009fb8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fba:	e00a      	b.n	8009fd2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fbc:	f7fe fc1e 	bl	80087fc <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d901      	bls.n	8009fd2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009fce:	2303      	movs	r3, #3
 8009fd0:	e061      	b.n	800a096 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009fd2:	4b11      	ldr	r3, [pc, #68]	; (800a018 <HAL_RCC_ClockConfig+0x260>)
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f003 020c 	and.w	r2, r3, #12
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d1eb      	bne.n	8009fbc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009fe4:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0307 	and.w	r3, r3, #7
 8009fec:	683a      	ldr	r2, [r7, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d214      	bcs.n	800a01c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ff2:	4b08      	ldr	r3, [pc, #32]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f023 0207 	bic.w	r2, r3, #7
 8009ffa:	4906      	ldr	r1, [pc, #24]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a002:	4b04      	ldr	r3, [pc, #16]	; (800a014 <HAL_RCC_ClockConfig+0x25c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d005      	beq.n	800a01c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e040      	b.n	800a096 <HAL_RCC_ClockConfig+0x2de>
 800a014:	40022000 	.word	0x40022000
 800a018:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a028:	4b1d      	ldr	r3, [pc, #116]	; (800a0a0 <HAL_RCC_ClockConfig+0x2e8>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	491a      	ldr	r1, [pc, #104]	; (800a0a0 <HAL_RCC_ClockConfig+0x2e8>)
 800a036:	4313      	orrs	r3, r2
 800a038:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	2b00      	cmp	r3, #0
 800a044:	d009      	beq.n	800a05a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <HAL_RCC_ClockConfig+0x2e8>)
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	4912      	ldr	r1, [pc, #72]	; (800a0a0 <HAL_RCC_ClockConfig+0x2e8>)
 800a056:	4313      	orrs	r3, r2
 800a058:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a05a:	f000 f829 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 800a05e:	4601      	mov	r1, r0
 800a060:	4b0f      	ldr	r3, [pc, #60]	; (800a0a0 <HAL_RCC_ClockConfig+0x2e8>)
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a068:	22f0      	movs	r2, #240	; 0xf0
 800a06a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a06c:	693a      	ldr	r2, [r7, #16]
 800a06e:	fa92 f2a2 	rbit	r2, r2
 800a072:	60fa      	str	r2, [r7, #12]
  return result;
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	fab2 f282 	clz	r2, r2
 800a07a:	b2d2      	uxtb	r2, r2
 800a07c:	40d3      	lsrs	r3, r2
 800a07e:	4a09      	ldr	r2, [pc, #36]	; (800a0a4 <HAL_RCC_ClockConfig+0x2ec>)
 800a080:	5cd3      	ldrb	r3, [r2, r3]
 800a082:	fa21 f303 	lsr.w	r3, r1, r3
 800a086:	4a08      	ldr	r2, [pc, #32]	; (800a0a8 <HAL_RCC_ClockConfig+0x2f0>)
 800a088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a08a:	4b08      	ldr	r3, [pc, #32]	; (800a0ac <HAL_RCC_ClockConfig+0x2f4>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fe fb70 	bl	8008774 <HAL_InitTick>
  
  return HAL_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3778      	adds	r7, #120	; 0x78
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	40021000 	.word	0x40021000
 800a0a4:	0800b928 	.word	0x0800b928
 800a0a8:	20000000 	.word	0x20000000
 800a0ac:	20000004 	.word	0x20000004

0800a0b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b08b      	sub	sp, #44	; 0x2c
 800a0b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	61fb      	str	r3, [r7, #28]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61bb      	str	r3, [r7, #24]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a0ca:	4b29      	ldr	r3, [pc, #164]	; (800a170 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	f003 030c 	and.w	r3, r3, #12
 800a0d6:	2b04      	cmp	r3, #4
 800a0d8:	d002      	beq.n	800a0e0 <HAL_RCC_GetSysClockFreq+0x30>
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	d003      	beq.n	800a0e6 <HAL_RCC_GetSysClockFreq+0x36>
 800a0de:	e03c      	b.n	800a15a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a0e0:	4b24      	ldr	r3, [pc, #144]	; (800a174 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a0e2:	623b      	str	r3, [r7, #32]
      break;
 800a0e4:	e03c      	b.n	800a160 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a0ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a0f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	fa92 f2a2 	rbit	r2, r2
 800a0f8:	607a      	str	r2, [r7, #4]
  return result;
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	fab2 f282 	clz	r2, r2
 800a100:	b2d2      	uxtb	r2, r2
 800a102:	40d3      	lsrs	r3, r2
 800a104:	4a1c      	ldr	r2, [pc, #112]	; (800a178 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a106:	5cd3      	ldrb	r3, [r2, r3]
 800a108:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a10a:	4b19      	ldr	r3, [pc, #100]	; (800a170 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	f003 030f 	and.w	r3, r3, #15
 800a112:	220f      	movs	r2, #15
 800a114:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	fa92 f2a2 	rbit	r2, r2
 800a11c:	60fa      	str	r2, [r7, #12]
  return result;
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	fab2 f282 	clz	r2, r2
 800a124:	b2d2      	uxtb	r2, r2
 800a126:	40d3      	lsrs	r3, r2
 800a128:	4a14      	ldr	r2, [pc, #80]	; (800a17c <HAL_RCC_GetSysClockFreq+0xcc>)
 800a12a:	5cd3      	ldrb	r3, [r2, r3]
 800a12c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d008      	beq.n	800a14a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a138:	4a0e      	ldr	r2, [pc, #56]	; (800a174 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	fb02 f303 	mul.w	r3, r2, r3
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
 800a148:	e004      	b.n	800a154 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	4a0c      	ldr	r2, [pc, #48]	; (800a180 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a14e:	fb02 f303 	mul.w	r3, r2, r3
 800a152:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	623b      	str	r3, [r7, #32]
      break;
 800a158:	e002      	b.n	800a160 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a15a:	4b06      	ldr	r3, [pc, #24]	; (800a174 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a15c:	623b      	str	r3, [r7, #32]
      break;
 800a15e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a160:	6a3b      	ldr	r3, [r7, #32]
}
 800a162:	4618      	mov	r0, r3
 800a164:	372c      	adds	r7, #44	; 0x2c
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	40021000 	.word	0x40021000
 800a174:	007a1200 	.word	0x007a1200
 800a178:	0800b940 	.word	0x0800b940
 800a17c:	0800b950 	.word	0x0800b950
 800a180:	003d0900 	.word	0x003d0900

0800a184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a184:	b480      	push	{r7}
 800a186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a188:	4b03      	ldr	r3, [pc, #12]	; (800a198 <HAL_RCC_GetHCLKFreq+0x14>)
 800a18a:	681b      	ldr	r3, [r3, #0]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20000000 	.word	0x20000000

0800a19c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800a1a2:	f7ff ffef 	bl	800a184 <HAL_RCC_GetHCLKFreq>
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	4b0b      	ldr	r3, [pc, #44]	; (800a1d8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a1b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	fa92 f2a2 	rbit	r2, r2
 800a1bc:	603a      	str	r2, [r7, #0]
  return result;
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	fab2 f282 	clz	r2, r2
 800a1c4:	b2d2      	uxtb	r2, r2
 800a1c6:	40d3      	lsrs	r3, r2
 800a1c8:	4a04      	ldr	r2, [pc, #16]	; (800a1dc <HAL_RCC_GetPCLK1Freq+0x40>)
 800a1ca:	5cd3      	ldrb	r3, [r2, r3]
 800a1cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	40021000 	.word	0x40021000
 800a1dc:	0800b938 	.word	0x0800b938

0800a1e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800a1e6:	f7ff ffcd 	bl	800a184 <HAL_RCC_GetHCLKFreq>
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800a1f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800a1f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	fa92 f2a2 	rbit	r2, r2
 800a200:	603a      	str	r2, [r7, #0]
  return result;
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	fab2 f282 	clz	r2, r2
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	40d3      	lsrs	r3, r2
 800a20c:	4a04      	ldr	r2, [pc, #16]	; (800a220 <HAL_RCC_GetPCLK2Freq+0x40>)
 800a20e:	5cd3      	ldrb	r3, [r2, r3]
 800a210:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800a214:	4618      	mov	r0, r3
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	40021000 	.word	0x40021000
 800a220:	0800b938 	.word	0x0800b938

0800a224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e040      	b.n	800a2b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d106      	bne.n	800a24c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7fe f92c 	bl	80084a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2224      	movs	r2, #36	; 0x24
 800a250:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f022 0201 	bic.w	r2, r2, #1
 800a260:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f8b6 	bl	800a3d4 <UART_SetConfig>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d101      	bne.n	800a272 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e022      	b.n	800a2b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f9e0 	bl	800a640 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a28e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a29e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0201 	orr.w	r2, r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fa67 	bl	800a784 <UART_CheckIdleState>
 800a2b6:	4603      	mov	r3, r0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08a      	sub	sp, #40	; 0x28
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	60b9      	str	r1, [r7, #8]
 800a2ca:	603b      	str	r3, [r7, #0]
 800a2cc:	4613      	mov	r3, r2
 800a2ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d178      	bne.n	800a3ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <HAL_UART_Transmit+0x24>
 800a2de:	88fb      	ldrh	r3, [r7, #6]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d101      	bne.n	800a2e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e071      	b.n	800a3cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2221      	movs	r2, #33	; 0x21
 800a2f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2f6:	f7fe fa81 	bl	80087fc <HAL_GetTick>
 800a2fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	88fa      	ldrh	r2, [r7, #6]
 800a300:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	88fa      	ldrh	r2, [r7, #6]
 800a308:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a314:	d108      	bne.n	800a328 <HAL_UART_Transmit+0x68>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d104      	bne.n	800a328 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	61bb      	str	r3, [r7, #24]
 800a326:	e003      	b.n	800a330 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a330:	e030      	b.n	800a394 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2200      	movs	r2, #0
 800a33a:	2180      	movs	r1, #128	; 0x80
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 fac9 	bl	800a8d4 <UART_WaitOnFlagUntilTimeout>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d004      	beq.n	800a352 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2220      	movs	r2, #32
 800a34c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e03c      	b.n	800a3cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10b      	bne.n	800a370 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	881a      	ldrh	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a364:	b292      	uxth	r2, r2
 800a366:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	3302      	adds	r3, #2
 800a36c:	61bb      	str	r3, [r7, #24]
 800a36e:	e008      	b.n	800a382 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	b292      	uxth	r2, r2
 800a37a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	3301      	adds	r3, #1
 800a380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1c8      	bne.n	800a332 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2140      	movs	r1, #64	; 0x40
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fa92 	bl	800a8d4 <UART_WaitOnFlagUntilTimeout>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e005      	b.n	800a3cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e000      	b.n	800a3cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a3ca:	2302      	movs	r3, #2
  }
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3720      	adds	r7, #32
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4b8a      	ldr	r3, [pc, #552]	; (800a628 <UART_SetConfig+0x254>)
 800a400:	4013      	ands	r3, r2
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	6979      	ldr	r1, [r7, #20]
 800a408:	430b      	orrs	r3, r1
 800a40a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	430a      	orrs	r2, r1
 800a444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a78      	ldr	r2, [pc, #480]	; (800a62c <UART_SetConfig+0x258>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d120      	bne.n	800a492 <UART_SetConfig+0xbe>
 800a450:	4b77      	ldr	r3, [pc, #476]	; (800a630 <UART_SetConfig+0x25c>)
 800a452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a454:	f003 0303 	and.w	r3, r3, #3
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d817      	bhi.n	800a48c <UART_SetConfig+0xb8>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <UART_SetConfig+0x90>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a475 	.word	0x0800a475
 800a468:	0800a481 	.word	0x0800a481
 800a46c:	0800a487 	.word	0x0800a487
 800a470:	0800a47b 	.word	0x0800a47b
 800a474:	2300      	movs	r3, #0
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e01d      	b.n	800a4b6 <UART_SetConfig+0xe2>
 800a47a:	2302      	movs	r3, #2
 800a47c:	77fb      	strb	r3, [r7, #31]
 800a47e:	e01a      	b.n	800a4b6 <UART_SetConfig+0xe2>
 800a480:	2304      	movs	r3, #4
 800a482:	77fb      	strb	r3, [r7, #31]
 800a484:	e017      	b.n	800a4b6 <UART_SetConfig+0xe2>
 800a486:	2308      	movs	r3, #8
 800a488:	77fb      	strb	r3, [r7, #31]
 800a48a:	e014      	b.n	800a4b6 <UART_SetConfig+0xe2>
 800a48c:	2310      	movs	r3, #16
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e011      	b.n	800a4b6 <UART_SetConfig+0xe2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a67      	ldr	r2, [pc, #412]	; (800a634 <UART_SetConfig+0x260>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d102      	bne.n	800a4a2 <UART_SetConfig+0xce>
 800a49c:	2300      	movs	r3, #0
 800a49e:	77fb      	strb	r3, [r7, #31]
 800a4a0:	e009      	b.n	800a4b6 <UART_SetConfig+0xe2>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a64      	ldr	r2, [pc, #400]	; (800a638 <UART_SetConfig+0x264>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d102      	bne.n	800a4b2 <UART_SetConfig+0xde>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	77fb      	strb	r3, [r7, #31]
 800a4b0:	e001      	b.n	800a4b6 <UART_SetConfig+0xe2>
 800a4b2:	2310      	movs	r3, #16
 800a4b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4be:	d15a      	bne.n	800a576 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800a4c0:	7ffb      	ldrb	r3, [r7, #31]
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	d827      	bhi.n	800a516 <UART_SetConfig+0x142>
 800a4c6:	a201      	add	r2, pc, #4	; (adr r2, 800a4cc <UART_SetConfig+0xf8>)
 800a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4cc:	0800a4f1 	.word	0x0800a4f1
 800a4d0:	0800a4f9 	.word	0x0800a4f9
 800a4d4:	0800a501 	.word	0x0800a501
 800a4d8:	0800a517 	.word	0x0800a517
 800a4dc:	0800a507 	.word	0x0800a507
 800a4e0:	0800a517 	.word	0x0800a517
 800a4e4:	0800a517 	.word	0x0800a517
 800a4e8:	0800a517 	.word	0x0800a517
 800a4ec:	0800a50f 	.word	0x0800a50f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4f0:	f7ff fe54 	bl	800a19c <HAL_RCC_GetPCLK1Freq>
 800a4f4:	61b8      	str	r0, [r7, #24]
        break;
 800a4f6:	e013      	b.n	800a520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4f8:	f7ff fe72 	bl	800a1e0 <HAL_RCC_GetPCLK2Freq>
 800a4fc:	61b8      	str	r0, [r7, #24]
        break;
 800a4fe:	e00f      	b.n	800a520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a500:	4b4e      	ldr	r3, [pc, #312]	; (800a63c <UART_SetConfig+0x268>)
 800a502:	61bb      	str	r3, [r7, #24]
        break;
 800a504:	e00c      	b.n	800a520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a506:	f7ff fdd3 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 800a50a:	61b8      	str	r0, [r7, #24]
        break;
 800a50c:	e008      	b.n	800a520 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a50e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a512:	61bb      	str	r3, [r7, #24]
        break;
 800a514:	e004      	b.n	800a520 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800a516:	2300      	movs	r3, #0
 800a518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	77bb      	strb	r3, [r7, #30]
        break;
 800a51e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d074      	beq.n	800a610 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	005a      	lsls	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	085b      	lsrs	r3, r3, #1
 800a530:	441a      	add	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	fbb2 f3f3 	udiv	r3, r2, r3
 800a53a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2b0f      	cmp	r3, #15
 800a540:	d916      	bls.n	800a570 <UART_SetConfig+0x19c>
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a548:	d212      	bcs.n	800a570 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	f023 030f 	bic.w	r3, r3, #15
 800a552:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	085b      	lsrs	r3, r3, #1
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f003 0307 	and.w	r3, r3, #7
 800a55e:	b29a      	uxth	r2, r3
 800a560:	89fb      	ldrh	r3, [r7, #14]
 800a562:	4313      	orrs	r3, r2
 800a564:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	89fa      	ldrh	r2, [r7, #14]
 800a56c:	60da      	str	r2, [r3, #12]
 800a56e:	e04f      	b.n	800a610 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	77bb      	strb	r3, [r7, #30]
 800a574:	e04c      	b.n	800a610 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a576:	7ffb      	ldrb	r3, [r7, #31]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d828      	bhi.n	800a5ce <UART_SetConfig+0x1fa>
 800a57c:	a201      	add	r2, pc, #4	; (adr r2, 800a584 <UART_SetConfig+0x1b0>)
 800a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a582:	bf00      	nop
 800a584:	0800a5a9 	.word	0x0800a5a9
 800a588:	0800a5b1 	.word	0x0800a5b1
 800a58c:	0800a5b9 	.word	0x0800a5b9
 800a590:	0800a5cf 	.word	0x0800a5cf
 800a594:	0800a5bf 	.word	0x0800a5bf
 800a598:	0800a5cf 	.word	0x0800a5cf
 800a59c:	0800a5cf 	.word	0x0800a5cf
 800a5a0:	0800a5cf 	.word	0x0800a5cf
 800a5a4:	0800a5c7 	.word	0x0800a5c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5a8:	f7ff fdf8 	bl	800a19c <HAL_RCC_GetPCLK1Freq>
 800a5ac:	61b8      	str	r0, [r7, #24]
        break;
 800a5ae:	e013      	b.n	800a5d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5b0:	f7ff fe16 	bl	800a1e0 <HAL_RCC_GetPCLK2Freq>
 800a5b4:	61b8      	str	r0, [r7, #24]
        break;
 800a5b6:	e00f      	b.n	800a5d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5b8:	4b20      	ldr	r3, [pc, #128]	; (800a63c <UART_SetConfig+0x268>)
 800a5ba:	61bb      	str	r3, [r7, #24]
        break;
 800a5bc:	e00c      	b.n	800a5d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5be:	f7ff fd77 	bl	800a0b0 <HAL_RCC_GetSysClockFreq>
 800a5c2:	61b8      	str	r0, [r7, #24]
        break;
 800a5c4:	e008      	b.n	800a5d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5ca:	61bb      	str	r3, [r7, #24]
        break;
 800a5cc:	e004      	b.n	800a5d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	77bb      	strb	r3, [r7, #30]
        break;
 800a5d6:	bf00      	nop
    }

    if (pclk != 0U)
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d018      	beq.n	800a610 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	085a      	lsrs	r2, r3, #1
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2b0f      	cmp	r3, #15
 800a5f6:	d909      	bls.n	800a60c <UART_SetConfig+0x238>
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5fe:	d205      	bcs.n	800a60c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	b29a      	uxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	60da      	str	r2, [r3, #12]
 800a60a:	e001      	b.n	800a610 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a61c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	efff69f3 	.word	0xefff69f3
 800a62c:	40013800 	.word	0x40013800
 800a630:	40021000 	.word	0x40021000
 800a634:	40004400 	.word	0x40004400
 800a638:	40004800 	.word	0x40004800
 800a63c:	007a1200 	.word	0x007a1200

0800a640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00a      	beq.n	800a66a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00a      	beq.n	800a68c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00a      	beq.n	800a6ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00a      	beq.n	800a6d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	f003 0310 	and.w	r3, r3, #16
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00a      	beq.n	800a6f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	430a      	orrs	r2, r1
 800a6f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	f003 0320 	and.w	r3, r3, #32
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d00a      	beq.n	800a714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d01a      	beq.n	800a756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	430a      	orrs	r2, r1
 800a734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73e:	d10a      	bne.n	800a756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	430a      	orrs	r2, r1
 800a776:	605a      	str	r2, [r3, #4]
  }
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b098      	sub	sp, #96	; 0x60
 800a788:	af02      	add	r7, sp, #8
 800a78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a794:	f7fe f832 	bl	80087fc <HAL_GetTick>
 800a798:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0308 	and.w	r3, r3, #8
 800a7a4:	2b08      	cmp	r3, #8
 800a7a6:	d12e      	bne.n	800a806 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f88c 	bl	800a8d4 <UART_WaitOnFlagUntilTimeout>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d021      	beq.n	800a806 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	e853 3f00 	ldrex	r3, [r3]
 800a7ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a7e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7e8:	e841 2300 	strex	r3, r2, [r1]
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e6      	bne.n	800a7c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e062      	b.n	800a8cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b04      	cmp	r3, #4
 800a812:	d149      	bne.n	800a8a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a81c:	2200      	movs	r2, #0
 800a81e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f856 	bl	800a8d4 <UART_WaitOnFlagUntilTimeout>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d03c      	beq.n	800a8a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	623b      	str	r3, [r7, #32]
   return(result);
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a842:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a84c:	633b      	str	r3, [r7, #48]	; 0x30
 800a84e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e6      	bne.n	800a82e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3308      	adds	r3, #8
 800a866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	e853 3f00 	ldrex	r3, [r3]
 800a86e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f023 0301 	bic.w	r3, r3, #1
 800a876:	64bb      	str	r3, [r7, #72]	; 0x48
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3308      	adds	r3, #8
 800a87e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a880:	61fa      	str	r2, [r7, #28]
 800a882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a884:	69b9      	ldr	r1, [r7, #24]
 800a886:	69fa      	ldr	r2, [r7, #28]
 800a888:	e841 2300 	strex	r3, r2, [r1]
 800a88c:	617b      	str	r3, [r7, #20]
   return(result);
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e5      	bne.n	800a860 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2220      	movs	r2, #32
 800a898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e011      	b.n	800a8cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3758      	adds	r7, #88	; 0x58
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	603b      	str	r3, [r7, #0]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8e4:	e049      	b.n	800a97a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ec:	d045      	beq.n	800a97a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8ee:	f7fd ff85 	bl	80087fc <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	69ba      	ldr	r2, [r7, #24]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d302      	bcc.n	800a904 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e048      	b.n	800a99a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f003 0304 	and.w	r3, r3, #4
 800a912:	2b00      	cmp	r3, #0
 800a914:	d031      	beq.n	800a97a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	69db      	ldr	r3, [r3, #28]
 800a91c:	f003 0308 	and.w	r3, r3, #8
 800a920:	2b08      	cmp	r3, #8
 800a922:	d110      	bne.n	800a946 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2208      	movs	r2, #8
 800a92a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f000 f838 	bl	800a9a2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2208      	movs	r2, #8
 800a936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e029      	b.n	800a99a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a954:	d111      	bne.n	800a97a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a95e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 f81e 	bl	800a9a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2220      	movs	r2, #32
 800a96a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e00f      	b.n	800a99a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	69da      	ldr	r2, [r3, #28]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	4013      	ands	r3, r2
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	429a      	cmp	r2, r3
 800a988:	bf0c      	ite	eq
 800a98a:	2301      	moveq	r3, #1
 800a98c:	2300      	movne	r3, #0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	461a      	mov	r2, r3
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	429a      	cmp	r2, r3
 800a996:	d0a6      	beq.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b095      	sub	sp, #84	; 0x54
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9c8:	643b      	str	r3, [r7, #64]	; 0x40
 800a9ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9d0:	e841 2300 	strex	r3, r2, [r1]
 800a9d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e6      	bne.n	800a9aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	3308      	adds	r3, #8
 800a9e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	e853 3f00 	ldrex	r3, [r3]
 800a9ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	f023 0301 	bic.w	r3, r3, #1
 800a9f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa04:	e841 2300 	strex	r3, r2, [r1]
 800aa08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1e5      	bne.n	800a9dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d118      	bne.n	800aa4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f023 0310 	bic.w	r3, r3, #16
 800aa2c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa36:	61bb      	str	r3, [r7, #24]
 800aa38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3a:	6979      	ldr	r1, [r7, #20]
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	e841 2300 	strex	r3, r2, [r1]
 800aa42:	613b      	str	r3, [r7, #16]
   return(result);
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1e6      	bne.n	800aa18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2220      	movs	r2, #32
 800aa4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800aa5e:	bf00      	nop
 800aa60:	3754      	adds	r7, #84	; 0x54
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
	...

0800aa6c <std>:
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	b510      	push	{r4, lr}
 800aa70:	4604      	mov	r4, r0
 800aa72:	e9c0 3300 	strd	r3, r3, [r0]
 800aa76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa7a:	6083      	str	r3, [r0, #8]
 800aa7c:	8181      	strh	r1, [r0, #12]
 800aa7e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa80:	81c2      	strh	r2, [r0, #14]
 800aa82:	6183      	str	r3, [r0, #24]
 800aa84:	4619      	mov	r1, r3
 800aa86:	2208      	movs	r2, #8
 800aa88:	305c      	adds	r0, #92	; 0x5c
 800aa8a:	f000 f906 	bl	800ac9a <memset>
 800aa8e:	4b0d      	ldr	r3, [pc, #52]	; (800aac4 <std+0x58>)
 800aa90:	6263      	str	r3, [r4, #36]	; 0x24
 800aa92:	4b0d      	ldr	r3, [pc, #52]	; (800aac8 <std+0x5c>)
 800aa94:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa96:	4b0d      	ldr	r3, [pc, #52]	; (800aacc <std+0x60>)
 800aa98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa9a:	4b0d      	ldr	r3, [pc, #52]	; (800aad0 <std+0x64>)
 800aa9c:	6323      	str	r3, [r4, #48]	; 0x30
 800aa9e:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <std+0x68>)
 800aaa0:	6224      	str	r4, [r4, #32]
 800aaa2:	429c      	cmp	r4, r3
 800aaa4:	d006      	beq.n	800aab4 <std+0x48>
 800aaa6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aaaa:	4294      	cmp	r4, r2
 800aaac:	d002      	beq.n	800aab4 <std+0x48>
 800aaae:	33d0      	adds	r3, #208	; 0xd0
 800aab0:	429c      	cmp	r4, r3
 800aab2:	d105      	bne.n	800aac0 <std+0x54>
 800aab4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aabc:	f000 b966 	b.w	800ad8c <__retarget_lock_init_recursive>
 800aac0:	bd10      	pop	{r4, pc}
 800aac2:	bf00      	nop
 800aac4:	0800ac15 	.word	0x0800ac15
 800aac8:	0800ac37 	.word	0x0800ac37
 800aacc:	0800ac6f 	.word	0x0800ac6f
 800aad0:	0800ac93 	.word	0x0800ac93
 800aad4:	20000114 	.word	0x20000114

0800aad8 <stdio_exit_handler>:
 800aad8:	4a02      	ldr	r2, [pc, #8]	; (800aae4 <stdio_exit_handler+0xc>)
 800aada:	4903      	ldr	r1, [pc, #12]	; (800aae8 <stdio_exit_handler+0x10>)
 800aadc:	4803      	ldr	r0, [pc, #12]	; (800aaec <stdio_exit_handler+0x14>)
 800aade:	f000 b869 	b.w	800abb4 <_fwalk_sglue>
 800aae2:	bf00      	nop
 800aae4:	2000000c 	.word	0x2000000c
 800aae8:	0800b639 	.word	0x0800b639
 800aaec:	20000018 	.word	0x20000018

0800aaf0 <cleanup_stdio>:
 800aaf0:	6841      	ldr	r1, [r0, #4]
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <cleanup_stdio+0x34>)
 800aaf4:	4299      	cmp	r1, r3
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	4604      	mov	r4, r0
 800aafa:	d001      	beq.n	800ab00 <cleanup_stdio+0x10>
 800aafc:	f000 fd9c 	bl	800b638 <_fflush_r>
 800ab00:	68a1      	ldr	r1, [r4, #8]
 800ab02:	4b09      	ldr	r3, [pc, #36]	; (800ab28 <cleanup_stdio+0x38>)
 800ab04:	4299      	cmp	r1, r3
 800ab06:	d002      	beq.n	800ab0e <cleanup_stdio+0x1e>
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fd95 	bl	800b638 <_fflush_r>
 800ab0e:	68e1      	ldr	r1, [r4, #12]
 800ab10:	4b06      	ldr	r3, [pc, #24]	; (800ab2c <cleanup_stdio+0x3c>)
 800ab12:	4299      	cmp	r1, r3
 800ab14:	d004      	beq.n	800ab20 <cleanup_stdio+0x30>
 800ab16:	4620      	mov	r0, r4
 800ab18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab1c:	f000 bd8c 	b.w	800b638 <_fflush_r>
 800ab20:	bd10      	pop	{r4, pc}
 800ab22:	bf00      	nop
 800ab24:	20000114 	.word	0x20000114
 800ab28:	2000017c 	.word	0x2000017c
 800ab2c:	200001e4 	.word	0x200001e4

0800ab30 <global_stdio_init.part.0>:
 800ab30:	b510      	push	{r4, lr}
 800ab32:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <global_stdio_init.part.0+0x30>)
 800ab34:	4c0b      	ldr	r4, [pc, #44]	; (800ab64 <global_stdio_init.part.0+0x34>)
 800ab36:	4a0c      	ldr	r2, [pc, #48]	; (800ab68 <global_stdio_init.part.0+0x38>)
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2104      	movs	r1, #4
 800ab40:	f7ff ff94 	bl	800aa6c <std>
 800ab44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab48:	2201      	movs	r2, #1
 800ab4a:	2109      	movs	r1, #9
 800ab4c:	f7ff ff8e 	bl	800aa6c <std>
 800ab50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab54:	2202      	movs	r2, #2
 800ab56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5a:	2112      	movs	r1, #18
 800ab5c:	f7ff bf86 	b.w	800aa6c <std>
 800ab60:	2000024c 	.word	0x2000024c
 800ab64:	20000114 	.word	0x20000114
 800ab68:	0800aad9 	.word	0x0800aad9

0800ab6c <__sfp_lock_acquire>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <__sfp_lock_acquire+0x8>)
 800ab6e:	f000 b90e 	b.w	800ad8e <__retarget_lock_acquire_recursive>
 800ab72:	bf00      	nop
 800ab74:	20000255 	.word	0x20000255

0800ab78 <__sfp_lock_release>:
 800ab78:	4801      	ldr	r0, [pc, #4]	; (800ab80 <__sfp_lock_release+0x8>)
 800ab7a:	f000 b909 	b.w	800ad90 <__retarget_lock_release_recursive>
 800ab7e:	bf00      	nop
 800ab80:	20000255 	.word	0x20000255

0800ab84 <__sinit>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4604      	mov	r4, r0
 800ab88:	f7ff fff0 	bl	800ab6c <__sfp_lock_acquire>
 800ab8c:	6a23      	ldr	r3, [r4, #32]
 800ab8e:	b11b      	cbz	r3, 800ab98 <__sinit+0x14>
 800ab90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab94:	f7ff bff0 	b.w	800ab78 <__sfp_lock_release>
 800ab98:	4b04      	ldr	r3, [pc, #16]	; (800abac <__sinit+0x28>)
 800ab9a:	6223      	str	r3, [r4, #32]
 800ab9c:	4b04      	ldr	r3, [pc, #16]	; (800abb0 <__sinit+0x2c>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1f5      	bne.n	800ab90 <__sinit+0xc>
 800aba4:	f7ff ffc4 	bl	800ab30 <global_stdio_init.part.0>
 800aba8:	e7f2      	b.n	800ab90 <__sinit+0xc>
 800abaa:	bf00      	nop
 800abac:	0800aaf1 	.word	0x0800aaf1
 800abb0:	2000024c 	.word	0x2000024c

0800abb4 <_fwalk_sglue>:
 800abb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb8:	4607      	mov	r7, r0
 800abba:	4688      	mov	r8, r1
 800abbc:	4614      	mov	r4, r2
 800abbe:	2600      	movs	r6, #0
 800abc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abc4:	f1b9 0901 	subs.w	r9, r9, #1
 800abc8:	d505      	bpl.n	800abd6 <_fwalk_sglue+0x22>
 800abca:	6824      	ldr	r4, [r4, #0]
 800abcc:	2c00      	cmp	r4, #0
 800abce:	d1f7      	bne.n	800abc0 <_fwalk_sglue+0xc>
 800abd0:	4630      	mov	r0, r6
 800abd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d907      	bls.n	800abec <_fwalk_sglue+0x38>
 800abdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abe0:	3301      	adds	r3, #1
 800abe2:	d003      	beq.n	800abec <_fwalk_sglue+0x38>
 800abe4:	4629      	mov	r1, r5
 800abe6:	4638      	mov	r0, r7
 800abe8:	47c0      	blx	r8
 800abea:	4306      	orrs	r6, r0
 800abec:	3568      	adds	r5, #104	; 0x68
 800abee:	e7e9      	b.n	800abc4 <_fwalk_sglue+0x10>

0800abf0 <iprintf>:
 800abf0:	b40f      	push	{r0, r1, r2, r3}
 800abf2:	b507      	push	{r0, r1, r2, lr}
 800abf4:	4906      	ldr	r1, [pc, #24]	; (800ac10 <iprintf+0x20>)
 800abf6:	ab04      	add	r3, sp, #16
 800abf8:	6808      	ldr	r0, [r1, #0]
 800abfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800abfe:	6881      	ldr	r1, [r0, #8]
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	f000 f9e9 	bl	800afd8 <_vfiprintf_r>
 800ac06:	b003      	add	sp, #12
 800ac08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac0c:	b004      	add	sp, #16
 800ac0e:	4770      	bx	lr
 800ac10:	20000064 	.word	0x20000064

0800ac14 <__sread>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	460c      	mov	r4, r1
 800ac18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1c:	f000 f868 	bl	800acf0 <_read_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	bfab      	itete	ge
 800ac24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac26:	89a3      	ldrhlt	r3, [r4, #12]
 800ac28:	181b      	addge	r3, r3, r0
 800ac2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac2e:	bfac      	ite	ge
 800ac30:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac32:	81a3      	strhlt	r3, [r4, #12]
 800ac34:	bd10      	pop	{r4, pc}

0800ac36 <__swrite>:
 800ac36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3a:	461f      	mov	r7, r3
 800ac3c:	898b      	ldrh	r3, [r1, #12]
 800ac3e:	05db      	lsls	r3, r3, #23
 800ac40:	4605      	mov	r5, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	4616      	mov	r6, r2
 800ac46:	d505      	bpl.n	800ac54 <__swrite+0x1e>
 800ac48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f000 f83c 	bl	800accc <_lseek_r>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	4632      	mov	r2, r6
 800ac62:	463b      	mov	r3, r7
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6a:	f000 b853 	b.w	800ad14 <_write_r>

0800ac6e <__sseek>:
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	460c      	mov	r4, r1
 800ac72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac76:	f000 f829 	bl	800accc <_lseek_r>
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	bf15      	itete	ne
 800ac80:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac8a:	81a3      	strheq	r3, [r4, #12]
 800ac8c:	bf18      	it	ne
 800ac8e:	81a3      	strhne	r3, [r4, #12]
 800ac90:	bd10      	pop	{r4, pc}

0800ac92 <__sclose>:
 800ac92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac96:	f000 b809 	b.w	800acac <_close_r>

0800ac9a <memset>:
 800ac9a:	4402      	add	r2, r0
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d100      	bne.n	800aca4 <memset+0xa>
 800aca2:	4770      	bx	lr
 800aca4:	f803 1b01 	strb.w	r1, [r3], #1
 800aca8:	e7f9      	b.n	800ac9e <memset+0x4>
	...

0800acac <_close_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d06      	ldr	r5, [pc, #24]	; (800acc8 <_close_r+0x1c>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	f7fd fc9b 	bl	80085f2 <_close>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_close_r+0x1a>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_close_r+0x1a>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20000250 	.word	0x20000250

0800accc <_lseek_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	; (800acec <_lseek_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7fd fcb0 	bl	8008640 <_lseek>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_lseek_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_lseek_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000250 	.word	0x20000250

0800acf0 <_read_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	; (800ad10 <_read_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7fd fc3e 	bl	8008580 <_read>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_read_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_read_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	20000250 	.word	0x20000250

0800ad14 <_write_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d07      	ldr	r5, [pc, #28]	; (800ad34 <_write_r+0x20>)
 800ad18:	4604      	mov	r4, r0
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	602a      	str	r2, [r5, #0]
 800ad22:	461a      	mov	r2, r3
 800ad24:	f7fd fc49 	bl	80085ba <_write>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	d102      	bne.n	800ad32 <_write_r+0x1e>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	b103      	cbz	r3, 800ad32 <_write_r+0x1e>
 800ad30:	6023      	str	r3, [r4, #0]
 800ad32:	bd38      	pop	{r3, r4, r5, pc}
 800ad34:	20000250 	.word	0x20000250

0800ad38 <__errno>:
 800ad38:	4b01      	ldr	r3, [pc, #4]	; (800ad40 <__errno+0x8>)
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	20000064 	.word	0x20000064

0800ad44 <__libc_init_array>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4d0d      	ldr	r5, [pc, #52]	; (800ad7c <__libc_init_array+0x38>)
 800ad48:	4c0d      	ldr	r4, [pc, #52]	; (800ad80 <__libc_init_array+0x3c>)
 800ad4a:	1b64      	subs	r4, r4, r5
 800ad4c:	10a4      	asrs	r4, r4, #2
 800ad4e:	2600      	movs	r6, #0
 800ad50:	42a6      	cmp	r6, r4
 800ad52:	d109      	bne.n	800ad68 <__libc_init_array+0x24>
 800ad54:	4d0b      	ldr	r5, [pc, #44]	; (800ad84 <__libc_init_array+0x40>)
 800ad56:	4c0c      	ldr	r4, [pc, #48]	; (800ad88 <__libc_init_array+0x44>)
 800ad58:	f000 fdc0 	bl	800b8dc <_init>
 800ad5c:	1b64      	subs	r4, r4, r5
 800ad5e:	10a4      	asrs	r4, r4, #2
 800ad60:	2600      	movs	r6, #0
 800ad62:	42a6      	cmp	r6, r4
 800ad64:	d105      	bne.n	800ad72 <__libc_init_array+0x2e>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad6c:	4798      	blx	r3
 800ad6e:	3601      	adds	r6, #1
 800ad70:	e7ee      	b.n	800ad50 <__libc_init_array+0xc>
 800ad72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad76:	4798      	blx	r3
 800ad78:	3601      	adds	r6, #1
 800ad7a:	e7f2      	b.n	800ad62 <__libc_init_array+0x1e>
 800ad7c:	0800b994 	.word	0x0800b994
 800ad80:	0800b994 	.word	0x0800b994
 800ad84:	0800b994 	.word	0x0800b994
 800ad88:	0800b998 	.word	0x0800b998

0800ad8c <__retarget_lock_init_recursive>:
 800ad8c:	4770      	bx	lr

0800ad8e <__retarget_lock_acquire_recursive>:
 800ad8e:	4770      	bx	lr

0800ad90 <__retarget_lock_release_recursive>:
 800ad90:	4770      	bx	lr
	...

0800ad94 <_free_r>:
 800ad94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad96:	2900      	cmp	r1, #0
 800ad98:	d044      	beq.n	800ae24 <_free_r+0x90>
 800ad9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9e:	9001      	str	r0, [sp, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f1a1 0404 	sub.w	r4, r1, #4
 800ada6:	bfb8      	it	lt
 800ada8:	18e4      	addlt	r4, r4, r3
 800adaa:	f000 f8df 	bl	800af6c <__malloc_lock>
 800adae:	4a1e      	ldr	r2, [pc, #120]	; (800ae28 <_free_r+0x94>)
 800adb0:	9801      	ldr	r0, [sp, #4]
 800adb2:	6813      	ldr	r3, [r2, #0]
 800adb4:	b933      	cbnz	r3, 800adc4 <_free_r+0x30>
 800adb6:	6063      	str	r3, [r4, #4]
 800adb8:	6014      	str	r4, [r2, #0]
 800adba:	b003      	add	sp, #12
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	f000 b8da 	b.w	800af78 <__malloc_unlock>
 800adc4:	42a3      	cmp	r3, r4
 800adc6:	d908      	bls.n	800adda <_free_r+0x46>
 800adc8:	6825      	ldr	r5, [r4, #0]
 800adca:	1961      	adds	r1, r4, r5
 800adcc:	428b      	cmp	r3, r1
 800adce:	bf01      	itttt	eq
 800add0:	6819      	ldreq	r1, [r3, #0]
 800add2:	685b      	ldreq	r3, [r3, #4]
 800add4:	1949      	addeq	r1, r1, r5
 800add6:	6021      	streq	r1, [r4, #0]
 800add8:	e7ed      	b.n	800adb6 <_free_r+0x22>
 800adda:	461a      	mov	r2, r3
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	b10b      	cbz	r3, 800ade4 <_free_r+0x50>
 800ade0:	42a3      	cmp	r3, r4
 800ade2:	d9fa      	bls.n	800adda <_free_r+0x46>
 800ade4:	6811      	ldr	r1, [r2, #0]
 800ade6:	1855      	adds	r5, r2, r1
 800ade8:	42a5      	cmp	r5, r4
 800adea:	d10b      	bne.n	800ae04 <_free_r+0x70>
 800adec:	6824      	ldr	r4, [r4, #0]
 800adee:	4421      	add	r1, r4
 800adf0:	1854      	adds	r4, r2, r1
 800adf2:	42a3      	cmp	r3, r4
 800adf4:	6011      	str	r1, [r2, #0]
 800adf6:	d1e0      	bne.n	800adba <_free_r+0x26>
 800adf8:	681c      	ldr	r4, [r3, #0]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	6053      	str	r3, [r2, #4]
 800adfe:	440c      	add	r4, r1
 800ae00:	6014      	str	r4, [r2, #0]
 800ae02:	e7da      	b.n	800adba <_free_r+0x26>
 800ae04:	d902      	bls.n	800ae0c <_free_r+0x78>
 800ae06:	230c      	movs	r3, #12
 800ae08:	6003      	str	r3, [r0, #0]
 800ae0a:	e7d6      	b.n	800adba <_free_r+0x26>
 800ae0c:	6825      	ldr	r5, [r4, #0]
 800ae0e:	1961      	adds	r1, r4, r5
 800ae10:	428b      	cmp	r3, r1
 800ae12:	bf04      	itt	eq
 800ae14:	6819      	ldreq	r1, [r3, #0]
 800ae16:	685b      	ldreq	r3, [r3, #4]
 800ae18:	6063      	str	r3, [r4, #4]
 800ae1a:	bf04      	itt	eq
 800ae1c:	1949      	addeq	r1, r1, r5
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	6054      	str	r4, [r2, #4]
 800ae22:	e7ca      	b.n	800adba <_free_r+0x26>
 800ae24:	b003      	add	sp, #12
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	20000258 	.word	0x20000258

0800ae2c <sbrk_aligned>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	4e0e      	ldr	r6, [pc, #56]	; (800ae68 <sbrk_aligned+0x3c>)
 800ae30:	460c      	mov	r4, r1
 800ae32:	6831      	ldr	r1, [r6, #0]
 800ae34:	4605      	mov	r5, r0
 800ae36:	b911      	cbnz	r1, 800ae3e <sbrk_aligned+0x12>
 800ae38:	f000 fcbc 	bl	800b7b4 <_sbrk_r>
 800ae3c:	6030      	str	r0, [r6, #0]
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4628      	mov	r0, r5
 800ae42:	f000 fcb7 	bl	800b7b4 <_sbrk_r>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d00a      	beq.n	800ae60 <sbrk_aligned+0x34>
 800ae4a:	1cc4      	adds	r4, r0, #3
 800ae4c:	f024 0403 	bic.w	r4, r4, #3
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d007      	beq.n	800ae64 <sbrk_aligned+0x38>
 800ae54:	1a21      	subs	r1, r4, r0
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 fcac 	bl	800b7b4 <_sbrk_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d101      	bne.n	800ae64 <sbrk_aligned+0x38>
 800ae60:	f04f 34ff 	mov.w	r4, #4294967295
 800ae64:	4620      	mov	r0, r4
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	2000025c 	.word	0x2000025c

0800ae6c <_malloc_r>:
 800ae6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae70:	1ccd      	adds	r5, r1, #3
 800ae72:	f025 0503 	bic.w	r5, r5, #3
 800ae76:	3508      	adds	r5, #8
 800ae78:	2d0c      	cmp	r5, #12
 800ae7a:	bf38      	it	cc
 800ae7c:	250c      	movcc	r5, #12
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	4607      	mov	r7, r0
 800ae82:	db01      	blt.n	800ae88 <_malloc_r+0x1c>
 800ae84:	42a9      	cmp	r1, r5
 800ae86:	d905      	bls.n	800ae94 <_malloc_r+0x28>
 800ae88:	230c      	movs	r3, #12
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	4630      	mov	r0, r6
 800ae90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af68 <_malloc_r+0xfc>
 800ae98:	f000 f868 	bl	800af6c <__malloc_lock>
 800ae9c:	f8d8 3000 	ldr.w	r3, [r8]
 800aea0:	461c      	mov	r4, r3
 800aea2:	bb5c      	cbnz	r4, 800aefc <_malloc_r+0x90>
 800aea4:	4629      	mov	r1, r5
 800aea6:	4638      	mov	r0, r7
 800aea8:	f7ff ffc0 	bl	800ae2c <sbrk_aligned>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	4604      	mov	r4, r0
 800aeb0:	d155      	bne.n	800af5e <_malloc_r+0xf2>
 800aeb2:	f8d8 4000 	ldr.w	r4, [r8]
 800aeb6:	4626      	mov	r6, r4
 800aeb8:	2e00      	cmp	r6, #0
 800aeba:	d145      	bne.n	800af48 <_malloc_r+0xdc>
 800aebc:	2c00      	cmp	r4, #0
 800aebe:	d048      	beq.n	800af52 <_malloc_r+0xe6>
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	4631      	mov	r1, r6
 800aec4:	4638      	mov	r0, r7
 800aec6:	eb04 0903 	add.w	r9, r4, r3
 800aeca:	f000 fc73 	bl	800b7b4 <_sbrk_r>
 800aece:	4581      	cmp	r9, r0
 800aed0:	d13f      	bne.n	800af52 <_malloc_r+0xe6>
 800aed2:	6821      	ldr	r1, [r4, #0]
 800aed4:	1a6d      	subs	r5, r5, r1
 800aed6:	4629      	mov	r1, r5
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7ff ffa7 	bl	800ae2c <sbrk_aligned>
 800aede:	3001      	adds	r0, #1
 800aee0:	d037      	beq.n	800af52 <_malloc_r+0xe6>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	442b      	add	r3, r5
 800aee6:	6023      	str	r3, [r4, #0]
 800aee8:	f8d8 3000 	ldr.w	r3, [r8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d038      	beq.n	800af62 <_malloc_r+0xf6>
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	42a2      	cmp	r2, r4
 800aef4:	d12b      	bne.n	800af4e <_malloc_r+0xe2>
 800aef6:	2200      	movs	r2, #0
 800aef8:	605a      	str	r2, [r3, #4]
 800aefa:	e00f      	b.n	800af1c <_malloc_r+0xb0>
 800aefc:	6822      	ldr	r2, [r4, #0]
 800aefe:	1b52      	subs	r2, r2, r5
 800af00:	d41f      	bmi.n	800af42 <_malloc_r+0xd6>
 800af02:	2a0b      	cmp	r2, #11
 800af04:	d917      	bls.n	800af36 <_malloc_r+0xca>
 800af06:	1961      	adds	r1, r4, r5
 800af08:	42a3      	cmp	r3, r4
 800af0a:	6025      	str	r5, [r4, #0]
 800af0c:	bf18      	it	ne
 800af0e:	6059      	strne	r1, [r3, #4]
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	bf08      	it	eq
 800af14:	f8c8 1000 	streq.w	r1, [r8]
 800af18:	5162      	str	r2, [r4, r5]
 800af1a:	604b      	str	r3, [r1, #4]
 800af1c:	4638      	mov	r0, r7
 800af1e:	f104 060b 	add.w	r6, r4, #11
 800af22:	f000 f829 	bl	800af78 <__malloc_unlock>
 800af26:	f026 0607 	bic.w	r6, r6, #7
 800af2a:	1d23      	adds	r3, r4, #4
 800af2c:	1af2      	subs	r2, r6, r3
 800af2e:	d0ae      	beq.n	800ae8e <_malloc_r+0x22>
 800af30:	1b9b      	subs	r3, r3, r6
 800af32:	50a3      	str	r3, [r4, r2]
 800af34:	e7ab      	b.n	800ae8e <_malloc_r+0x22>
 800af36:	42a3      	cmp	r3, r4
 800af38:	6862      	ldr	r2, [r4, #4]
 800af3a:	d1dd      	bne.n	800aef8 <_malloc_r+0x8c>
 800af3c:	f8c8 2000 	str.w	r2, [r8]
 800af40:	e7ec      	b.n	800af1c <_malloc_r+0xb0>
 800af42:	4623      	mov	r3, r4
 800af44:	6864      	ldr	r4, [r4, #4]
 800af46:	e7ac      	b.n	800aea2 <_malloc_r+0x36>
 800af48:	4634      	mov	r4, r6
 800af4a:	6876      	ldr	r6, [r6, #4]
 800af4c:	e7b4      	b.n	800aeb8 <_malloc_r+0x4c>
 800af4e:	4613      	mov	r3, r2
 800af50:	e7cc      	b.n	800aeec <_malloc_r+0x80>
 800af52:	230c      	movs	r3, #12
 800af54:	603b      	str	r3, [r7, #0]
 800af56:	4638      	mov	r0, r7
 800af58:	f000 f80e 	bl	800af78 <__malloc_unlock>
 800af5c:	e797      	b.n	800ae8e <_malloc_r+0x22>
 800af5e:	6025      	str	r5, [r4, #0]
 800af60:	e7dc      	b.n	800af1c <_malloc_r+0xb0>
 800af62:	605b      	str	r3, [r3, #4]
 800af64:	deff      	udf	#255	; 0xff
 800af66:	bf00      	nop
 800af68:	20000258 	.word	0x20000258

0800af6c <__malloc_lock>:
 800af6c:	4801      	ldr	r0, [pc, #4]	; (800af74 <__malloc_lock+0x8>)
 800af6e:	f7ff bf0e 	b.w	800ad8e <__retarget_lock_acquire_recursive>
 800af72:	bf00      	nop
 800af74:	20000254 	.word	0x20000254

0800af78 <__malloc_unlock>:
 800af78:	4801      	ldr	r0, [pc, #4]	; (800af80 <__malloc_unlock+0x8>)
 800af7a:	f7ff bf09 	b.w	800ad90 <__retarget_lock_release_recursive>
 800af7e:	bf00      	nop
 800af80:	20000254 	.word	0x20000254

0800af84 <__sfputc_r>:
 800af84:	6893      	ldr	r3, [r2, #8]
 800af86:	3b01      	subs	r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	b410      	push	{r4}
 800af8c:	6093      	str	r3, [r2, #8]
 800af8e:	da08      	bge.n	800afa2 <__sfputc_r+0x1e>
 800af90:	6994      	ldr	r4, [r2, #24]
 800af92:	42a3      	cmp	r3, r4
 800af94:	db01      	blt.n	800af9a <__sfputc_r+0x16>
 800af96:	290a      	cmp	r1, #10
 800af98:	d103      	bne.n	800afa2 <__sfputc_r+0x1e>
 800af9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af9e:	f000 bb73 	b.w	800b688 <__swbuf_r>
 800afa2:	6813      	ldr	r3, [r2, #0]
 800afa4:	1c58      	adds	r0, r3, #1
 800afa6:	6010      	str	r0, [r2, #0]
 800afa8:	7019      	strb	r1, [r3, #0]
 800afaa:	4608      	mov	r0, r1
 800afac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <__sfputs_r>:
 800afb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb4:	4606      	mov	r6, r0
 800afb6:	460f      	mov	r7, r1
 800afb8:	4614      	mov	r4, r2
 800afba:	18d5      	adds	r5, r2, r3
 800afbc:	42ac      	cmp	r4, r5
 800afbe:	d101      	bne.n	800afc4 <__sfputs_r+0x12>
 800afc0:	2000      	movs	r0, #0
 800afc2:	e007      	b.n	800afd4 <__sfputs_r+0x22>
 800afc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc8:	463a      	mov	r2, r7
 800afca:	4630      	mov	r0, r6
 800afcc:	f7ff ffda 	bl	800af84 <__sfputc_r>
 800afd0:	1c43      	adds	r3, r0, #1
 800afd2:	d1f3      	bne.n	800afbc <__sfputs_r+0xa>
 800afd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afd8 <_vfiprintf_r>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	460d      	mov	r5, r1
 800afde:	b09d      	sub	sp, #116	; 0x74
 800afe0:	4614      	mov	r4, r2
 800afe2:	4698      	mov	r8, r3
 800afe4:	4606      	mov	r6, r0
 800afe6:	b118      	cbz	r0, 800aff0 <_vfiprintf_r+0x18>
 800afe8:	6a03      	ldr	r3, [r0, #32]
 800afea:	b90b      	cbnz	r3, 800aff0 <_vfiprintf_r+0x18>
 800afec:	f7ff fdca 	bl	800ab84 <__sinit>
 800aff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aff2:	07d9      	lsls	r1, r3, #31
 800aff4:	d405      	bmi.n	800b002 <_vfiprintf_r+0x2a>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	059a      	lsls	r2, r3, #22
 800affa:	d402      	bmi.n	800b002 <_vfiprintf_r+0x2a>
 800affc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800affe:	f7ff fec6 	bl	800ad8e <__retarget_lock_acquire_recursive>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	071b      	lsls	r3, r3, #28
 800b006:	d501      	bpl.n	800b00c <_vfiprintf_r+0x34>
 800b008:	692b      	ldr	r3, [r5, #16]
 800b00a:	b99b      	cbnz	r3, 800b034 <_vfiprintf_r+0x5c>
 800b00c:	4629      	mov	r1, r5
 800b00e:	4630      	mov	r0, r6
 800b010:	f000 fb78 	bl	800b704 <__swsetup_r>
 800b014:	b170      	cbz	r0, 800b034 <_vfiprintf_r+0x5c>
 800b016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b018:	07dc      	lsls	r4, r3, #31
 800b01a:	d504      	bpl.n	800b026 <_vfiprintf_r+0x4e>
 800b01c:	f04f 30ff 	mov.w	r0, #4294967295
 800b020:	b01d      	add	sp, #116	; 0x74
 800b022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b026:	89ab      	ldrh	r3, [r5, #12]
 800b028:	0598      	lsls	r0, r3, #22
 800b02a:	d4f7      	bmi.n	800b01c <_vfiprintf_r+0x44>
 800b02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b02e:	f7ff feaf 	bl	800ad90 <__retarget_lock_release_recursive>
 800b032:	e7f3      	b.n	800b01c <_vfiprintf_r+0x44>
 800b034:	2300      	movs	r3, #0
 800b036:	9309      	str	r3, [sp, #36]	; 0x24
 800b038:	2320      	movs	r3, #32
 800b03a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b03e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b042:	2330      	movs	r3, #48	; 0x30
 800b044:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b1f8 <_vfiprintf_r+0x220>
 800b048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b04c:	f04f 0901 	mov.w	r9, #1
 800b050:	4623      	mov	r3, r4
 800b052:	469a      	mov	sl, r3
 800b054:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b058:	b10a      	cbz	r2, 800b05e <_vfiprintf_r+0x86>
 800b05a:	2a25      	cmp	r2, #37	; 0x25
 800b05c:	d1f9      	bne.n	800b052 <_vfiprintf_r+0x7a>
 800b05e:	ebba 0b04 	subs.w	fp, sl, r4
 800b062:	d00b      	beq.n	800b07c <_vfiprintf_r+0xa4>
 800b064:	465b      	mov	r3, fp
 800b066:	4622      	mov	r2, r4
 800b068:	4629      	mov	r1, r5
 800b06a:	4630      	mov	r0, r6
 800b06c:	f7ff ffa1 	bl	800afb2 <__sfputs_r>
 800b070:	3001      	adds	r0, #1
 800b072:	f000 80a9 	beq.w	800b1c8 <_vfiprintf_r+0x1f0>
 800b076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b078:	445a      	add	r2, fp
 800b07a:	9209      	str	r2, [sp, #36]	; 0x24
 800b07c:	f89a 3000 	ldrb.w	r3, [sl]
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 80a1 	beq.w	800b1c8 <_vfiprintf_r+0x1f0>
 800b086:	2300      	movs	r3, #0
 800b088:	f04f 32ff 	mov.w	r2, #4294967295
 800b08c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b090:	f10a 0a01 	add.w	sl, sl, #1
 800b094:	9304      	str	r3, [sp, #16]
 800b096:	9307      	str	r3, [sp, #28]
 800b098:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b09c:	931a      	str	r3, [sp, #104]	; 0x68
 800b09e:	4654      	mov	r4, sl
 800b0a0:	2205      	movs	r2, #5
 800b0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a6:	4854      	ldr	r0, [pc, #336]	; (800b1f8 <_vfiprintf_r+0x220>)
 800b0a8:	f7fd f892 	bl	80081d0 <memchr>
 800b0ac:	9a04      	ldr	r2, [sp, #16]
 800b0ae:	b9d8      	cbnz	r0, 800b0e8 <_vfiprintf_r+0x110>
 800b0b0:	06d1      	lsls	r1, r2, #27
 800b0b2:	bf44      	itt	mi
 800b0b4:	2320      	movmi	r3, #32
 800b0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ba:	0713      	lsls	r3, r2, #28
 800b0bc:	bf44      	itt	mi
 800b0be:	232b      	movmi	r3, #43	; 0x2b
 800b0c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ca:	d015      	beq.n	800b0f8 <_vfiprintf_r+0x120>
 800b0cc:	9a07      	ldr	r2, [sp, #28]
 800b0ce:	4654      	mov	r4, sl
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f04f 0c0a 	mov.w	ip, #10
 800b0d6:	4621      	mov	r1, r4
 800b0d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0dc:	3b30      	subs	r3, #48	; 0x30
 800b0de:	2b09      	cmp	r3, #9
 800b0e0:	d94d      	bls.n	800b17e <_vfiprintf_r+0x1a6>
 800b0e2:	b1b0      	cbz	r0, 800b112 <_vfiprintf_r+0x13a>
 800b0e4:	9207      	str	r2, [sp, #28]
 800b0e6:	e014      	b.n	800b112 <_vfiprintf_r+0x13a>
 800b0e8:	eba0 0308 	sub.w	r3, r0, r8
 800b0ec:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	9304      	str	r3, [sp, #16]
 800b0f4:	46a2      	mov	sl, r4
 800b0f6:	e7d2      	b.n	800b09e <_vfiprintf_r+0xc6>
 800b0f8:	9b03      	ldr	r3, [sp, #12]
 800b0fa:	1d19      	adds	r1, r3, #4
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	9103      	str	r1, [sp, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfbb      	ittet	lt
 800b104:	425b      	neglt	r3, r3
 800b106:	f042 0202 	orrlt.w	r2, r2, #2
 800b10a:	9307      	strge	r3, [sp, #28]
 800b10c:	9307      	strlt	r3, [sp, #28]
 800b10e:	bfb8      	it	lt
 800b110:	9204      	strlt	r2, [sp, #16]
 800b112:	7823      	ldrb	r3, [r4, #0]
 800b114:	2b2e      	cmp	r3, #46	; 0x2e
 800b116:	d10c      	bne.n	800b132 <_vfiprintf_r+0x15a>
 800b118:	7863      	ldrb	r3, [r4, #1]
 800b11a:	2b2a      	cmp	r3, #42	; 0x2a
 800b11c:	d134      	bne.n	800b188 <_vfiprintf_r+0x1b0>
 800b11e:	9b03      	ldr	r3, [sp, #12]
 800b120:	1d1a      	adds	r2, r3, #4
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	9203      	str	r2, [sp, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	bfb8      	it	lt
 800b12a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b12e:	3402      	adds	r4, #2
 800b130:	9305      	str	r3, [sp, #20]
 800b132:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b208 <_vfiprintf_r+0x230>
 800b136:	7821      	ldrb	r1, [r4, #0]
 800b138:	2203      	movs	r2, #3
 800b13a:	4650      	mov	r0, sl
 800b13c:	f7fd f848 	bl	80081d0 <memchr>
 800b140:	b138      	cbz	r0, 800b152 <_vfiprintf_r+0x17a>
 800b142:	9b04      	ldr	r3, [sp, #16]
 800b144:	eba0 000a 	sub.w	r0, r0, sl
 800b148:	2240      	movs	r2, #64	; 0x40
 800b14a:	4082      	lsls	r2, r0
 800b14c:	4313      	orrs	r3, r2
 800b14e:	3401      	adds	r4, #1
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b156:	4829      	ldr	r0, [pc, #164]	; (800b1fc <_vfiprintf_r+0x224>)
 800b158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b15c:	2206      	movs	r2, #6
 800b15e:	f7fd f837 	bl	80081d0 <memchr>
 800b162:	2800      	cmp	r0, #0
 800b164:	d03f      	beq.n	800b1e6 <_vfiprintf_r+0x20e>
 800b166:	4b26      	ldr	r3, [pc, #152]	; (800b200 <_vfiprintf_r+0x228>)
 800b168:	bb1b      	cbnz	r3, 800b1b2 <_vfiprintf_r+0x1da>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	3307      	adds	r3, #7
 800b16e:	f023 0307 	bic.w	r3, r3, #7
 800b172:	3308      	adds	r3, #8
 800b174:	9303      	str	r3, [sp, #12]
 800b176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b178:	443b      	add	r3, r7
 800b17a:	9309      	str	r3, [sp, #36]	; 0x24
 800b17c:	e768      	b.n	800b050 <_vfiprintf_r+0x78>
 800b17e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b182:	460c      	mov	r4, r1
 800b184:	2001      	movs	r0, #1
 800b186:	e7a6      	b.n	800b0d6 <_vfiprintf_r+0xfe>
 800b188:	2300      	movs	r3, #0
 800b18a:	3401      	adds	r4, #1
 800b18c:	9305      	str	r3, [sp, #20]
 800b18e:	4619      	mov	r1, r3
 800b190:	f04f 0c0a 	mov.w	ip, #10
 800b194:	4620      	mov	r0, r4
 800b196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b19a:	3a30      	subs	r2, #48	; 0x30
 800b19c:	2a09      	cmp	r2, #9
 800b19e:	d903      	bls.n	800b1a8 <_vfiprintf_r+0x1d0>
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0c6      	beq.n	800b132 <_vfiprintf_r+0x15a>
 800b1a4:	9105      	str	r1, [sp, #20]
 800b1a6:	e7c4      	b.n	800b132 <_vfiprintf_r+0x15a>
 800b1a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e7f0      	b.n	800b194 <_vfiprintf_r+0x1bc>
 800b1b2:	ab03      	add	r3, sp, #12
 800b1b4:	9300      	str	r3, [sp, #0]
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4b12      	ldr	r3, [pc, #72]	; (800b204 <_vfiprintf_r+0x22c>)
 800b1ba:	a904      	add	r1, sp, #16
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f3af 8000 	nop.w
 800b1c2:	4607      	mov	r7, r0
 800b1c4:	1c78      	adds	r0, r7, #1
 800b1c6:	d1d6      	bne.n	800b176 <_vfiprintf_r+0x19e>
 800b1c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ca:	07d9      	lsls	r1, r3, #31
 800b1cc:	d405      	bmi.n	800b1da <_vfiprintf_r+0x202>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	059a      	lsls	r2, r3, #22
 800b1d2:	d402      	bmi.n	800b1da <_vfiprintf_r+0x202>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d6:	f7ff fddb 	bl	800ad90 <__retarget_lock_release_recursive>
 800b1da:	89ab      	ldrh	r3, [r5, #12]
 800b1dc:	065b      	lsls	r3, r3, #25
 800b1de:	f53f af1d 	bmi.w	800b01c <_vfiprintf_r+0x44>
 800b1e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1e4:	e71c      	b.n	800b020 <_vfiprintf_r+0x48>
 800b1e6:	ab03      	add	r3, sp, #12
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	462a      	mov	r2, r5
 800b1ec:	4b05      	ldr	r3, [pc, #20]	; (800b204 <_vfiprintf_r+0x22c>)
 800b1ee:	a904      	add	r1, sp, #16
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	f000 f879 	bl	800b2e8 <_printf_i>
 800b1f6:	e7e4      	b.n	800b1c2 <_vfiprintf_r+0x1ea>
 800b1f8:	0800b960 	.word	0x0800b960
 800b1fc:	0800b96a 	.word	0x0800b96a
 800b200:	00000000 	.word	0x00000000
 800b204:	0800afb3 	.word	0x0800afb3
 800b208:	0800b966 	.word	0x0800b966

0800b20c <_printf_common>:
 800b20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b210:	4616      	mov	r6, r2
 800b212:	4699      	mov	r9, r3
 800b214:	688a      	ldr	r2, [r1, #8]
 800b216:	690b      	ldr	r3, [r1, #16]
 800b218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b21c:	4293      	cmp	r3, r2
 800b21e:	bfb8      	it	lt
 800b220:	4613      	movlt	r3, r2
 800b222:	6033      	str	r3, [r6, #0]
 800b224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b228:	4607      	mov	r7, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	b10a      	cbz	r2, 800b232 <_printf_common+0x26>
 800b22e:	3301      	adds	r3, #1
 800b230:	6033      	str	r3, [r6, #0]
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	0699      	lsls	r1, r3, #26
 800b236:	bf42      	ittt	mi
 800b238:	6833      	ldrmi	r3, [r6, #0]
 800b23a:	3302      	addmi	r3, #2
 800b23c:	6033      	strmi	r3, [r6, #0]
 800b23e:	6825      	ldr	r5, [r4, #0]
 800b240:	f015 0506 	ands.w	r5, r5, #6
 800b244:	d106      	bne.n	800b254 <_printf_common+0x48>
 800b246:	f104 0a19 	add.w	sl, r4, #25
 800b24a:	68e3      	ldr	r3, [r4, #12]
 800b24c:	6832      	ldr	r2, [r6, #0]
 800b24e:	1a9b      	subs	r3, r3, r2
 800b250:	42ab      	cmp	r3, r5
 800b252:	dc26      	bgt.n	800b2a2 <_printf_common+0x96>
 800b254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b258:	1e13      	subs	r3, r2, #0
 800b25a:	6822      	ldr	r2, [r4, #0]
 800b25c:	bf18      	it	ne
 800b25e:	2301      	movne	r3, #1
 800b260:	0692      	lsls	r2, r2, #26
 800b262:	d42b      	bmi.n	800b2bc <_printf_common+0xb0>
 800b264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b268:	4649      	mov	r1, r9
 800b26a:	4638      	mov	r0, r7
 800b26c:	47c0      	blx	r8
 800b26e:	3001      	adds	r0, #1
 800b270:	d01e      	beq.n	800b2b0 <_printf_common+0xa4>
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	6922      	ldr	r2, [r4, #16]
 800b276:	f003 0306 	and.w	r3, r3, #6
 800b27a:	2b04      	cmp	r3, #4
 800b27c:	bf02      	ittt	eq
 800b27e:	68e5      	ldreq	r5, [r4, #12]
 800b280:	6833      	ldreq	r3, [r6, #0]
 800b282:	1aed      	subeq	r5, r5, r3
 800b284:	68a3      	ldr	r3, [r4, #8]
 800b286:	bf0c      	ite	eq
 800b288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b28c:	2500      	movne	r5, #0
 800b28e:	4293      	cmp	r3, r2
 800b290:	bfc4      	itt	gt
 800b292:	1a9b      	subgt	r3, r3, r2
 800b294:	18ed      	addgt	r5, r5, r3
 800b296:	2600      	movs	r6, #0
 800b298:	341a      	adds	r4, #26
 800b29a:	42b5      	cmp	r5, r6
 800b29c:	d11a      	bne.n	800b2d4 <_printf_common+0xc8>
 800b29e:	2000      	movs	r0, #0
 800b2a0:	e008      	b.n	800b2b4 <_printf_common+0xa8>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	4638      	mov	r0, r7
 800b2aa:	47c0      	blx	r8
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	d103      	bne.n	800b2b8 <_printf_common+0xac>
 800b2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b8:	3501      	adds	r5, #1
 800b2ba:	e7c6      	b.n	800b24a <_printf_common+0x3e>
 800b2bc:	18e1      	adds	r1, r4, r3
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	2030      	movs	r0, #48	; 0x30
 800b2c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2c6:	4422      	add	r2, r4
 800b2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2d0:	3302      	adds	r3, #2
 800b2d2:	e7c7      	b.n	800b264 <_printf_common+0x58>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4622      	mov	r2, r4
 800b2d8:	4649      	mov	r1, r9
 800b2da:	4638      	mov	r0, r7
 800b2dc:	47c0      	blx	r8
 800b2de:	3001      	adds	r0, #1
 800b2e0:	d0e6      	beq.n	800b2b0 <_printf_common+0xa4>
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	e7d9      	b.n	800b29a <_printf_common+0x8e>
	...

0800b2e8 <_printf_i>:
 800b2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ec:	7e0f      	ldrb	r7, [r1, #24]
 800b2ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2f0:	2f78      	cmp	r7, #120	; 0x78
 800b2f2:	4691      	mov	r9, r2
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	469a      	mov	sl, r3
 800b2fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2fe:	d807      	bhi.n	800b310 <_printf_i+0x28>
 800b300:	2f62      	cmp	r7, #98	; 0x62
 800b302:	d80a      	bhi.n	800b31a <_printf_i+0x32>
 800b304:	2f00      	cmp	r7, #0
 800b306:	f000 80d4 	beq.w	800b4b2 <_printf_i+0x1ca>
 800b30a:	2f58      	cmp	r7, #88	; 0x58
 800b30c:	f000 80c0 	beq.w	800b490 <_printf_i+0x1a8>
 800b310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b318:	e03a      	b.n	800b390 <_printf_i+0xa8>
 800b31a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b31e:	2b15      	cmp	r3, #21
 800b320:	d8f6      	bhi.n	800b310 <_printf_i+0x28>
 800b322:	a101      	add	r1, pc, #4	; (adr r1, 800b328 <_printf_i+0x40>)
 800b324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b328:	0800b381 	.word	0x0800b381
 800b32c:	0800b395 	.word	0x0800b395
 800b330:	0800b311 	.word	0x0800b311
 800b334:	0800b311 	.word	0x0800b311
 800b338:	0800b311 	.word	0x0800b311
 800b33c:	0800b311 	.word	0x0800b311
 800b340:	0800b395 	.word	0x0800b395
 800b344:	0800b311 	.word	0x0800b311
 800b348:	0800b311 	.word	0x0800b311
 800b34c:	0800b311 	.word	0x0800b311
 800b350:	0800b311 	.word	0x0800b311
 800b354:	0800b499 	.word	0x0800b499
 800b358:	0800b3c1 	.word	0x0800b3c1
 800b35c:	0800b453 	.word	0x0800b453
 800b360:	0800b311 	.word	0x0800b311
 800b364:	0800b311 	.word	0x0800b311
 800b368:	0800b4bb 	.word	0x0800b4bb
 800b36c:	0800b311 	.word	0x0800b311
 800b370:	0800b3c1 	.word	0x0800b3c1
 800b374:	0800b311 	.word	0x0800b311
 800b378:	0800b311 	.word	0x0800b311
 800b37c:	0800b45b 	.word	0x0800b45b
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	1d1a      	adds	r2, r3, #4
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	602a      	str	r2, [r5, #0]
 800b388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b390:	2301      	movs	r3, #1
 800b392:	e09f      	b.n	800b4d4 <_printf_i+0x1ec>
 800b394:	6820      	ldr	r0, [r4, #0]
 800b396:	682b      	ldr	r3, [r5, #0]
 800b398:	0607      	lsls	r7, r0, #24
 800b39a:	f103 0104 	add.w	r1, r3, #4
 800b39e:	6029      	str	r1, [r5, #0]
 800b3a0:	d501      	bpl.n	800b3a6 <_printf_i+0xbe>
 800b3a2:	681e      	ldr	r6, [r3, #0]
 800b3a4:	e003      	b.n	800b3ae <_printf_i+0xc6>
 800b3a6:	0646      	lsls	r6, r0, #25
 800b3a8:	d5fb      	bpl.n	800b3a2 <_printf_i+0xba>
 800b3aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b3ae:	2e00      	cmp	r6, #0
 800b3b0:	da03      	bge.n	800b3ba <_printf_i+0xd2>
 800b3b2:	232d      	movs	r3, #45	; 0x2d
 800b3b4:	4276      	negs	r6, r6
 800b3b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3ba:	485a      	ldr	r0, [pc, #360]	; (800b524 <_printf_i+0x23c>)
 800b3bc:	230a      	movs	r3, #10
 800b3be:	e012      	b.n	800b3e6 <_printf_i+0xfe>
 800b3c0:	682b      	ldr	r3, [r5, #0]
 800b3c2:	6820      	ldr	r0, [r4, #0]
 800b3c4:	1d19      	adds	r1, r3, #4
 800b3c6:	6029      	str	r1, [r5, #0]
 800b3c8:	0605      	lsls	r5, r0, #24
 800b3ca:	d501      	bpl.n	800b3d0 <_printf_i+0xe8>
 800b3cc:	681e      	ldr	r6, [r3, #0]
 800b3ce:	e002      	b.n	800b3d6 <_printf_i+0xee>
 800b3d0:	0641      	lsls	r1, r0, #25
 800b3d2:	d5fb      	bpl.n	800b3cc <_printf_i+0xe4>
 800b3d4:	881e      	ldrh	r6, [r3, #0]
 800b3d6:	4853      	ldr	r0, [pc, #332]	; (800b524 <_printf_i+0x23c>)
 800b3d8:	2f6f      	cmp	r7, #111	; 0x6f
 800b3da:	bf0c      	ite	eq
 800b3dc:	2308      	moveq	r3, #8
 800b3de:	230a      	movne	r3, #10
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3e6:	6865      	ldr	r5, [r4, #4]
 800b3e8:	60a5      	str	r5, [r4, #8]
 800b3ea:	2d00      	cmp	r5, #0
 800b3ec:	bfa2      	ittt	ge
 800b3ee:	6821      	ldrge	r1, [r4, #0]
 800b3f0:	f021 0104 	bicge.w	r1, r1, #4
 800b3f4:	6021      	strge	r1, [r4, #0]
 800b3f6:	b90e      	cbnz	r6, 800b3fc <_printf_i+0x114>
 800b3f8:	2d00      	cmp	r5, #0
 800b3fa:	d04b      	beq.n	800b494 <_printf_i+0x1ac>
 800b3fc:	4615      	mov	r5, r2
 800b3fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800b402:	fb03 6711 	mls	r7, r3, r1, r6
 800b406:	5dc7      	ldrb	r7, [r0, r7]
 800b408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b40c:	4637      	mov	r7, r6
 800b40e:	42bb      	cmp	r3, r7
 800b410:	460e      	mov	r6, r1
 800b412:	d9f4      	bls.n	800b3fe <_printf_i+0x116>
 800b414:	2b08      	cmp	r3, #8
 800b416:	d10b      	bne.n	800b430 <_printf_i+0x148>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	07de      	lsls	r6, r3, #31
 800b41c:	d508      	bpl.n	800b430 <_printf_i+0x148>
 800b41e:	6923      	ldr	r3, [r4, #16]
 800b420:	6861      	ldr	r1, [r4, #4]
 800b422:	4299      	cmp	r1, r3
 800b424:	bfde      	ittt	le
 800b426:	2330      	movle	r3, #48	; 0x30
 800b428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b42c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b430:	1b52      	subs	r2, r2, r5
 800b432:	6122      	str	r2, [r4, #16]
 800b434:	f8cd a000 	str.w	sl, [sp]
 800b438:	464b      	mov	r3, r9
 800b43a:	aa03      	add	r2, sp, #12
 800b43c:	4621      	mov	r1, r4
 800b43e:	4640      	mov	r0, r8
 800b440:	f7ff fee4 	bl	800b20c <_printf_common>
 800b444:	3001      	adds	r0, #1
 800b446:	d14a      	bne.n	800b4de <_printf_i+0x1f6>
 800b448:	f04f 30ff 	mov.w	r0, #4294967295
 800b44c:	b004      	add	sp, #16
 800b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	f043 0320 	orr.w	r3, r3, #32
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	4833      	ldr	r0, [pc, #204]	; (800b528 <_printf_i+0x240>)
 800b45c:	2778      	movs	r7, #120	; 0x78
 800b45e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	6829      	ldr	r1, [r5, #0]
 800b466:	061f      	lsls	r7, r3, #24
 800b468:	f851 6b04 	ldr.w	r6, [r1], #4
 800b46c:	d402      	bmi.n	800b474 <_printf_i+0x18c>
 800b46e:	065f      	lsls	r7, r3, #25
 800b470:	bf48      	it	mi
 800b472:	b2b6      	uxthmi	r6, r6
 800b474:	07df      	lsls	r7, r3, #31
 800b476:	bf48      	it	mi
 800b478:	f043 0320 	orrmi.w	r3, r3, #32
 800b47c:	6029      	str	r1, [r5, #0]
 800b47e:	bf48      	it	mi
 800b480:	6023      	strmi	r3, [r4, #0]
 800b482:	b91e      	cbnz	r6, 800b48c <_printf_i+0x1a4>
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	f023 0320 	bic.w	r3, r3, #32
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	2310      	movs	r3, #16
 800b48e:	e7a7      	b.n	800b3e0 <_printf_i+0xf8>
 800b490:	4824      	ldr	r0, [pc, #144]	; (800b524 <_printf_i+0x23c>)
 800b492:	e7e4      	b.n	800b45e <_printf_i+0x176>
 800b494:	4615      	mov	r5, r2
 800b496:	e7bd      	b.n	800b414 <_printf_i+0x12c>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	6826      	ldr	r6, [r4, #0]
 800b49c:	6961      	ldr	r1, [r4, #20]
 800b49e:	1d18      	adds	r0, r3, #4
 800b4a0:	6028      	str	r0, [r5, #0]
 800b4a2:	0635      	lsls	r5, r6, #24
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	d501      	bpl.n	800b4ac <_printf_i+0x1c4>
 800b4a8:	6019      	str	r1, [r3, #0]
 800b4aa:	e002      	b.n	800b4b2 <_printf_i+0x1ca>
 800b4ac:	0670      	lsls	r0, r6, #25
 800b4ae:	d5fb      	bpl.n	800b4a8 <_printf_i+0x1c0>
 800b4b0:	8019      	strh	r1, [r3, #0]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	4615      	mov	r5, r2
 800b4b8:	e7bc      	b.n	800b434 <_printf_i+0x14c>
 800b4ba:	682b      	ldr	r3, [r5, #0]
 800b4bc:	1d1a      	adds	r2, r3, #4
 800b4be:	602a      	str	r2, [r5, #0]
 800b4c0:	681d      	ldr	r5, [r3, #0]
 800b4c2:	6862      	ldr	r2, [r4, #4]
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	f7fc fe82 	bl	80081d0 <memchr>
 800b4cc:	b108      	cbz	r0, 800b4d2 <_printf_i+0x1ea>
 800b4ce:	1b40      	subs	r0, r0, r5
 800b4d0:	6060      	str	r0, [r4, #4]
 800b4d2:	6863      	ldr	r3, [r4, #4]
 800b4d4:	6123      	str	r3, [r4, #16]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4dc:	e7aa      	b.n	800b434 <_printf_i+0x14c>
 800b4de:	6923      	ldr	r3, [r4, #16]
 800b4e0:	462a      	mov	r2, r5
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	4640      	mov	r0, r8
 800b4e6:	47d0      	blx	sl
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d0ad      	beq.n	800b448 <_printf_i+0x160>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	079b      	lsls	r3, r3, #30
 800b4f0:	d413      	bmi.n	800b51a <_printf_i+0x232>
 800b4f2:	68e0      	ldr	r0, [r4, #12]
 800b4f4:	9b03      	ldr	r3, [sp, #12]
 800b4f6:	4298      	cmp	r0, r3
 800b4f8:	bfb8      	it	lt
 800b4fa:	4618      	movlt	r0, r3
 800b4fc:	e7a6      	b.n	800b44c <_printf_i+0x164>
 800b4fe:	2301      	movs	r3, #1
 800b500:	4632      	mov	r2, r6
 800b502:	4649      	mov	r1, r9
 800b504:	4640      	mov	r0, r8
 800b506:	47d0      	blx	sl
 800b508:	3001      	adds	r0, #1
 800b50a:	d09d      	beq.n	800b448 <_printf_i+0x160>
 800b50c:	3501      	adds	r5, #1
 800b50e:	68e3      	ldr	r3, [r4, #12]
 800b510:	9903      	ldr	r1, [sp, #12]
 800b512:	1a5b      	subs	r3, r3, r1
 800b514:	42ab      	cmp	r3, r5
 800b516:	dcf2      	bgt.n	800b4fe <_printf_i+0x216>
 800b518:	e7eb      	b.n	800b4f2 <_printf_i+0x20a>
 800b51a:	2500      	movs	r5, #0
 800b51c:	f104 0619 	add.w	r6, r4, #25
 800b520:	e7f5      	b.n	800b50e <_printf_i+0x226>
 800b522:	bf00      	nop
 800b524:	0800b971 	.word	0x0800b971
 800b528:	0800b982 	.word	0x0800b982

0800b52c <__sflush_r>:
 800b52c:	898a      	ldrh	r2, [r1, #12]
 800b52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b532:	4605      	mov	r5, r0
 800b534:	0710      	lsls	r0, r2, #28
 800b536:	460c      	mov	r4, r1
 800b538:	d458      	bmi.n	800b5ec <__sflush_r+0xc0>
 800b53a:	684b      	ldr	r3, [r1, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dc05      	bgt.n	800b54c <__sflush_r+0x20>
 800b540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b542:	2b00      	cmp	r3, #0
 800b544:	dc02      	bgt.n	800b54c <__sflush_r+0x20>
 800b546:	2000      	movs	r0, #0
 800b548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b54c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b54e:	2e00      	cmp	r6, #0
 800b550:	d0f9      	beq.n	800b546 <__sflush_r+0x1a>
 800b552:	2300      	movs	r3, #0
 800b554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b558:	682f      	ldr	r7, [r5, #0]
 800b55a:	6a21      	ldr	r1, [r4, #32]
 800b55c:	602b      	str	r3, [r5, #0]
 800b55e:	d032      	beq.n	800b5c6 <__sflush_r+0x9a>
 800b560:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	075a      	lsls	r2, r3, #29
 800b566:	d505      	bpl.n	800b574 <__sflush_r+0x48>
 800b568:	6863      	ldr	r3, [r4, #4]
 800b56a:	1ac0      	subs	r0, r0, r3
 800b56c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b56e:	b10b      	cbz	r3, 800b574 <__sflush_r+0x48>
 800b570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b572:	1ac0      	subs	r0, r0, r3
 800b574:	2300      	movs	r3, #0
 800b576:	4602      	mov	r2, r0
 800b578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b57a:	6a21      	ldr	r1, [r4, #32]
 800b57c:	4628      	mov	r0, r5
 800b57e:	47b0      	blx	r6
 800b580:	1c43      	adds	r3, r0, #1
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	d106      	bne.n	800b594 <__sflush_r+0x68>
 800b586:	6829      	ldr	r1, [r5, #0]
 800b588:	291d      	cmp	r1, #29
 800b58a:	d82b      	bhi.n	800b5e4 <__sflush_r+0xb8>
 800b58c:	4a29      	ldr	r2, [pc, #164]	; (800b634 <__sflush_r+0x108>)
 800b58e:	410a      	asrs	r2, r1
 800b590:	07d6      	lsls	r6, r2, #31
 800b592:	d427      	bmi.n	800b5e4 <__sflush_r+0xb8>
 800b594:	2200      	movs	r2, #0
 800b596:	6062      	str	r2, [r4, #4]
 800b598:	04d9      	lsls	r1, r3, #19
 800b59a:	6922      	ldr	r2, [r4, #16]
 800b59c:	6022      	str	r2, [r4, #0]
 800b59e:	d504      	bpl.n	800b5aa <__sflush_r+0x7e>
 800b5a0:	1c42      	adds	r2, r0, #1
 800b5a2:	d101      	bne.n	800b5a8 <__sflush_r+0x7c>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b903      	cbnz	r3, 800b5aa <__sflush_r+0x7e>
 800b5a8:	6560      	str	r0, [r4, #84]	; 0x54
 800b5aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ac:	602f      	str	r7, [r5, #0]
 800b5ae:	2900      	cmp	r1, #0
 800b5b0:	d0c9      	beq.n	800b546 <__sflush_r+0x1a>
 800b5b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b6:	4299      	cmp	r1, r3
 800b5b8:	d002      	beq.n	800b5c0 <__sflush_r+0x94>
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f7ff fbea 	bl	800ad94 <_free_r>
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	6360      	str	r0, [r4, #52]	; 0x34
 800b5c4:	e7c0      	b.n	800b548 <__sflush_r+0x1c>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b0      	blx	r6
 800b5cc:	1c41      	adds	r1, r0, #1
 800b5ce:	d1c8      	bne.n	800b562 <__sflush_r+0x36>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0c5      	beq.n	800b562 <__sflush_r+0x36>
 800b5d6:	2b1d      	cmp	r3, #29
 800b5d8:	d001      	beq.n	800b5de <__sflush_r+0xb2>
 800b5da:	2b16      	cmp	r3, #22
 800b5dc:	d101      	bne.n	800b5e2 <__sflush_r+0xb6>
 800b5de:	602f      	str	r7, [r5, #0]
 800b5e0:	e7b1      	b.n	800b546 <__sflush_r+0x1a>
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	e7ad      	b.n	800b548 <__sflush_r+0x1c>
 800b5ec:	690f      	ldr	r7, [r1, #16]
 800b5ee:	2f00      	cmp	r7, #0
 800b5f0:	d0a9      	beq.n	800b546 <__sflush_r+0x1a>
 800b5f2:	0793      	lsls	r3, r2, #30
 800b5f4:	680e      	ldr	r6, [r1, #0]
 800b5f6:	bf08      	it	eq
 800b5f8:	694b      	ldreq	r3, [r1, #20]
 800b5fa:	600f      	str	r7, [r1, #0]
 800b5fc:	bf18      	it	ne
 800b5fe:	2300      	movne	r3, #0
 800b600:	eba6 0807 	sub.w	r8, r6, r7
 800b604:	608b      	str	r3, [r1, #8]
 800b606:	f1b8 0f00 	cmp.w	r8, #0
 800b60a:	dd9c      	ble.n	800b546 <__sflush_r+0x1a>
 800b60c:	6a21      	ldr	r1, [r4, #32]
 800b60e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b610:	4643      	mov	r3, r8
 800b612:	463a      	mov	r2, r7
 800b614:	4628      	mov	r0, r5
 800b616:	47b0      	blx	r6
 800b618:	2800      	cmp	r0, #0
 800b61a:	dc06      	bgt.n	800b62a <__sflush_r+0xfe>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b622:	81a3      	strh	r3, [r4, #12]
 800b624:	f04f 30ff 	mov.w	r0, #4294967295
 800b628:	e78e      	b.n	800b548 <__sflush_r+0x1c>
 800b62a:	4407      	add	r7, r0
 800b62c:	eba8 0800 	sub.w	r8, r8, r0
 800b630:	e7e9      	b.n	800b606 <__sflush_r+0xda>
 800b632:	bf00      	nop
 800b634:	dfbffffe 	.word	0xdfbffffe

0800b638 <_fflush_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	690b      	ldr	r3, [r1, #16]
 800b63c:	4605      	mov	r5, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	b913      	cbnz	r3, 800b648 <_fflush_r+0x10>
 800b642:	2500      	movs	r5, #0
 800b644:	4628      	mov	r0, r5
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	b118      	cbz	r0, 800b652 <_fflush_r+0x1a>
 800b64a:	6a03      	ldr	r3, [r0, #32]
 800b64c:	b90b      	cbnz	r3, 800b652 <_fflush_r+0x1a>
 800b64e:	f7ff fa99 	bl	800ab84 <__sinit>
 800b652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0f3      	beq.n	800b642 <_fflush_r+0xa>
 800b65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b65c:	07d0      	lsls	r0, r2, #31
 800b65e:	d404      	bmi.n	800b66a <_fflush_r+0x32>
 800b660:	0599      	lsls	r1, r3, #22
 800b662:	d402      	bmi.n	800b66a <_fflush_r+0x32>
 800b664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b666:	f7ff fb92 	bl	800ad8e <__retarget_lock_acquire_recursive>
 800b66a:	4628      	mov	r0, r5
 800b66c:	4621      	mov	r1, r4
 800b66e:	f7ff ff5d 	bl	800b52c <__sflush_r>
 800b672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b674:	07da      	lsls	r2, r3, #31
 800b676:	4605      	mov	r5, r0
 800b678:	d4e4      	bmi.n	800b644 <_fflush_r+0xc>
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	059b      	lsls	r3, r3, #22
 800b67e:	d4e1      	bmi.n	800b644 <_fflush_r+0xc>
 800b680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b682:	f7ff fb85 	bl	800ad90 <__retarget_lock_release_recursive>
 800b686:	e7dd      	b.n	800b644 <_fflush_r+0xc>

0800b688 <__swbuf_r>:
 800b688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68a:	460e      	mov	r6, r1
 800b68c:	4614      	mov	r4, r2
 800b68e:	4605      	mov	r5, r0
 800b690:	b118      	cbz	r0, 800b69a <__swbuf_r+0x12>
 800b692:	6a03      	ldr	r3, [r0, #32]
 800b694:	b90b      	cbnz	r3, 800b69a <__swbuf_r+0x12>
 800b696:	f7ff fa75 	bl	800ab84 <__sinit>
 800b69a:	69a3      	ldr	r3, [r4, #24]
 800b69c:	60a3      	str	r3, [r4, #8]
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	071a      	lsls	r2, r3, #28
 800b6a2:	d525      	bpl.n	800b6f0 <__swbuf_r+0x68>
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	b31b      	cbz	r3, 800b6f0 <__swbuf_r+0x68>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	1a98      	subs	r0, r3, r2
 800b6ae:	6963      	ldr	r3, [r4, #20]
 800b6b0:	b2f6      	uxtb	r6, r6
 800b6b2:	4283      	cmp	r3, r0
 800b6b4:	4637      	mov	r7, r6
 800b6b6:	dc04      	bgt.n	800b6c2 <__swbuf_r+0x3a>
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f7ff ffbc 	bl	800b638 <_fflush_r>
 800b6c0:	b9e0      	cbnz	r0, 800b6fc <__swbuf_r+0x74>
 800b6c2:	68a3      	ldr	r3, [r4, #8]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	60a3      	str	r3, [r4, #8]
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	6022      	str	r2, [r4, #0]
 800b6ce:	701e      	strb	r6, [r3, #0]
 800b6d0:	6962      	ldr	r2, [r4, #20]
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d004      	beq.n	800b6e2 <__swbuf_r+0x5a>
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	07db      	lsls	r3, r3, #31
 800b6dc:	d506      	bpl.n	800b6ec <__swbuf_r+0x64>
 800b6de:	2e0a      	cmp	r6, #10
 800b6e0:	d104      	bne.n	800b6ec <__swbuf_r+0x64>
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f7ff ffa7 	bl	800b638 <_fflush_r>
 800b6ea:	b938      	cbnz	r0, 800b6fc <__swbuf_r+0x74>
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	f000 f806 	bl	800b704 <__swsetup_r>
 800b6f8:	2800      	cmp	r0, #0
 800b6fa:	d0d5      	beq.n	800b6a8 <__swbuf_r+0x20>
 800b6fc:	f04f 37ff 	mov.w	r7, #4294967295
 800b700:	e7f4      	b.n	800b6ec <__swbuf_r+0x64>
	...

0800b704 <__swsetup_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4b2a      	ldr	r3, [pc, #168]	; (800b7b0 <__swsetup_r+0xac>)
 800b708:	4605      	mov	r5, r0
 800b70a:	6818      	ldr	r0, [r3, #0]
 800b70c:	460c      	mov	r4, r1
 800b70e:	b118      	cbz	r0, 800b718 <__swsetup_r+0x14>
 800b710:	6a03      	ldr	r3, [r0, #32]
 800b712:	b90b      	cbnz	r3, 800b718 <__swsetup_r+0x14>
 800b714:	f7ff fa36 	bl	800ab84 <__sinit>
 800b718:	89a3      	ldrh	r3, [r4, #12]
 800b71a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b71e:	0718      	lsls	r0, r3, #28
 800b720:	d422      	bmi.n	800b768 <__swsetup_r+0x64>
 800b722:	06d9      	lsls	r1, r3, #27
 800b724:	d407      	bmi.n	800b736 <__swsetup_r+0x32>
 800b726:	2309      	movs	r3, #9
 800b728:	602b      	str	r3, [r5, #0]
 800b72a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b72e:	81a3      	strh	r3, [r4, #12]
 800b730:	f04f 30ff 	mov.w	r0, #4294967295
 800b734:	e034      	b.n	800b7a0 <__swsetup_r+0x9c>
 800b736:	0758      	lsls	r0, r3, #29
 800b738:	d512      	bpl.n	800b760 <__swsetup_r+0x5c>
 800b73a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b73c:	b141      	cbz	r1, 800b750 <__swsetup_r+0x4c>
 800b73e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b742:	4299      	cmp	r1, r3
 800b744:	d002      	beq.n	800b74c <__swsetup_r+0x48>
 800b746:	4628      	mov	r0, r5
 800b748:	f7ff fb24 	bl	800ad94 <_free_r>
 800b74c:	2300      	movs	r3, #0
 800b74e:	6363      	str	r3, [r4, #52]	; 0x34
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	2300      	movs	r3, #0
 800b75a:	6063      	str	r3, [r4, #4]
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	f043 0308 	orr.w	r3, r3, #8
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	b94b      	cbnz	r3, 800b780 <__swsetup_r+0x7c>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b776:	d003      	beq.n	800b780 <__swsetup_r+0x7c>
 800b778:	4621      	mov	r1, r4
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 f850 	bl	800b820 <__smakebuf_r>
 800b780:	89a0      	ldrh	r0, [r4, #12]
 800b782:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b786:	f010 0301 	ands.w	r3, r0, #1
 800b78a:	d00a      	beq.n	800b7a2 <__swsetup_r+0x9e>
 800b78c:	2300      	movs	r3, #0
 800b78e:	60a3      	str	r3, [r4, #8]
 800b790:	6963      	ldr	r3, [r4, #20]
 800b792:	425b      	negs	r3, r3
 800b794:	61a3      	str	r3, [r4, #24]
 800b796:	6923      	ldr	r3, [r4, #16]
 800b798:	b943      	cbnz	r3, 800b7ac <__swsetup_r+0xa8>
 800b79a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b79e:	d1c4      	bne.n	800b72a <__swsetup_r+0x26>
 800b7a0:	bd38      	pop	{r3, r4, r5, pc}
 800b7a2:	0781      	lsls	r1, r0, #30
 800b7a4:	bf58      	it	pl
 800b7a6:	6963      	ldrpl	r3, [r4, #20]
 800b7a8:	60a3      	str	r3, [r4, #8]
 800b7aa:	e7f4      	b.n	800b796 <__swsetup_r+0x92>
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	e7f7      	b.n	800b7a0 <__swsetup_r+0x9c>
 800b7b0:	20000064 	.word	0x20000064

0800b7b4 <_sbrk_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4d06      	ldr	r5, [pc, #24]	; (800b7d0 <_sbrk_r+0x1c>)
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4608      	mov	r0, r1
 800b7be:	602b      	str	r3, [r5, #0]
 800b7c0:	f7fc ff4c 	bl	800865c <_sbrk>
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	d102      	bne.n	800b7ce <_sbrk_r+0x1a>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b103      	cbz	r3, 800b7ce <_sbrk_r+0x1a>
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	20000250 	.word	0x20000250

0800b7d4 <__swhatbuf_r>:
 800b7d4:	b570      	push	{r4, r5, r6, lr}
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	b096      	sub	sp, #88	; 0x58
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	461e      	mov	r6, r3
 800b7e4:	da0d      	bge.n	800b802 <__swhatbuf_r+0x2e>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7ec:	f04f 0100 	mov.w	r1, #0
 800b7f0:	bf0c      	ite	eq
 800b7f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b7f6:	2340      	movne	r3, #64	; 0x40
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	6031      	str	r1, [r6, #0]
 800b7fc:	602b      	str	r3, [r5, #0]
 800b7fe:	b016      	add	sp, #88	; 0x58
 800b800:	bd70      	pop	{r4, r5, r6, pc}
 800b802:	466a      	mov	r2, sp
 800b804:	f000 f848 	bl	800b898 <_fstat_r>
 800b808:	2800      	cmp	r0, #0
 800b80a:	dbec      	blt.n	800b7e6 <__swhatbuf_r+0x12>
 800b80c:	9901      	ldr	r1, [sp, #4]
 800b80e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b812:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b816:	4259      	negs	r1, r3
 800b818:	4159      	adcs	r1, r3
 800b81a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b81e:	e7eb      	b.n	800b7f8 <__swhatbuf_r+0x24>

0800b820 <__smakebuf_r>:
 800b820:	898b      	ldrh	r3, [r1, #12]
 800b822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b824:	079d      	lsls	r5, r3, #30
 800b826:	4606      	mov	r6, r0
 800b828:	460c      	mov	r4, r1
 800b82a:	d507      	bpl.n	800b83c <__smakebuf_r+0x1c>
 800b82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	6123      	str	r3, [r4, #16]
 800b834:	2301      	movs	r3, #1
 800b836:	6163      	str	r3, [r4, #20]
 800b838:	b002      	add	sp, #8
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	ab01      	add	r3, sp, #4
 800b83e:	466a      	mov	r2, sp
 800b840:	f7ff ffc8 	bl	800b7d4 <__swhatbuf_r>
 800b844:	9900      	ldr	r1, [sp, #0]
 800b846:	4605      	mov	r5, r0
 800b848:	4630      	mov	r0, r6
 800b84a:	f7ff fb0f 	bl	800ae6c <_malloc_r>
 800b84e:	b948      	cbnz	r0, 800b864 <__smakebuf_r+0x44>
 800b850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b854:	059a      	lsls	r2, r3, #22
 800b856:	d4ef      	bmi.n	800b838 <__smakebuf_r+0x18>
 800b858:	f023 0303 	bic.w	r3, r3, #3
 800b85c:	f043 0302 	orr.w	r3, r3, #2
 800b860:	81a3      	strh	r3, [r4, #12]
 800b862:	e7e3      	b.n	800b82c <__smakebuf_r+0xc>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	6020      	str	r0, [r4, #0]
 800b868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b86c:	81a3      	strh	r3, [r4, #12]
 800b86e:	9b00      	ldr	r3, [sp, #0]
 800b870:	6163      	str	r3, [r4, #20]
 800b872:	9b01      	ldr	r3, [sp, #4]
 800b874:	6120      	str	r0, [r4, #16]
 800b876:	b15b      	cbz	r3, 800b890 <__smakebuf_r+0x70>
 800b878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b87c:	4630      	mov	r0, r6
 800b87e:	f000 f81d 	bl	800b8bc <_isatty_r>
 800b882:	b128      	cbz	r0, 800b890 <__smakebuf_r+0x70>
 800b884:	89a3      	ldrh	r3, [r4, #12]
 800b886:	f023 0303 	bic.w	r3, r3, #3
 800b88a:	f043 0301 	orr.w	r3, r3, #1
 800b88e:	81a3      	strh	r3, [r4, #12]
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	431d      	orrs	r5, r3
 800b894:	81a5      	strh	r5, [r4, #12]
 800b896:	e7cf      	b.n	800b838 <__smakebuf_r+0x18>

0800b898 <_fstat_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4d07      	ldr	r5, [pc, #28]	; (800b8b8 <_fstat_r+0x20>)
 800b89c:	2300      	movs	r3, #0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	4608      	mov	r0, r1
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	602b      	str	r3, [r5, #0]
 800b8a6:	f7fc feb0 	bl	800860a <_fstat>
 800b8aa:	1c43      	adds	r3, r0, #1
 800b8ac:	d102      	bne.n	800b8b4 <_fstat_r+0x1c>
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	b103      	cbz	r3, 800b8b4 <_fstat_r+0x1c>
 800b8b2:	6023      	str	r3, [r4, #0]
 800b8b4:	bd38      	pop	{r3, r4, r5, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000250 	.word	0x20000250

0800b8bc <_isatty_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d06      	ldr	r5, [pc, #24]	; (800b8d8 <_isatty_r+0x1c>)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	602b      	str	r3, [r5, #0]
 800b8c8:	f7fc feaf 	bl	800862a <_isatty>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_isatty_r+0x1a>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_isatty_r+0x1a>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20000250 	.word	0x20000250

0800b8dc <_init>:
 800b8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8de:	bf00      	nop
 800b8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e2:	bc08      	pop	{r3}
 800b8e4:	469e      	mov	lr, r3
 800b8e6:	4770      	bx	lr

0800b8e8 <_fini>:
 800b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ea:	bf00      	nop
 800b8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ee:	bc08      	pop	{r3}
 800b8f0:	469e      	mov	lr, r3
 800b8f2:	4770      	bx	lr
