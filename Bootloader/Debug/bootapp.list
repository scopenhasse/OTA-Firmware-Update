
bootapp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003838  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a84  08003a84  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003a84  08003a84  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a84  08003a84  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000894f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014f5  00000000  00000000  00028a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006e0  00000000  00000000  00029f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000536  00000000  00000000  0002a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b0aa  00000000  00000000  0002ab36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009475  00000000  00000000  00045be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009c2aa  00000000  00000000  0004f055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002260  00000000  00000000  000eb300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000ed560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039b0 	.word	0x080039b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080039b0 	.word	0x080039b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fa78 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f828 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f892 	bl	80003a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000280:	f000 f860 	bl	8000344 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader : version = %d,%d\n",BLversion[0],BLversion[1]);
 8000284:	2300      	movs	r3, #0
 8000286:	2201      	movs	r2, #1
 8000288:	4619      	mov	r1, r3
 800028a:	480e      	ldr	r0, [pc, #56]	; (80002c4 <main+0x54>)
 800028c:	f002 fcc0 	bl	8002c10 <iprintf>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2108      	movs	r1, #8
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <main+0x58>)
 8000296:	f000 fd49 	bl	8000d2c <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 800029a:	f241 3088 	movw	r0, #5000	; 0x1388
 800029e:	f000 fac9 	bl	8000834 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2108      	movs	r1, #8
 80002a6:	4808      	ldr	r0, [pc, #32]	; (80002c8 <main+0x58>)
 80002a8:	f000 fd40 	bl	8000d2c <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80002ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80002b0:	f000 fac0 	bl	8000834 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2108      	movs	r1, #8
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <main+0x58>)
 80002ba:	f000 fd37 	bl	8000d2c <HAL_GPIO_WritePin>

  gotoApplication();
 80002be:	f000 f8c1 	bl	8000444 <gotoApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c2:	e7fe      	b.n	80002c2 <main+0x52>
 80002c4:	080039c8 	.word	0x080039c8
 80002c8:	48000400 	.word	0x48000400

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b090      	sub	sp, #64	; 0x40
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fdde 	bl	8002e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f2:	2301      	movs	r3, #1
 80002f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f6:	2310      	movs	r3, #16
 80002f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fd2a 	bl	8000d5c <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800030e:	f000 f8b3 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	230f      	movs	r3, #15
 8000314:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fd54 	bl	8001dd8 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000336:	f000 f89f 	bl	8000478 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	; 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <MX_USART2_UART_Init+0x58>)
 800034a:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <MX_USART2_UART_Init+0x5c>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800034e:	4b13      	ldr	r3, [pc, #76]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000350:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART2_UART_Init+0x58>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART2_UART_Init+0x58>)
 8000388:	f001 ff5c 	bl	8002244 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000392:	f000 f871 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000084 	.word	0x20000084
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 030c 	add.w	r3, r7, #12
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <MX_GPIO_Init+0x74>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a16      	ldr	r2, [pc, #88]	; (8000418 <MX_GPIO_Init+0x74>)
 80003c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c4:	6153      	str	r3, [r2, #20]
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_GPIO_Init+0x74>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ce:	60bb      	str	r3, [r7, #8]
 80003d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_GPIO_Init+0x74>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a10      	ldr	r2, [pc, #64]	; (8000418 <MX_GPIO_Init+0x74>)
 80003d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_GPIO_Init+0x74>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	480b      	ldr	r0, [pc, #44]	; (800041c <MX_GPIO_Init+0x78>)
 80003f0:	f000 fc9c 	bl	8000d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003f4:	2308      	movs	r3, #8
 80003f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4619      	mov	r1, r3
 800040a:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_GPIO_Init+0x78>)
 800040c:	f000 fb1c 	bl	8000a48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	48000400 	.word	0x48000400

08000420 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE * f)
#endif
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8000428:	1d39      	adds	r1, r7, #4
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	2201      	movs	r2, #1
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <__io_putchar+0x20>)
 8000432:	f001 ff55 	bl	80022e0 <HAL_UART_Transmit>
	return ch;
 8000436:	687b      	ldr	r3, [r7, #4]
}
 8000438:	4618      	mov	r0, r3
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000084 	.word	0x20000084

08000444 <gotoApplication>:

static void gotoApplication(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0

	printf("BootLoader Done, Going to Application\n");
 800044a:	4808      	ldr	r0, [pc, #32]	; (800046c <gotoApplication+0x28>)
 800044c:	f002 fc46 	bl	8002cdc <puts>

	application_reset_handler_t application_reset_handler = (application_reset_handler_t)(*((uint32_t*)(APPLICATION_ADDRESS + 4)));
 8000450:	4b07      	ldr	r3, [pc, #28]	; (8000470 <gotoApplication+0x2c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2108      	movs	r1, #8
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <gotoApplication+0x30>)
 800045c:	f000 fc66 	bl	8000d2c <HAL_GPIO_WritePin>

	application_reset_handler();
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4798      	blx	r3
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	080039f0 	.word	0x080039f0
 8000470:	08008004 	.word	0x08008004
 8000474:	48000400 	.word	0x48000400

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x44>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x44>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <HAL_MspInit+0x44>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <HAL_MspInit+0x44>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a18      	ldr	r2, [pc, #96]	; (800054c <HAL_UART_MspInit+0x80>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d129      	bne.n	8000542 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_UART_MspInit+0x84>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	4a17      	ldr	r2, [pc, #92]	; (8000550 <HAL_UART_MspInit+0x84>)
 80004f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004f8:	61d3      	str	r3, [r2, #28]
 80004fa:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_UART_MspInit+0x84>)
 80004fc:	69db      	ldr	r3, [r3, #28]
 80004fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_UART_MspInit+0x84>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <HAL_UART_MspInit+0x84>)
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_UART_MspInit+0x84>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800051e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000524:	2302      	movs	r3, #2
 8000526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800052c:	2303      	movs	r3, #3
 800052e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000530:	2307      	movs	r3, #7
 8000532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f000 fa83 	bl	8000a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40004400 	.word	0x40004400
 8000550:	40021000 	.word	0x40021000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <MemManage_Handler+0x4>

08000566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056a:	e7fe      	b.n	800056a <BusFault_Handler+0x4>

0800056c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000570:	e7fe      	b.n	8000570 <UsageFault_Handler+0x4>

08000572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f928 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	e00a      	b.n	80005d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005ba:	f3af 8000 	nop.w
 80005be:	4601      	mov	r1, r0
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	60ba      	str	r2, [r7, #8]
 80005c6:	b2ca      	uxtb	r2, r1
 80005c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	3301      	adds	r3, #1
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dbf0      	blt.n	80005ba <_read+0x12>
  }

  return len;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e009      	b.n	8000608 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff ff0f 	bl	8000420 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf1      	blt.n	80005f4 <_write+0x12>
  }
  return len;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_close>:

int _close(int file)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000642:	605a      	str	r2, [r3, #4]
  return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <_isatty>:

int _isatty(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <_sbrk+0x5c>)
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <_sbrk+0x60>)
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <_sbrk+0x64>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <_sbrk+0x64>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <_sbrk+0x68>)
 80006a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_sbrk+0x64>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d207      	bcs.n	80006c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b4:	f002 fc40 	bl	8002f38 <__errno>
 80006b8:	4603      	mov	r3, r0
 80006ba:	220c      	movs	r2, #12
 80006bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
 80006c2:	e009      	b.n	80006d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <_sbrk+0x64>)
 80006d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d6:	68fb      	ldr	r3, [r7, #12]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20003000 	.word	0x20003000
 80006e4:	00000400 	.word	0x00000400
 80006e8:	2000010c 	.word	0x2000010c
 80006ec:	20000260 	.word	0x20000260

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	; (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800074c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff ffea 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	; (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	; (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	; (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f002 fbff 	bl	8002f44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000746:	f7ff fd93 	bl	8000270 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800074c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000758:	08003a8c 	.word	0x08003a8c
  ldr r2, =_sbss
 800075c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000760:	20000260 	.word	0x20000260

08000764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <ADC1_2_IRQHandler>
	...

08000768 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f931 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fe7e 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f93b 	bl	8000a2e <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f000 f911 	bl	80009f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000110 	.word	0x20000110

0800081c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000110 	.word	0x20000110

08000834 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800083c:	f7ff ffee 	bl	800081c <HAL_GetTick>
 8000840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800084c:	d005      	beq.n	800085a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <HAL_Delay+0x44>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4413      	add	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800085a:	bf00      	nop
 800085c:	f7ff ffde 	bl	800081c <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d8f7      	bhi.n	800085c <HAL_Delay+0x28>
  {
  }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff ff8e 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff47 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff5c 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff8e 	bl	8000934 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5d 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffb0 	bl	800099c <SysTick_Config>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b087      	sub	sp, #28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	e14e      	b.n	8000cf6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	fa01 f303 	lsl.w	r3, r1, r3
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8140 	beq.w	8000cf0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f003 0303 	and.w	r3, r3, #3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d005      	beq.n	8000a88 <HAL_GPIO_Init+0x40>
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d130      	bne.n	8000aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2203      	movs	r2, #3
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000abe:	2201      	movs	r2, #1
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	f003 0201 	and.w	r2, r3, #1
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 0303 	and.w	r3, r3, #3
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d017      	beq.n	8000b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0303 	and.w	r3, r3, #3
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d123      	bne.n	8000b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	08da      	lsrs	r2, r3, #3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3208      	adds	r2, #8
 8000b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	691a      	ldr	r2, [r3, #16]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	08da      	lsrs	r2, r3, #3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3208      	adds	r2, #8
 8000b74:	6939      	ldr	r1, [r7, #16]
 8000b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0203 	and.w	r2, r3, #3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f000 809a 	beq.w	8000cf0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	4b55      	ldr	r3, [pc, #340]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a54      	ldr	r2, [pc, #336]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b52      	ldr	r3, [pc, #328]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bd4:	4a50      	ldr	r2, [pc, #320]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	220f      	movs	r2, #15
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bfe:	d013      	beq.n	8000c28 <HAL_GPIO_Init+0x1e0>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a46      	ldr	r2, [pc, #280]	; (8000d1c <HAL_GPIO_Init+0x2d4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d00d      	beq.n	8000c24 <HAL_GPIO_Init+0x1dc>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a45      	ldr	r2, [pc, #276]	; (8000d20 <HAL_GPIO_Init+0x2d8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d007      	beq.n	8000c20 <HAL_GPIO_Init+0x1d8>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d101      	bne.n	8000c1c <HAL_GPIO_Init+0x1d4>
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e006      	b.n	8000c2a <HAL_GPIO_Init+0x1e2>
 8000c1c:	2305      	movs	r3, #5
 8000c1e:	e004      	b.n	8000c2a <HAL_GPIO_Init+0x1e2>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x1e2>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <HAL_GPIO_Init+0x1e2>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	f002 0203 	and.w	r2, r2, #3
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	4093      	lsls	r3, r2
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3a:	4937      	ldr	r1, [pc, #220]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c48:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c6c:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c96:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f47f aea9 	bne.w	8000a58 <HAL_GPIO_Init+0x10>
  }
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000800 	.word	0x48000800
 8000d24:	48000c00 	.word	0x48000c00
 8000d28:	40010400 	.word	0x40010400

08000d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	807b      	strh	r3, [r7, #2]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d3c:	787b      	ldrb	r3, [r7, #1]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d42:	887a      	ldrh	r2, [r7, #2]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4a:	887a      	ldrh	r2, [r7, #2]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d6c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f001 b823 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 817d 	beq.w	8001092 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d98:	4bbc      	ldr	r3, [pc, #752]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d00c      	beq.n	8000dbe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da4:	4bb9      	ldr	r3, [pc, #740]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 030c 	and.w	r3, r3, #12
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d15c      	bne.n	8000e6a <HAL_RCC_OscConfig+0x10e>
 8000db0:	4bb6      	ldr	r3, [pc, #728]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbc:	d155      	bne.n	8000e6a <HAL_RCC_OscConfig+0x10e>
 8000dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000dca:	fa93 f3a3 	rbit	r3, r3
 8000dce:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dd2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd6:	fab3 f383 	clz	r3, r3
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	095b      	lsrs	r3, r3, #5
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d102      	bne.n	8000df0 <HAL_RCC_OscConfig+0x94>
 8000dea:	4ba8      	ldr	r3, [pc, #672]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	e015      	b.n	8000e1c <HAL_RCC_OscConfig+0xc0>
 8000df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dfc:	fa93 f3a3 	rbit	r3, r3
 8000e00:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e08:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e0c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e10:	fa93 f3a3 	rbit	r3, r3
 8000e14:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e18:	4b9c      	ldr	r3, [pc, #624]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e20:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e28:	fa92 f2a2 	rbit	r2, r2
 8000e2c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e30:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e34:	fab2 f282 	clz	r2, r2
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	f042 0220 	orr.w	r2, r2, #32
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	f002 021f 	and.w	r2, r2, #31
 8000e44:	2101      	movs	r1, #1
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 811f 	beq.w	8001090 <HAL_RCC_OscConfig+0x334>
 8000e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8116 	bne.w	8001090 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f000 bfaf 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12e>
 8000e7c:	4b83      	ldr	r3, [pc, #524]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a82      	ldr	r2, [pc, #520]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e036      	b.n	8000ef8 <HAL_RCC_OscConfig+0x19c>
 8000e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x158>
 8000e9a:	4b7c      	ldr	r3, [pc, #496]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a7b      	ldr	r2, [pc, #492]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b79      	ldr	r3, [pc, #484]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a78      	ldr	r2, [pc, #480]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e021      	b.n	8000ef8 <HAL_RCC_OscConfig+0x19c>
 8000eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x184>
 8000ec6:	4b71      	ldr	r3, [pc, #452]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a70      	ldr	r2, [pc, #448]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b6e      	ldr	r3, [pc, #440]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a6d      	ldr	r2, [pc, #436]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e00b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x19c>
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a69      	ldr	r2, [pc, #420]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	4b67      	ldr	r3, [pc, #412]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a66      	ldr	r2, [pc, #408]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ef8:	4b64      	ldr	r3, [pc, #400]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000efc:	f023 020f 	bic.w	r2, r3, #15
 8000f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	495f      	ldr	r1, [pc, #380]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d059      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fc7b 	bl	800081c <HAL_GetTick>
 8000f26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	e00a      	b.n	8000f42 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fc76 	bl	800081c <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b64      	cmp	r3, #100	; 0x64
 8000f3a:	d902      	bls.n	8000f42 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	f000 bf43 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
 8000f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f46:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f56:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	095b      	lsrs	r3, r3, #5
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d102      	bne.n	8000f74 <HAL_RCC_OscConfig+0x218>
 8000f6e:	4b47      	ldr	r3, [pc, #284]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	e015      	b.n	8000fa0 <HAL_RCC_OscConfig+0x244>
 8000f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f78:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f94:	fa93 f3a3 	rbit	r3, r3
 8000f98:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fa8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fac:	fa92 f2a2 	rbit	r2, r2
 8000fb0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fb4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fb8:	fab2 f282 	clz	r2, r2
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	f042 0220 	orr.w	r2, r2, #32
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	f002 021f 	and.w	r2, r2, #31
 8000fc8:	2101      	movs	r1, #1
 8000fca:	fa01 f202 	lsl.w	r2, r1, r2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0ab      	beq.n	8000f2c <HAL_RCC_OscConfig+0x1d0>
 8000fd4:	e05d      	b.n	8001092 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fc21 	bl	800081c <HAL_GetTick>
 8000fda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	e00a      	b.n	8000ff6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fc1c 	bl	800081c <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b64      	cmp	r3, #100	; 0x64
 8000fee:	d902      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	f000 bee9 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
 8000ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ffa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800100a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	095b      	lsrs	r3, r3, #5
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d102      	bne.n	8001028 <HAL_RCC_OscConfig+0x2cc>
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	e015      	b.n	8001054 <HAL_RCC_OscConfig+0x2f8>
 8001028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800103c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001040:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001044:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_RCC_OscConfig+0x330>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001058:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800105c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001060:	fa92 f2a2 	rbit	r2, r2
 8001064:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001068:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800106c:	fab2 f282 	clz	r2, r2
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	f042 0220 	orr.w	r2, r2, #32
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f002 021f 	and.w	r2, r2, #31
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1ab      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x284>
 8001088:	e003      	b.n	8001092 <HAL_RCC_OscConfig+0x336>
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f000 817d 	beq.w	80013a2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010a8:	4ba6      	ldr	r3, [pc, #664]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 030c 	and.w	r3, r3, #12
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010b4:	4ba3      	ldr	r3, [pc, #652]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d172      	bne.n	80011a6 <HAL_RCC_OscConfig+0x44a>
 80010c0:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d16c      	bne.n	80011a6 <HAL_RCC_OscConfig+0x44a>
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	095b      	lsrs	r3, r3, #5
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d102      	bne.n	80010fc <HAL_RCC_OscConfig+0x3a0>
 80010f6:	4b93      	ldr	r3, [pc, #588]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	e013      	b.n	8001124 <HAL_RCC_OscConfig+0x3c8>
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001114:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001120:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	2202      	movs	r2, #2
 8001126:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800112a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800112e:	fa92 f2a2 	rbit	r2, r2
 8001132:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001136:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800113a:	fab2 f282 	clz	r2, r2
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	f042 0220 	orr.w	r2, r2, #32
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	f002 021f 	and.w	r2, r2, #31
 800114a:	2101      	movs	r1, #1
 800114c:	fa01 f202 	lsl.w	r2, r1, r2
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00a      	beq.n	800116c <HAL_RCC_OscConfig+0x410>
 8001156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d002      	beq.n	800116c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	f000 be2e 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001178:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	21f8      	movs	r1, #248	; 0xf8
 8001182:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800118a:	fa91 f1a1 	rbit	r1, r1
 800118e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001192:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001196:	fab1 f181 	clz	r1, r1
 800119a:	b2c9      	uxtb	r1, r1
 800119c:	408b      	lsls	r3, r1
 800119e:	4969      	ldr	r1, [pc, #420]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 80011a0:	4313      	orrs	r3, r2
 80011a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a4:	e0fd      	b.n	80013a2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 8088 	beq.w	80012c8 <HAL_RCC_OscConfig+0x56c>
 80011b8:	2301      	movs	r3, #1
 80011ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	461a      	mov	r2, r3
 80011e0:	2301      	movs	r3, #1
 80011e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fb1a 	bl	800081c <HAL_GetTick>
 80011e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fb15 	bl	800081c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d902      	bls.n	8001204 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	f000 bde2 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800120e:	fa93 f3a3 	rbit	r3, r3
 8001212:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001216:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	fab3 f383 	clz	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	095b      	lsrs	r3, r3, #5
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_RCC_OscConfig+0x4d8>
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	e013      	b.n	800125c <HAL_RCC_OscConfig+0x500>
 8001234:	2302      	movs	r3, #2
 8001236:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800124c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001258:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	2202      	movs	r2, #2
 800125e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001262:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001266:	fa92 f2a2 	rbit	r2, r2
 800126a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800126e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001272:	fab2 f282 	clz	r2, r2
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	f042 0220 	orr.w	r2, r2, #32
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	f002 021f 	and.w	r2, r2, #31
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0af      	beq.n	80011ee <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	21f8      	movs	r1, #248	; 0xf8
 80012a4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012ac:	fa91 f1a1 	rbit	r1, r1
 80012b0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012b4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012b8:	fab1 f181 	clz	r1, r1
 80012bc:	b2c9      	uxtb	r1, r1
 80012be:	408b      	lsls	r3, r1
 80012c0:	4920      	ldr	r1, [pc, #128]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
 80012c6:	e06c      	b.n	80013a2 <HAL_RCC_OscConfig+0x646>
 80012c8:	2301      	movs	r3, #1
 80012ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	461a      	mov	r2, r3
 80012f0:	2300      	movs	r3, #0
 80012f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fa92 	bl	800081c <HAL_GetTick>
 80012f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fa8d 	bl	800081c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d902      	bls.n	8001314 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	f000 bd5a 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	095b      	lsrs	r3, r3, #5
 8001332:	b2db      	uxtb	r3, r3
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d104      	bne.n	8001348 <HAL_RCC_OscConfig+0x5ec>
 800133e:	4b01      	ldr	r3, [pc, #4]	; (8001344 <HAL_RCC_OscConfig+0x5e8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	e015      	b.n	8001370 <HAL_RCC_OscConfig+0x614>
 8001344:	40021000 	.word	0x40021000
 8001348:	2302      	movs	r3, #2
 800134a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001360:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800136c:	4bc8      	ldr	r3, [pc, #800]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	2202      	movs	r2, #2
 8001372:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001376:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800137a:	fa92 f2a2 	rbit	r2, r2
 800137e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001382:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001386:	fab2 f282 	clz	r2, r2
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	f042 0220 	orr.w	r2, r2, #32
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	f002 021f 	and.w	r2, r2, #31
 8001396:	2101      	movs	r1, #1
 8001398:	fa01 f202 	lsl.w	r2, r1, r2
 800139c:	4013      	ands	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ad      	bne.n	80012fe <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 8110 	beq.w	80015d8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d079      	beq.n	80014bc <HAL_RCC_OscConfig+0x760>
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013d2:	fa93 f3a3 	rbit	r3, r3
 80013d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4bab      	ldr	r3, [pc, #684]	; (8001694 <HAL_RCC_OscConfig+0x938>)
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	461a      	mov	r2, r3
 80013ee:	2301      	movs	r3, #1
 80013f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fa13 	bl	800081c <HAL_GetTick>
 80013f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fa0e 	bl	800081c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d902      	bls.n	8001412 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	f000 bcdb 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001428:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800142c:	2202      	movs	r2, #2
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f2a3 	rbit	r2, r3
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001450:	2202      	movs	r2, #2
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	fa93 f2a3 	rbit	r2, r3
 8001462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800146a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146c:	4b88      	ldr	r3, [pc, #544]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 800146e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001478:	2102      	movs	r1, #2
 800147a:	6019      	str	r1, [r3, #0]
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fa93 f1a3 	rbit	r1, r3
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001492:	6019      	str	r1, [r3, #0]
  return result;
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0a0      	beq.n	80013fc <HAL_RCC_OscConfig+0x6a0>
 80014ba:	e08d      	b.n	80015d8 <HAL_RCC_OscConfig+0x87c>
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014de:	601a      	str	r2, [r3, #0]
  return result;
 80014e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014e8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x938>)
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	461a      	mov	r2, r3
 80014fa:	2300      	movs	r3, #0
 80014fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff f98d 	bl	800081c <HAL_GetTick>
 8001502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001508:	f7ff f988 	bl	800081c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d902      	bls.n	800151e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	f000 bc55 	b.w	8001dc8 <HAL_RCC_OscConfig+0x106c>
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	fa93 f2a3 	rbit	r2, r3
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800156e:	2202      	movs	r2, #2
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001584:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001588:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 800158c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001596:	2102      	movs	r1, #2
 8001598:	6019      	str	r1, [r3, #0]
 800159a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fa93 f1a3 	rbit	r1, r3
 80015a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015b0:	6019      	str	r1, [r3, #0]
  return result;
 80015b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d197      	bne.n	8001508 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 81a1 	beq.w	8001930 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d116      	bne.n	800162e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 8001602:	69db      	ldr	r3, [r3, #28]
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	61d3      	str	r3, [r2, #28]
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001622:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001626:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001628:	2301      	movs	r3, #1
 800162a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_RCC_OscConfig+0x93c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d11a      	bne.n	8001670 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x93c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_RCC_OscConfig+0x93c>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff f8e9 	bl	800081c <HAL_GetTick>
 800164a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	e009      	b.n	8001664 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001650:	f7ff f8e4 	bl	800081c <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b64      	cmp	r3, #100	; 0x64
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e3b1      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_RCC_OscConfig+0x93c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ef      	beq.n	8001650 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001674:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10d      	bne.n	800169c <HAL_RCC_OscConfig+0x940>
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a02      	ldr	r2, [pc, #8]	; (8001690 <HAL_RCC_OscConfig+0x934>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e03c      	b.n	8001708 <HAL_RCC_OscConfig+0x9ac>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	10908120 	.word	0x10908120
 8001698:	40007000 	.word	0x40007000
 800169c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x96a>
 80016ac:	4bc1      	ldr	r3, [pc, #772]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4ac0      	ldr	r2, [pc, #768]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	4bbe      	ldr	r3, [pc, #760]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4abd      	ldr	r2, [pc, #756]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e020      	b.n	8001708 <HAL_RCC_OscConfig+0x9ac>
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b05      	cmp	r3, #5
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x994>
 80016d6:	4bb7      	ldr	r3, [pc, #732]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4ab6      	ldr	r2, [pc, #728]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	4bb4      	ldr	r3, [pc, #720]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4ab3      	ldr	r2, [pc, #716]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0x9ac>
 80016f0:	4bb0      	ldr	r3, [pc, #704]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4aaf      	ldr	r2, [pc, #700]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	4bad      	ldr	r3, [pc, #692]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4aac      	ldr	r2, [pc, #688]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 8001702:	f023 0304 	bic.w	r3, r3, #4
 8001706:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8081 	beq.w	800181c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff f87f 	bl	800081c <HAL_GetTick>
 800171e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff f87a 	bl	800081c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	; 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e345      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001768:	2202      	movs	r2, #2
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	fa93 f2a3 	rbit	r2, r3
 800177a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001782:	601a      	str	r2, [r3, #0]
  return result;
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800178c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	095b      	lsrs	r3, r3, #5
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d102      	bne.n	80017a8 <HAL_RCC_OscConfig+0xa4c>
 80017a2:	4b84      	ldr	r3, [pc, #528]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	e013      	b.n	80017d0 <HAL_RCC_OscConfig+0xa74>
 80017a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	4b79      	ldr	r3, [pc, #484]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017d8:	2102      	movs	r1, #2
 80017da:	6011      	str	r1, [r2, #0]
 80017dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	fa92 f1a2 	rbit	r1, r2
 80017ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017f2:	6011      	str	r1, [r2, #0]
  return result;
 80017f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017f8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	fab2 f282 	clz	r2, r2
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	f002 021f 	and.w	r2, r2, #31
 800180e:	2101      	movs	r1, #1
 8001810:	fa01 f202 	lsl.w	r2, r1, r2
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d084      	beq.n	8001724 <HAL_RCC_OscConfig+0x9c8>
 800181a:	e07f      	b.n	800191c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7fe fffe 	bl	800081c <HAL_GetTick>
 8001820:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7fe fff9 	bl	800081c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e2c4      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001846:	2202      	movs	r2, #2
 8001848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800186a:	2202      	movs	r2, #2
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001872:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f2a3 	rbit	r2, r3
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001884:	601a      	str	r2, [r3, #0]
  return result;
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800188e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	b2db      	uxtb	r3, r3
 800189a:	f043 0302 	orr.w	r3, r3, #2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d102      	bne.n	80018aa <HAL_RCC_OscConfig+0xb4e>
 80018a4:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	e013      	b.n	80018d2 <HAL_RCC_OscConfig+0xb76>
 80018aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018da:	2102      	movs	r1, #2
 80018dc:	6011      	str	r1, [r2, #0]
 80018de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	fa92 f1a2 	rbit	r1, r2
 80018ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018f4:	6011      	str	r1, [r2, #0]
  return result;
 80018f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018fa:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	fab2 f282 	clz	r2, r2
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	f002 021f 	and.w	r2, r2, #31
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d184      	bne.n	8001826 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 8242 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_RCC_OscConfig+0xc58>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b08      	cmp	r3, #8
 800194c:	f000 8213 	beq.w	8001d76 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001954:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	2b02      	cmp	r3, #2
 800195e:	f040 8162 	bne.w	8001c26 <HAL_RCC_OscConfig+0xeca>
 8001962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001966:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800196a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800196e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001974:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001986:	601a      	str	r2, [r3, #0]
  return result;
 8001988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001990:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800199c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	461a      	mov	r2, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7fe ff38 	bl	800081c <HAL_GetTick>
 80019ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	e00c      	b.n	80019cc <HAL_RCC_OscConfig+0xc70>
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7fe ff30 	bl	800081c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1fd      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019de:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019f0:	601a      	str	r2, [r3, #0]
  return result;
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0xcba>
 8001a10:	4bb0      	ldr	r3, [pc, #704]	; (8001cd4 <HAL_RCC_OscConfig+0xf78>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	e027      	b.n	8001a66 <HAL_RCC_OscConfig+0xd0a>
 8001a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a28:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	fa93 f2a3 	rbit	r2, r3
 8001a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a36:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a40:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a4e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	4b9c      	ldr	r3, [pc, #624]	; (8001cd4 <HAL_RCC_OscConfig+0xf78>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a6e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a72:	6011      	str	r1, [r2, #0]
 8001a74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a78:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	fa92 f1a2 	rbit	r1, r2
 8001a82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a86:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a8a:	6011      	str	r1, [r2, #0]
  return result;
 8001a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a90:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	fab2 f282 	clz	r2, r2
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	f042 0220 	orr.w	r2, r2, #32
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f002 021f 	and.w	r2, r2, #31
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d182      	bne.n	80019b8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0xf78>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	497f      	ldr	r1, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0xf78>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ae2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aec:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001afe:	601a      	str	r2, [r3, #0]
  return result;
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b08:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7fe fe7c 	bl	800081c <HAL_GetTick>
 8001b24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b28:	e009      	b.n	8001b3e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7fe fe77 	bl	800081c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e144      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b62:	601a      	str	r2, [r3, #0]
  return result;
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_RCC_OscConfig+0xe2c>
 8001b82:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <HAL_RCC_OscConfig+0xf78>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	e027      	b.n	8001bd8 <HAL_RCC_OscConfig+0xe7c>
 8001b88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	fa93 f2a3 	rbit	r2, r3
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0xf78>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bdc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001be0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be4:	6011      	str	r1, [r2, #0]
 8001be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bea:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	fa92 f1a2 	rbit	r1, r2
 8001bf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bfc:	6011      	str	r1, [r2, #0]
  return result;
 8001bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c02:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	fab2 f282 	clz	r2, r2
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f002 021f 	and.w	r2, r2, #31
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d082      	beq.n	8001b2a <HAL_RCC_OscConfig+0xdce>
 8001c24:	e0cf      	b.n	8001dc6 <HAL_RCC_OscConfig+0x106a>
 8001c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fa93 f2a3 	rbit	r2, r3
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c4a:	601a      	str	r2, [r3, #0]
  return result;
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c54:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	461a      	mov	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7fe fdd6 	bl	800081c <HAL_GetTick>
 8001c70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe fdd1 	bl	800081c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e09e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	fa93 f2a3 	rbit	r2, r3
 8001ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001caa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cae:	601a      	str	r2, [r3, #0]
  return result;
 8001cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cb8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cba:	fab3 f383 	clz	r3, r3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	095b      	lsrs	r3, r3, #5
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d104      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xf7c>
 8001cce:	4b01      	ldr	r3, [pc, #4]	; (8001cd4 <HAL_RCC_OscConfig+0xf78>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	e029      	b.n	8001d28 <HAL_RCC_OscConfig+0xfcc>
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ce0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cea:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	fa93 f2a3 	rbit	r2, r3
 8001cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d10:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	fa93 f2a3 	rbit	r2, r3
 8001d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <HAL_RCC_OscConfig+0x1078>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d30:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d34:	6011      	str	r1, [r2, #0]
 8001d36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fa92 f1a2 	rbit	r1, r2
 8001d44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d48:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d4c:	6011      	str	r1, [r2, #0]
  return result;
 8001d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d52:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fab2 f282 	clz	r2, r2
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f042 0220 	orr.w	r2, r2, #32
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	f002 021f 	and.w	r2, r2, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d180      	bne.n	8001c76 <HAL_RCC_OscConfig+0xf1a>
 8001d74:	e027      	b.n	8001dc6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e01e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8a:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x1078>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001daa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b09e      	sub	sp, #120	; 0x78
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e162      	b.n	80020b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b90      	ldr	r3, [pc, #576]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b8d      	ldr	r3, [pc, #564]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	498b      	ldr	r1, [pc, #556]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b89      	ldr	r3, [pc, #548]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e14a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b82      	ldr	r3, [pc, #520]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	497f      	ldr	r1, [pc, #508]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80dc 	beq.w	8002004 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d13c      	bne.n	8001ece <HAL_RCC_ClockConfig+0xf6>
 8001e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e5c:	fa93 f3a3 	rbit	r3, r3
 8001e60:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d102      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xa6>
 8001e78:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	e00f      	b.n	8001e9e <HAL_RCC_ClockConfig+0xc6>
 8001e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	663b      	str	r3, [r7, #96]	; 0x60
 8001e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e9a:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ea4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ea6:	fa92 f2a2 	rbit	r2, r2
 8001eaa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0220 	orr.w	r2, r2, #32
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d17b      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e0f3      	b.n	80020b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d13c      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x178>
 8001ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x128>
 8001efa:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	e00f      	b.n	8001f20 <HAL_RCC_ClockConfig+0x148>
 8001f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
 8001f14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f1c:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f24:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f28:	fa92 f2a2 	rbit	r2, r2
 8001f2c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f30:	fab2 f282 	clz	r2, r2
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f042 0220 	orr.w	r2, r2, #32
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f002 021f 	and.w	r2, r2, #31
 8001f40:	2101      	movs	r1, #1
 8001f42:	fa01 f202 	lsl.w	r2, r1, r2
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d13a      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0b2      	b.n	80020b6 <HAL_RCC_ClockConfig+0x2de>
 8001f50:	2302      	movs	r3, #2
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x1a0>
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e00d      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1bc>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	2302      	movs	r3, #2
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	2202      	movs	r2, #2
 8001f96:	61ba      	str	r2, [r7, #24]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	fa92 f2a2 	rbit	r2, r2
 8001f9e:	617a      	str	r2, [r7, #20]
  return result;
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	fab2 f282 	clz	r2, r2
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f042 0220 	orr.w	r2, r2, #32
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	f002 021f 	and.w	r2, r2, #31
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e079      	b.n	80020b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	491a      	ldr	r1, [pc, #104]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fc22 	bl	800081c <HAL_GetTick>
 8001fd8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe fc1e 	bl	800081c <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e061      	b.n	80020b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_ClockConfig+0x260>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d214      	bcs.n	800203c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0207 	bic.w	r2, r3, #7
 800201a:	4906      	ldr	r1, [pc, #24]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_RCC_ClockConfig+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e040      	b.n	80020b6 <HAL_RCC_ClockConfig+0x2de>
 8002034:	40022000 	.word	0x40022000
 8002038:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d008      	beq.n	800205a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <HAL_RCC_ClockConfig+0x2e8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	491a      	ldr	r1, [pc, #104]	; (80020c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002056:	4313      	orrs	r3, r2
 8002058:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4912      	ldr	r1, [pc, #72]	; (80020c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800207a:	f000 f829 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800207e:	4601      	mov	r1, r0
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_RCC_ClockConfig+0x2e8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002088:	22f0      	movs	r2, #240	; 0xf0
 800208a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	fa92 f2a2 	rbit	r2, r2
 8002092:	60fa      	str	r2, [r7, #12]
  return result;
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	fab2 f282 	clz	r2, r2
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	40d3      	lsrs	r3, r2
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x2ec>)
 80020a0:	5cd3      	ldrb	r3, [r2, r3]
 80020a2:	fa21 f303 	lsr.w	r3, r1, r3
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_RCC_ClockConfig+0x2f0>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_RCC_ClockConfig+0x2f4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe fb70 	bl	8000794 <HAL_InitTick>
  
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3778      	adds	r7, #120	; 0x78
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08003a18 	.word	0x08003a18
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b08b      	sub	sp, #44	; 0x2c
 80020d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	2300      	movs	r3, #0
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x30>
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x36>
 80020fe:	e03c      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002100:	4b24      	ldr	r3, [pc, #144]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002102:	623b      	str	r3, [r7, #32]
      break;
 8002104:	e03c      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800210c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002110:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	fa92 f2a2 	rbit	r2, r2
 8002118:	607a      	str	r2, [r7, #4]
  return result;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	40d3      	lsrs	r3, r2
 8002124:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800212a:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_GetSysClockFreq+0xc0>)
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	220f      	movs	r2, #15
 8002134:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	fa92 f2a2 	rbit	r2, r2
 800213c:	60fa      	str	r2, [r7, #12]
  return result;
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	fab2 f282 	clz	r2, r2
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	40d3      	lsrs	r3, r2
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_RCC_GetSysClockFreq+0xcc>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc4>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
 8002168:	e004      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	623b      	str	r3, [r7, #32]
      break;
 8002178:	e002      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetSysClockFreq+0xc4>)
 800217c:	623b      	str	r3, [r7, #32]
      break;
 800217e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002180:	6a3b      	ldr	r3, [r7, #32]
}
 8002182:	4618      	mov	r0, r3
 8002184:	372c      	adds	r7, #44	; 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	08003a30 	.word	0x08003a30
 800219c:	08003a40 	.word	0x08003a40
 80021a0:	003d0900 	.word	0x003d0900

080021a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021aa:	681b      	ldr	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000000 	.word	0x20000000

080021bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021c2:	f7ff ffef 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 80021c6:	4601      	mov	r1, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	603a      	str	r2, [r7, #0]
  return result;
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	40d3      	lsrs	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08003a28 	.word	0x08003a28

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002206:	f7ff ffcd 	bl	80021a4 <HAL_RCC_GetHCLKFreq>
 800220a:	4601      	mov	r1, r0
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002214:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002218:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	fa92 f2a2 	rbit	r2, r2
 8002220:	603a      	str	r2, [r7, #0]
  return result;
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	40d3      	lsrs	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_RCC_GetPCLK2Freq+0x40>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	08003a28 	.word	0x08003a28

08002244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e040      	b.n	80022d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe f930 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	; 0x24
 8002270:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8b6 	bl	80023f4 <UART_SetConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e022      	b.n	80022d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f9e0 	bl	8002660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fa67 	bl	80027a4 <UART_CheckIdleState>
 80022d6:	4603      	mov	r3, r0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d178      	bne.n	80023ea <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_UART_Transmit+0x24>
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e071      	b.n	80023ec <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2221      	movs	r2, #33	; 0x21
 8002314:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fa81 	bl	800081c <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002334:	d108      	bne.n	8002348 <HAL_UART_Transmit+0x68>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e003      	b.n	8002350 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002350:	e030      	b.n	80023b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2200      	movs	r2, #0
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fac9 	bl	80028f4 <UART_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e03c      	b.n	80023ec <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10b      	bne.n	8002390 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	881a      	ldrh	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	b292      	uxth	r2, r2
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3302      	adds	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	e008      	b.n	80023a2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b292      	uxth	r2, r2
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1c8      	bne.n	8002352 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2200      	movs	r2, #0
 80023c8:	2140      	movs	r1, #64	; 0x40
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fa92 	bl	80028f4 <UART_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e005      	b.n	80023ec <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	e000      	b.n	80023ec <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
  }
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b8a      	ldr	r3, [pc, #552]	; (8002648 <UART_SetConfig+0x254>)
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	6979      	ldr	r1, [r7, #20]
 8002428:	430b      	orrs	r3, r1
 800242a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	430a      	orrs	r2, r1
 8002464:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a78      	ldr	r2, [pc, #480]	; (800264c <UART_SetConfig+0x258>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d120      	bne.n	80024b2 <UART_SetConfig+0xbe>
 8002470:	4b77      	ldr	r3, [pc, #476]	; (8002650 <UART_SetConfig+0x25c>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b03      	cmp	r3, #3
 800247a:	d817      	bhi.n	80024ac <UART_SetConfig+0xb8>
 800247c:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <UART_SetConfig+0x90>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	08002495 	.word	0x08002495
 8002488:	080024a1 	.word	0x080024a1
 800248c:	080024a7 	.word	0x080024a7
 8002490:	0800249b 	.word	0x0800249b
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
 8002498:	e01d      	b.n	80024d6 <UART_SetConfig+0xe2>
 800249a:	2302      	movs	r3, #2
 800249c:	77fb      	strb	r3, [r7, #31]
 800249e:	e01a      	b.n	80024d6 <UART_SetConfig+0xe2>
 80024a0:	2304      	movs	r3, #4
 80024a2:	77fb      	strb	r3, [r7, #31]
 80024a4:	e017      	b.n	80024d6 <UART_SetConfig+0xe2>
 80024a6:	2308      	movs	r3, #8
 80024a8:	77fb      	strb	r3, [r7, #31]
 80024aa:	e014      	b.n	80024d6 <UART_SetConfig+0xe2>
 80024ac:	2310      	movs	r3, #16
 80024ae:	77fb      	strb	r3, [r7, #31]
 80024b0:	e011      	b.n	80024d6 <UART_SetConfig+0xe2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a67      	ldr	r2, [pc, #412]	; (8002654 <UART_SetConfig+0x260>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <UART_SetConfig+0xce>
 80024bc:	2300      	movs	r3, #0
 80024be:	77fb      	strb	r3, [r7, #31]
 80024c0:	e009      	b.n	80024d6 <UART_SetConfig+0xe2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a64      	ldr	r2, [pc, #400]	; (8002658 <UART_SetConfig+0x264>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d102      	bne.n	80024d2 <UART_SetConfig+0xde>
 80024cc:	2300      	movs	r3, #0
 80024ce:	77fb      	strb	r3, [r7, #31]
 80024d0:	e001      	b.n	80024d6 <UART_SetConfig+0xe2>
 80024d2:	2310      	movs	r3, #16
 80024d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024de:	d15a      	bne.n	8002596 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d827      	bhi.n	8002536 <UART_SetConfig+0x142>
 80024e6:	a201      	add	r2, pc, #4	; (adr r2, 80024ec <UART_SetConfig+0xf8>)
 80024e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ec:	08002511 	.word	0x08002511
 80024f0:	08002519 	.word	0x08002519
 80024f4:	08002521 	.word	0x08002521
 80024f8:	08002537 	.word	0x08002537
 80024fc:	08002527 	.word	0x08002527
 8002500:	08002537 	.word	0x08002537
 8002504:	08002537 	.word	0x08002537
 8002508:	08002537 	.word	0x08002537
 800250c:	0800252f 	.word	0x0800252f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002510:	f7ff fe54 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 8002514:	61b8      	str	r0, [r7, #24]
        break;
 8002516:	e013      	b.n	8002540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002518:	f7ff fe72 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 800251c:	61b8      	str	r0, [r7, #24]
        break;
 800251e:	e00f      	b.n	8002540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <UART_SetConfig+0x268>)
 8002522:	61bb      	str	r3, [r7, #24]
        break;
 8002524:	e00c      	b.n	8002540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002526:	f7ff fdd3 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 800252a:	61b8      	str	r0, [r7, #24]
        break;
 800252c:	e008      	b.n	8002540 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800252e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002532:	61bb      	str	r3, [r7, #24]
        break;
 8002534:	e004      	b.n	8002540 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	77bb      	strb	r3, [r7, #30]
        break;
 800253e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d074      	beq.n	8002630 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	005a      	lsls	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	441a      	add	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	fbb2 f3f3 	udiv	r3, r2, r3
 800255a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	d916      	bls.n	8002590 <UART_SetConfig+0x19c>
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d212      	bcs.n	8002590 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f023 030f 	bic.w	r3, r3, #15
 8002572:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	b29b      	uxth	r3, r3
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	b29a      	uxth	r2, r3
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	4313      	orrs	r3, r2
 8002584:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	89fa      	ldrh	r2, [r7, #14]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	e04f      	b.n	8002630 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	77bb      	strb	r3, [r7, #30]
 8002594:	e04c      	b.n	8002630 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002596:	7ffb      	ldrb	r3, [r7, #31]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d828      	bhi.n	80025ee <UART_SetConfig+0x1fa>
 800259c:	a201      	add	r2, pc, #4	; (adr r2, 80025a4 <UART_SetConfig+0x1b0>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025c9 	.word	0x080025c9
 80025a8:	080025d1 	.word	0x080025d1
 80025ac:	080025d9 	.word	0x080025d9
 80025b0:	080025ef 	.word	0x080025ef
 80025b4:	080025df 	.word	0x080025df
 80025b8:	080025ef 	.word	0x080025ef
 80025bc:	080025ef 	.word	0x080025ef
 80025c0:	080025ef 	.word	0x080025ef
 80025c4:	080025e7 	.word	0x080025e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025c8:	f7ff fdf8 	bl	80021bc <HAL_RCC_GetPCLK1Freq>
 80025cc:	61b8      	str	r0, [r7, #24]
        break;
 80025ce:	e013      	b.n	80025f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025d0:	f7ff fe16 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 80025d4:	61b8      	str	r0, [r7, #24]
        break;
 80025d6:	e00f      	b.n	80025f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <UART_SetConfig+0x268>)
 80025da:	61bb      	str	r3, [r7, #24]
        break;
 80025dc:	e00c      	b.n	80025f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025de:	f7ff fd77 	bl	80020d0 <HAL_RCC_GetSysClockFreq>
 80025e2:	61b8      	str	r0, [r7, #24]
        break;
 80025e4:	e008      	b.n	80025f8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ea:	61bb      	str	r3, [r7, #24]
        break;
 80025ec:	e004      	b.n	80025f8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	77bb      	strb	r3, [r7, #30]
        break;
 80025f6:	bf00      	nop
    }

    if (pclk != 0U)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	085a      	lsrs	r2, r3, #1
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	441a      	add	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d909      	bls.n	800262c <UART_SetConfig+0x238>
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d205      	bcs.n	800262c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	e001      	b.n	8002630 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800263c:	7fbb      	ldrb	r3, [r7, #30]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	efff69f3 	.word	0xefff69f3
 800264c:	40013800 	.word	0x40013800
 8002650:	40021000 	.word	0x40021000
 8002654:	40004400 	.word	0x40004400
 8002658:	40004800 	.word	0x40004800
 800265c:	007a1200 	.word	0x007a1200

08002660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01a      	beq.n	8002776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800275e:	d10a      	bne.n	8002776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	605a      	str	r2, [r3, #4]
  }
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b098      	sub	sp, #96	; 0x60
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027b4:	f7fe f832 	bl	800081c <HAL_GetTick>
 80027b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d12e      	bne.n	8002826 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d0:	2200      	movs	r2, #0
 80027d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f88c 	bl	80028f4 <UART_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d021      	beq.n	8002826 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	e853 3f00 	ldrex	r3, [r3]
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027f6:	653b      	str	r3, [r7, #80]	; 0x50
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
 8002802:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002808:	e841 2300 	strex	r3, r2, [r1]
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800280e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1e6      	bne.n	80027e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e062      	b.n	80028ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d149      	bne.n	80028c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f856 	bl	80028f4 <UART_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d03c      	beq.n	80028c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	623b      	str	r3, [r7, #32]
   return(result);
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
 800286e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002874:	e841 2300 	strex	r3, r2, [r1]
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e6      	bne.n	800284e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3308      	adds	r3, #8
 8002886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3308      	adds	r3, #8
 800289e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028a0:	61fa      	str	r2, [r7, #28]
 80028a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	69b9      	ldr	r1, [r7, #24]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	617b      	str	r3, [r7, #20]
   return(result);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e5      	bne.n	8002880 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e011      	b.n	80028ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3758      	adds	r7, #88	; 0x58
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002904:	e049      	b.n	800299a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d045      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7fd ff85 	bl	800081c <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <UART_WaitOnFlagUntilTimeout+0x30>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e048      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d031      	beq.n	800299a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b08      	cmp	r3, #8
 8002942:	d110      	bne.n	8002966 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2208      	movs	r2, #8
 800294a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f838 	bl	80029c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2208      	movs	r2, #8
 8002956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e029      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002974:	d111      	bne.n	800299a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f81e 	bl	80029c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e00f      	b.n	80029ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4013      	ands	r3, r2
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d0a6      	beq.n	8002906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b095      	sub	sp, #84	; 0x54
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e8:	643b      	str	r3, [r7, #64]	; 0x40
 80029ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e6      	bne.n	80029ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3308      	adds	r3, #8
 8002a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	e853 3f00 	ldrex	r3, [r3]
 8002a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3308      	adds	r3, #8
 8002a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a24:	e841 2300 	strex	r3, r2, [r1]
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e5      	bne.n	80029fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d118      	bne.n	8002a6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f023 0310 	bic.w	r3, r3, #16
 8002a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6979      	ldr	r1, [r7, #20]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	613b      	str	r3, [r7, #16]
   return(result);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e6      	bne.n	8002a38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002a7e:	bf00      	nop
 8002a80:	3754      	adds	r7, #84	; 0x54
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <std>:
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	b510      	push	{r4, lr}
 8002a90:	4604      	mov	r4, r0
 8002a92:	e9c0 3300 	strd	r3, r3, [r0]
 8002a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a9a:	6083      	str	r3, [r0, #8]
 8002a9c:	8181      	strh	r1, [r0, #12]
 8002a9e:	6643      	str	r3, [r0, #100]	; 0x64
 8002aa0:	81c2      	strh	r2, [r0, #14]
 8002aa2:	6183      	str	r3, [r0, #24]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	305c      	adds	r0, #92	; 0x5c
 8002aaa:	f000 f9f7 	bl	8002e9c <memset>
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <std+0x58>)
 8002ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <std+0x5c>)
 8002ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <std+0x60>)
 8002ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <std+0x64>)
 8002abc:	6323      	str	r3, [r4, #48]	; 0x30
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <std+0x68>)
 8002ac0:	6224      	str	r4, [r4, #32]
 8002ac2:	429c      	cmp	r4, r3
 8002ac4:	d006      	beq.n	8002ad4 <std+0x48>
 8002ac6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002aca:	4294      	cmp	r4, r2
 8002acc:	d002      	beq.n	8002ad4 <std+0x48>
 8002ace:	33d0      	adds	r3, #208	; 0xd0
 8002ad0:	429c      	cmp	r4, r3
 8002ad2:	d105      	bne.n	8002ae0 <std+0x54>
 8002ad4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002adc:	f000 ba56 	b.w	8002f8c <__retarget_lock_init_recursive>
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	08002ced 	.word	0x08002ced
 8002ae8:	08002d0f 	.word	0x08002d0f
 8002aec:	08002d47 	.word	0x08002d47
 8002af0:	08002d6b 	.word	0x08002d6b
 8002af4:	20000114 	.word	0x20000114

08002af8 <stdio_exit_handler>:
 8002af8:	4a02      	ldr	r2, [pc, #8]	; (8002b04 <stdio_exit_handler+0xc>)
 8002afa:	4903      	ldr	r1, [pc, #12]	; (8002b08 <stdio_exit_handler+0x10>)
 8002afc:	4803      	ldr	r0, [pc, #12]	; (8002b0c <stdio_exit_handler+0x14>)
 8002afe:	f000 b869 	b.w	8002bd4 <_fwalk_sglue>
 8002b02:	bf00      	nop
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	08003839 	.word	0x08003839
 8002b0c:	20000018 	.word	0x20000018

08002b10 <cleanup_stdio>:
 8002b10:	6841      	ldr	r1, [r0, #4]
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <cleanup_stdio+0x34>)
 8002b14:	4299      	cmp	r1, r3
 8002b16:	b510      	push	{r4, lr}
 8002b18:	4604      	mov	r4, r0
 8002b1a:	d001      	beq.n	8002b20 <cleanup_stdio+0x10>
 8002b1c:	f000 fe8c 	bl	8003838 <_fflush_r>
 8002b20:	68a1      	ldr	r1, [r4, #8]
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <cleanup_stdio+0x38>)
 8002b24:	4299      	cmp	r1, r3
 8002b26:	d002      	beq.n	8002b2e <cleanup_stdio+0x1e>
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 fe85 	bl	8003838 <_fflush_r>
 8002b2e:	68e1      	ldr	r1, [r4, #12]
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <cleanup_stdio+0x3c>)
 8002b32:	4299      	cmp	r1, r3
 8002b34:	d004      	beq.n	8002b40 <cleanup_stdio+0x30>
 8002b36:	4620      	mov	r0, r4
 8002b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b3c:	f000 be7c 	b.w	8003838 <_fflush_r>
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	bf00      	nop
 8002b44:	20000114 	.word	0x20000114
 8002b48:	2000017c 	.word	0x2000017c
 8002b4c:	200001e4 	.word	0x200001e4

08002b50 <global_stdio_init.part.0>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <global_stdio_init.part.0+0x30>)
 8002b54:	4c0b      	ldr	r4, [pc, #44]	; (8002b84 <global_stdio_init.part.0+0x34>)
 8002b56:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <global_stdio_init.part.0+0x38>)
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2104      	movs	r1, #4
 8002b60:	f7ff ff94 	bl	8002a8c <std>
 8002b64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2109      	movs	r1, #9
 8002b6c:	f7ff ff8e 	bl	8002a8c <std>
 8002b70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b74:	2202      	movs	r2, #2
 8002b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b7a:	2112      	movs	r1, #18
 8002b7c:	f7ff bf86 	b.w	8002a8c <std>
 8002b80:	2000024c 	.word	0x2000024c
 8002b84:	20000114 	.word	0x20000114
 8002b88:	08002af9 	.word	0x08002af9

08002b8c <__sfp_lock_acquire>:
 8002b8c:	4801      	ldr	r0, [pc, #4]	; (8002b94 <__sfp_lock_acquire+0x8>)
 8002b8e:	f000 b9fe 	b.w	8002f8e <__retarget_lock_acquire_recursive>
 8002b92:	bf00      	nop
 8002b94:	20000255 	.word	0x20000255

08002b98 <__sfp_lock_release>:
 8002b98:	4801      	ldr	r0, [pc, #4]	; (8002ba0 <__sfp_lock_release+0x8>)
 8002b9a:	f000 b9f9 	b.w	8002f90 <__retarget_lock_release_recursive>
 8002b9e:	bf00      	nop
 8002ba0:	20000255 	.word	0x20000255

08002ba4 <__sinit>:
 8002ba4:	b510      	push	{r4, lr}
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	f7ff fff0 	bl	8002b8c <__sfp_lock_acquire>
 8002bac:	6a23      	ldr	r3, [r4, #32]
 8002bae:	b11b      	cbz	r3, 8002bb8 <__sinit+0x14>
 8002bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bb4:	f7ff bff0 	b.w	8002b98 <__sfp_lock_release>
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__sinit+0x28>)
 8002bba:	6223      	str	r3, [r4, #32]
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <__sinit+0x2c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f5      	bne.n	8002bb0 <__sinit+0xc>
 8002bc4:	f7ff ffc4 	bl	8002b50 <global_stdio_init.part.0>
 8002bc8:	e7f2      	b.n	8002bb0 <__sinit+0xc>
 8002bca:	bf00      	nop
 8002bcc:	08002b11 	.word	0x08002b11
 8002bd0:	2000024c 	.word	0x2000024c

08002bd4 <_fwalk_sglue>:
 8002bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bd8:	4607      	mov	r7, r0
 8002bda:	4688      	mov	r8, r1
 8002bdc:	4614      	mov	r4, r2
 8002bde:	2600      	movs	r6, #0
 8002be0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002be4:	f1b9 0901 	subs.w	r9, r9, #1
 8002be8:	d505      	bpl.n	8002bf6 <_fwalk_sglue+0x22>
 8002bea:	6824      	ldr	r4, [r4, #0]
 8002bec:	2c00      	cmp	r4, #0
 8002bee:	d1f7      	bne.n	8002be0 <_fwalk_sglue+0xc>
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bf6:	89ab      	ldrh	r3, [r5, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d907      	bls.n	8002c0c <_fwalk_sglue+0x38>
 8002bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c00:	3301      	adds	r3, #1
 8002c02:	d003      	beq.n	8002c0c <_fwalk_sglue+0x38>
 8002c04:	4629      	mov	r1, r5
 8002c06:	4638      	mov	r0, r7
 8002c08:	47c0      	blx	r8
 8002c0a:	4306      	orrs	r6, r0
 8002c0c:	3568      	adds	r5, #104	; 0x68
 8002c0e:	e7e9      	b.n	8002be4 <_fwalk_sglue+0x10>

08002c10 <iprintf>:
 8002c10:	b40f      	push	{r0, r1, r2, r3}
 8002c12:	b507      	push	{r0, r1, r2, lr}
 8002c14:	4906      	ldr	r1, [pc, #24]	; (8002c30 <iprintf+0x20>)
 8002c16:	ab04      	add	r3, sp, #16
 8002c18:	6808      	ldr	r0, [r1, #0]
 8002c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c1e:	6881      	ldr	r1, [r0, #8]
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	f000 fad9 	bl	80031d8 <_vfiprintf_r>
 8002c26:	b003      	add	sp, #12
 8002c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c2c:	b004      	add	sp, #16
 8002c2e:	4770      	bx	lr
 8002c30:	20000064 	.word	0x20000064

08002c34 <_puts_r>:
 8002c34:	6a03      	ldr	r3, [r0, #32]
 8002c36:	b570      	push	{r4, r5, r6, lr}
 8002c38:	6884      	ldr	r4, [r0, #8]
 8002c3a:	4605      	mov	r5, r0
 8002c3c:	460e      	mov	r6, r1
 8002c3e:	b90b      	cbnz	r3, 8002c44 <_puts_r+0x10>
 8002c40:	f7ff ffb0 	bl	8002ba4 <__sinit>
 8002c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c46:	07db      	lsls	r3, r3, #31
 8002c48:	d405      	bmi.n	8002c56 <_puts_r+0x22>
 8002c4a:	89a3      	ldrh	r3, [r4, #12]
 8002c4c:	0598      	lsls	r0, r3, #22
 8002c4e:	d402      	bmi.n	8002c56 <_puts_r+0x22>
 8002c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c52:	f000 f99c 	bl	8002f8e <__retarget_lock_acquire_recursive>
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	0719      	lsls	r1, r3, #28
 8002c5a:	d513      	bpl.n	8002c84 <_puts_r+0x50>
 8002c5c:	6923      	ldr	r3, [r4, #16]
 8002c5e:	b18b      	cbz	r3, 8002c84 <_puts_r+0x50>
 8002c60:	3e01      	subs	r6, #1
 8002c62:	68a3      	ldr	r3, [r4, #8]
 8002c64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	60a3      	str	r3, [r4, #8]
 8002c6c:	b9e9      	cbnz	r1, 8002caa <_puts_r+0x76>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da2e      	bge.n	8002cd0 <_puts_r+0x9c>
 8002c72:	4622      	mov	r2, r4
 8002c74:	210a      	movs	r1, #10
 8002c76:	4628      	mov	r0, r5
 8002c78:	f000 f87b 	bl	8002d72 <__swbuf_r>
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d007      	beq.n	8002c90 <_puts_r+0x5c>
 8002c80:	250a      	movs	r5, #10
 8002c82:	e007      	b.n	8002c94 <_puts_r+0x60>
 8002c84:	4621      	mov	r1, r4
 8002c86:	4628      	mov	r0, r5
 8002c88:	f000 f8b0 	bl	8002dec <__swsetup_r>
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d0e7      	beq.n	8002c60 <_puts_r+0x2c>
 8002c90:	f04f 35ff 	mov.w	r5, #4294967295
 8002c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c96:	07da      	lsls	r2, r3, #31
 8002c98:	d405      	bmi.n	8002ca6 <_puts_r+0x72>
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	059b      	lsls	r3, r3, #22
 8002c9e:	d402      	bmi.n	8002ca6 <_puts_r+0x72>
 8002ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ca2:	f000 f975 	bl	8002f90 <__retarget_lock_release_recursive>
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da04      	bge.n	8002cb8 <_puts_r+0x84>
 8002cae:	69a2      	ldr	r2, [r4, #24]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dc06      	bgt.n	8002cc2 <_puts_r+0x8e>
 8002cb4:	290a      	cmp	r1, #10
 8002cb6:	d004      	beq.n	8002cc2 <_puts_r+0x8e>
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	6022      	str	r2, [r4, #0]
 8002cbe:	7019      	strb	r1, [r3, #0]
 8002cc0:	e7cf      	b.n	8002c62 <_puts_r+0x2e>
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f000 f854 	bl	8002d72 <__swbuf_r>
 8002cca:	3001      	adds	r0, #1
 8002ccc:	d1c9      	bne.n	8002c62 <_puts_r+0x2e>
 8002cce:	e7df      	b.n	8002c90 <_puts_r+0x5c>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	250a      	movs	r5, #10
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	6022      	str	r2, [r4, #0]
 8002cd8:	701d      	strb	r5, [r3, #0]
 8002cda:	e7db      	b.n	8002c94 <_puts_r+0x60>

08002cdc <puts>:
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <puts+0xc>)
 8002cde:	4601      	mov	r1, r0
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	f7ff bfa7 	b.w	8002c34 <_puts_r>
 8002ce6:	bf00      	nop
 8002ce8:	20000064 	.word	0x20000064

08002cec <__sread>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	460c      	mov	r4, r1
 8002cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf4:	f000 f8fc 	bl	8002ef0 <_read_r>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	bfab      	itete	ge
 8002cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8002d00:	181b      	addge	r3, r3, r0
 8002d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d06:	bfac      	ite	ge
 8002d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d0a:	81a3      	strhlt	r3, [r4, #12]
 8002d0c:	bd10      	pop	{r4, pc}

08002d0e <__swrite>:
 8002d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d12:	461f      	mov	r7, r3
 8002d14:	898b      	ldrh	r3, [r1, #12]
 8002d16:	05db      	lsls	r3, r3, #23
 8002d18:	4605      	mov	r5, r0
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	4616      	mov	r6, r2
 8002d1e:	d505      	bpl.n	8002d2c <__swrite+0x1e>
 8002d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d24:	2302      	movs	r3, #2
 8002d26:	2200      	movs	r2, #0
 8002d28:	f000 f8d0 	bl	8002ecc <_lseek_r>
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d36:	81a3      	strh	r3, [r4, #12]
 8002d38:	4632      	mov	r2, r6
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d42:	f000 b8e7 	b.w	8002f14 <_write_r>

08002d46 <__sseek>:
 8002d46:	b510      	push	{r4, lr}
 8002d48:	460c      	mov	r4, r1
 8002d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d4e:	f000 f8bd 	bl	8002ecc <_lseek_r>
 8002d52:	1c43      	adds	r3, r0, #1
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	bf15      	itete	ne
 8002d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d62:	81a3      	strheq	r3, [r4, #12]
 8002d64:	bf18      	it	ne
 8002d66:	81a3      	strhne	r3, [r4, #12]
 8002d68:	bd10      	pop	{r4, pc}

08002d6a <__sclose>:
 8002d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6e:	f000 b89d 	b.w	8002eac <_close_r>

08002d72 <__swbuf_r>:
 8002d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d74:	460e      	mov	r6, r1
 8002d76:	4614      	mov	r4, r2
 8002d78:	4605      	mov	r5, r0
 8002d7a:	b118      	cbz	r0, 8002d84 <__swbuf_r+0x12>
 8002d7c:	6a03      	ldr	r3, [r0, #32]
 8002d7e:	b90b      	cbnz	r3, 8002d84 <__swbuf_r+0x12>
 8002d80:	f7ff ff10 	bl	8002ba4 <__sinit>
 8002d84:	69a3      	ldr	r3, [r4, #24]
 8002d86:	60a3      	str	r3, [r4, #8]
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	071a      	lsls	r2, r3, #28
 8002d8c:	d525      	bpl.n	8002dda <__swbuf_r+0x68>
 8002d8e:	6923      	ldr	r3, [r4, #16]
 8002d90:	b31b      	cbz	r3, 8002dda <__swbuf_r+0x68>
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	6922      	ldr	r2, [r4, #16]
 8002d96:	1a98      	subs	r0, r3, r2
 8002d98:	6963      	ldr	r3, [r4, #20]
 8002d9a:	b2f6      	uxtb	r6, r6
 8002d9c:	4283      	cmp	r3, r0
 8002d9e:	4637      	mov	r7, r6
 8002da0:	dc04      	bgt.n	8002dac <__swbuf_r+0x3a>
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 fd47 	bl	8003838 <_fflush_r>
 8002daa:	b9e0      	cbnz	r0, 8002de6 <__swbuf_r+0x74>
 8002dac:	68a3      	ldr	r3, [r4, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60a3      	str	r3, [r4, #8]
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	6022      	str	r2, [r4, #0]
 8002db8:	701e      	strb	r6, [r3, #0]
 8002dba:	6962      	ldr	r2, [r4, #20]
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d004      	beq.n	8002dcc <__swbuf_r+0x5a>
 8002dc2:	89a3      	ldrh	r3, [r4, #12]
 8002dc4:	07db      	lsls	r3, r3, #31
 8002dc6:	d506      	bpl.n	8002dd6 <__swbuf_r+0x64>
 8002dc8:	2e0a      	cmp	r6, #10
 8002dca:	d104      	bne.n	8002dd6 <__swbuf_r+0x64>
 8002dcc:	4621      	mov	r1, r4
 8002dce:	4628      	mov	r0, r5
 8002dd0:	f000 fd32 	bl	8003838 <_fflush_r>
 8002dd4:	b938      	cbnz	r0, 8002de6 <__swbuf_r+0x74>
 8002dd6:	4638      	mov	r0, r7
 8002dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dda:	4621      	mov	r1, r4
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f000 f805 	bl	8002dec <__swsetup_r>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d0d5      	beq.n	8002d92 <__swbuf_r+0x20>
 8002de6:	f04f 37ff 	mov.w	r7, #4294967295
 8002dea:	e7f4      	b.n	8002dd6 <__swbuf_r+0x64>

08002dec <__swsetup_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <__swsetup_r+0xac>)
 8002df0:	4605      	mov	r5, r0
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	460c      	mov	r4, r1
 8002df6:	b118      	cbz	r0, 8002e00 <__swsetup_r+0x14>
 8002df8:	6a03      	ldr	r3, [r0, #32]
 8002dfa:	b90b      	cbnz	r3, 8002e00 <__swsetup_r+0x14>
 8002dfc:	f7ff fed2 	bl	8002ba4 <__sinit>
 8002e00:	89a3      	ldrh	r3, [r4, #12]
 8002e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e06:	0718      	lsls	r0, r3, #28
 8002e08:	d422      	bmi.n	8002e50 <__swsetup_r+0x64>
 8002e0a:	06d9      	lsls	r1, r3, #27
 8002e0c:	d407      	bmi.n	8002e1e <__swsetup_r+0x32>
 8002e0e:	2309      	movs	r3, #9
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e16:	81a3      	strh	r3, [r4, #12]
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	e034      	b.n	8002e88 <__swsetup_r+0x9c>
 8002e1e:	0758      	lsls	r0, r3, #29
 8002e20:	d512      	bpl.n	8002e48 <__swsetup_r+0x5c>
 8002e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e24:	b141      	cbz	r1, 8002e38 <__swsetup_r+0x4c>
 8002e26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e2a:	4299      	cmp	r1, r3
 8002e2c:	d002      	beq.n	8002e34 <__swsetup_r+0x48>
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f000 f8b0 	bl	8002f94 <_free_r>
 8002e34:	2300      	movs	r3, #0
 8002e36:	6363      	str	r3, [r4, #52]	; 0x34
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e3e:	81a3      	strh	r3, [r4, #12]
 8002e40:	2300      	movs	r3, #0
 8002e42:	6063      	str	r3, [r4, #4]
 8002e44:	6923      	ldr	r3, [r4, #16]
 8002e46:	6023      	str	r3, [r4, #0]
 8002e48:	89a3      	ldrh	r3, [r4, #12]
 8002e4a:	f043 0308 	orr.w	r3, r3, #8
 8002e4e:	81a3      	strh	r3, [r4, #12]
 8002e50:	6923      	ldr	r3, [r4, #16]
 8002e52:	b94b      	cbnz	r3, 8002e68 <__swsetup_r+0x7c>
 8002e54:	89a3      	ldrh	r3, [r4, #12]
 8002e56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5e:	d003      	beq.n	8002e68 <__swsetup_r+0x7c>
 8002e60:	4621      	mov	r1, r4
 8002e62:	4628      	mov	r0, r5
 8002e64:	f000 fd36 	bl	80038d4 <__smakebuf_r>
 8002e68:	89a0      	ldrh	r0, [r4, #12]
 8002e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e6e:	f010 0301 	ands.w	r3, r0, #1
 8002e72:	d00a      	beq.n	8002e8a <__swsetup_r+0x9e>
 8002e74:	2300      	movs	r3, #0
 8002e76:	60a3      	str	r3, [r4, #8]
 8002e78:	6963      	ldr	r3, [r4, #20]
 8002e7a:	425b      	negs	r3, r3
 8002e7c:	61a3      	str	r3, [r4, #24]
 8002e7e:	6923      	ldr	r3, [r4, #16]
 8002e80:	b943      	cbnz	r3, 8002e94 <__swsetup_r+0xa8>
 8002e82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e86:	d1c4      	bne.n	8002e12 <__swsetup_r+0x26>
 8002e88:	bd38      	pop	{r3, r4, r5, pc}
 8002e8a:	0781      	lsls	r1, r0, #30
 8002e8c:	bf58      	it	pl
 8002e8e:	6963      	ldrpl	r3, [r4, #20]
 8002e90:	60a3      	str	r3, [r4, #8]
 8002e92:	e7f4      	b.n	8002e7e <__swsetup_r+0x92>
 8002e94:	2000      	movs	r0, #0
 8002e96:	e7f7      	b.n	8002e88 <__swsetup_r+0x9c>
 8002e98:	20000064 	.word	0x20000064

08002e9c <memset>:
 8002e9c:	4402      	add	r2, r0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d100      	bne.n	8002ea6 <memset+0xa>
 8002ea4:	4770      	bx	lr
 8002ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eaa:	e7f9      	b.n	8002ea0 <memset+0x4>

08002eac <_close_r>:
 8002eac:	b538      	push	{r3, r4, r5, lr}
 8002eae:	4d06      	ldr	r5, [pc, #24]	; (8002ec8 <_close_r+0x1c>)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	602b      	str	r3, [r5, #0]
 8002eb8:	f7fd fbaf 	bl	800061a <_close>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d102      	bne.n	8002ec6 <_close_r+0x1a>
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	b103      	cbz	r3, 8002ec6 <_close_r+0x1a>
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	20000250 	.word	0x20000250

08002ecc <_lseek_r>:
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	4d07      	ldr	r5, [pc, #28]	; (8002eec <_lseek_r+0x20>)
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	4608      	mov	r0, r1
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	602a      	str	r2, [r5, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f7fd fbc4 	bl	8000668 <_lseek>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d102      	bne.n	8002eea <_lseek_r+0x1e>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	b103      	cbz	r3, 8002eea <_lseek_r+0x1e>
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
 8002eec:	20000250 	.word	0x20000250

08002ef0 <_read_r>:
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4d07      	ldr	r5, [pc, #28]	; (8002f10 <_read_r+0x20>)
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	4608      	mov	r0, r1
 8002ef8:	4611      	mov	r1, r2
 8002efa:	2200      	movs	r2, #0
 8002efc:	602a      	str	r2, [r5, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f7fd fb52 	bl	80005a8 <_read>
 8002f04:	1c43      	adds	r3, r0, #1
 8002f06:	d102      	bne.n	8002f0e <_read_r+0x1e>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	b103      	cbz	r3, 8002f0e <_read_r+0x1e>
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	bd38      	pop	{r3, r4, r5, pc}
 8002f10:	20000250 	.word	0x20000250

08002f14 <_write_r>:
 8002f14:	b538      	push	{r3, r4, r5, lr}
 8002f16:	4d07      	ldr	r5, [pc, #28]	; (8002f34 <_write_r+0x20>)
 8002f18:	4604      	mov	r4, r0
 8002f1a:	4608      	mov	r0, r1
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	2200      	movs	r2, #0
 8002f20:	602a      	str	r2, [r5, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f7fd fb5d 	bl	80005e2 <_write>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	d102      	bne.n	8002f32 <_write_r+0x1e>
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	b103      	cbz	r3, 8002f32 <_write_r+0x1e>
 8002f30:	6023      	str	r3, [r4, #0]
 8002f32:	bd38      	pop	{r3, r4, r5, pc}
 8002f34:	20000250 	.word	0x20000250

08002f38 <__errno>:
 8002f38:	4b01      	ldr	r3, [pc, #4]	; (8002f40 <__errno+0x8>)
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000064 	.word	0x20000064

08002f44 <__libc_init_array>:
 8002f44:	b570      	push	{r4, r5, r6, lr}
 8002f46:	4d0d      	ldr	r5, [pc, #52]	; (8002f7c <__libc_init_array+0x38>)
 8002f48:	4c0d      	ldr	r4, [pc, #52]	; (8002f80 <__libc_init_array+0x3c>)
 8002f4a:	1b64      	subs	r4, r4, r5
 8002f4c:	10a4      	asrs	r4, r4, #2
 8002f4e:	2600      	movs	r6, #0
 8002f50:	42a6      	cmp	r6, r4
 8002f52:	d109      	bne.n	8002f68 <__libc_init_array+0x24>
 8002f54:	4d0b      	ldr	r5, [pc, #44]	; (8002f84 <__libc_init_array+0x40>)
 8002f56:	4c0c      	ldr	r4, [pc, #48]	; (8002f88 <__libc_init_array+0x44>)
 8002f58:	f000 fd2a 	bl	80039b0 <_init>
 8002f5c:	1b64      	subs	r4, r4, r5
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	2600      	movs	r6, #0
 8002f62:	42a6      	cmp	r6, r4
 8002f64:	d105      	bne.n	8002f72 <__libc_init_array+0x2e>
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6c:	4798      	blx	r3
 8002f6e:	3601      	adds	r6, #1
 8002f70:	e7ee      	b.n	8002f50 <__libc_init_array+0xc>
 8002f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f76:	4798      	blx	r3
 8002f78:	3601      	adds	r6, #1
 8002f7a:	e7f2      	b.n	8002f62 <__libc_init_array+0x1e>
 8002f7c:	08003a84 	.word	0x08003a84
 8002f80:	08003a84 	.word	0x08003a84
 8002f84:	08003a84 	.word	0x08003a84
 8002f88:	08003a88 	.word	0x08003a88

08002f8c <__retarget_lock_init_recursive>:
 8002f8c:	4770      	bx	lr

08002f8e <__retarget_lock_acquire_recursive>:
 8002f8e:	4770      	bx	lr

08002f90 <__retarget_lock_release_recursive>:
 8002f90:	4770      	bx	lr
	...

08002f94 <_free_r>:
 8002f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f96:	2900      	cmp	r1, #0
 8002f98:	d044      	beq.n	8003024 <_free_r+0x90>
 8002f9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f9e:	9001      	str	r0, [sp, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f1a1 0404 	sub.w	r4, r1, #4
 8002fa6:	bfb8      	it	lt
 8002fa8:	18e4      	addlt	r4, r4, r3
 8002faa:	f000 f8df 	bl	800316c <__malloc_lock>
 8002fae:	4a1e      	ldr	r2, [pc, #120]	; (8003028 <_free_r+0x94>)
 8002fb0:	9801      	ldr	r0, [sp, #4]
 8002fb2:	6813      	ldr	r3, [r2, #0]
 8002fb4:	b933      	cbnz	r3, 8002fc4 <_free_r+0x30>
 8002fb6:	6063      	str	r3, [r4, #4]
 8002fb8:	6014      	str	r4, [r2, #0]
 8002fba:	b003      	add	sp, #12
 8002fbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fc0:	f000 b8da 	b.w	8003178 <__malloc_unlock>
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	d908      	bls.n	8002fda <_free_r+0x46>
 8002fc8:	6825      	ldr	r5, [r4, #0]
 8002fca:	1961      	adds	r1, r4, r5
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	bf01      	itttt	eq
 8002fd0:	6819      	ldreq	r1, [r3, #0]
 8002fd2:	685b      	ldreq	r3, [r3, #4]
 8002fd4:	1949      	addeq	r1, r1, r5
 8002fd6:	6021      	streq	r1, [r4, #0]
 8002fd8:	e7ed      	b.n	8002fb6 <_free_r+0x22>
 8002fda:	461a      	mov	r2, r3
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	b10b      	cbz	r3, 8002fe4 <_free_r+0x50>
 8002fe0:	42a3      	cmp	r3, r4
 8002fe2:	d9fa      	bls.n	8002fda <_free_r+0x46>
 8002fe4:	6811      	ldr	r1, [r2, #0]
 8002fe6:	1855      	adds	r5, r2, r1
 8002fe8:	42a5      	cmp	r5, r4
 8002fea:	d10b      	bne.n	8003004 <_free_r+0x70>
 8002fec:	6824      	ldr	r4, [r4, #0]
 8002fee:	4421      	add	r1, r4
 8002ff0:	1854      	adds	r4, r2, r1
 8002ff2:	42a3      	cmp	r3, r4
 8002ff4:	6011      	str	r1, [r2, #0]
 8002ff6:	d1e0      	bne.n	8002fba <_free_r+0x26>
 8002ff8:	681c      	ldr	r4, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	6053      	str	r3, [r2, #4]
 8002ffe:	440c      	add	r4, r1
 8003000:	6014      	str	r4, [r2, #0]
 8003002:	e7da      	b.n	8002fba <_free_r+0x26>
 8003004:	d902      	bls.n	800300c <_free_r+0x78>
 8003006:	230c      	movs	r3, #12
 8003008:	6003      	str	r3, [r0, #0]
 800300a:	e7d6      	b.n	8002fba <_free_r+0x26>
 800300c:	6825      	ldr	r5, [r4, #0]
 800300e:	1961      	adds	r1, r4, r5
 8003010:	428b      	cmp	r3, r1
 8003012:	bf04      	itt	eq
 8003014:	6819      	ldreq	r1, [r3, #0]
 8003016:	685b      	ldreq	r3, [r3, #4]
 8003018:	6063      	str	r3, [r4, #4]
 800301a:	bf04      	itt	eq
 800301c:	1949      	addeq	r1, r1, r5
 800301e:	6021      	streq	r1, [r4, #0]
 8003020:	6054      	str	r4, [r2, #4]
 8003022:	e7ca      	b.n	8002fba <_free_r+0x26>
 8003024:	b003      	add	sp, #12
 8003026:	bd30      	pop	{r4, r5, pc}
 8003028:	20000258 	.word	0x20000258

0800302c <sbrk_aligned>:
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4e0e      	ldr	r6, [pc, #56]	; (8003068 <sbrk_aligned+0x3c>)
 8003030:	460c      	mov	r4, r1
 8003032:	6831      	ldr	r1, [r6, #0]
 8003034:	4605      	mov	r5, r0
 8003036:	b911      	cbnz	r1, 800303e <sbrk_aligned+0x12>
 8003038:	f000 fcaa 	bl	8003990 <_sbrk_r>
 800303c:	6030      	str	r0, [r6, #0]
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f000 fca5 	bl	8003990 <_sbrk_r>
 8003046:	1c43      	adds	r3, r0, #1
 8003048:	d00a      	beq.n	8003060 <sbrk_aligned+0x34>
 800304a:	1cc4      	adds	r4, r0, #3
 800304c:	f024 0403 	bic.w	r4, r4, #3
 8003050:	42a0      	cmp	r0, r4
 8003052:	d007      	beq.n	8003064 <sbrk_aligned+0x38>
 8003054:	1a21      	subs	r1, r4, r0
 8003056:	4628      	mov	r0, r5
 8003058:	f000 fc9a 	bl	8003990 <_sbrk_r>
 800305c:	3001      	adds	r0, #1
 800305e:	d101      	bne.n	8003064 <sbrk_aligned+0x38>
 8003060:	f04f 34ff 	mov.w	r4, #4294967295
 8003064:	4620      	mov	r0, r4
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	2000025c 	.word	0x2000025c

0800306c <_malloc_r>:
 800306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003070:	1ccd      	adds	r5, r1, #3
 8003072:	f025 0503 	bic.w	r5, r5, #3
 8003076:	3508      	adds	r5, #8
 8003078:	2d0c      	cmp	r5, #12
 800307a:	bf38      	it	cc
 800307c:	250c      	movcc	r5, #12
 800307e:	2d00      	cmp	r5, #0
 8003080:	4607      	mov	r7, r0
 8003082:	db01      	blt.n	8003088 <_malloc_r+0x1c>
 8003084:	42a9      	cmp	r1, r5
 8003086:	d905      	bls.n	8003094 <_malloc_r+0x28>
 8003088:	230c      	movs	r3, #12
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	2600      	movs	r6, #0
 800308e:	4630      	mov	r0, r6
 8003090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003094:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003168 <_malloc_r+0xfc>
 8003098:	f000 f868 	bl	800316c <__malloc_lock>
 800309c:	f8d8 3000 	ldr.w	r3, [r8]
 80030a0:	461c      	mov	r4, r3
 80030a2:	bb5c      	cbnz	r4, 80030fc <_malloc_r+0x90>
 80030a4:	4629      	mov	r1, r5
 80030a6:	4638      	mov	r0, r7
 80030a8:	f7ff ffc0 	bl	800302c <sbrk_aligned>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	4604      	mov	r4, r0
 80030b0:	d155      	bne.n	800315e <_malloc_r+0xf2>
 80030b2:	f8d8 4000 	ldr.w	r4, [r8]
 80030b6:	4626      	mov	r6, r4
 80030b8:	2e00      	cmp	r6, #0
 80030ba:	d145      	bne.n	8003148 <_malloc_r+0xdc>
 80030bc:	2c00      	cmp	r4, #0
 80030be:	d048      	beq.n	8003152 <_malloc_r+0xe6>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	4631      	mov	r1, r6
 80030c4:	4638      	mov	r0, r7
 80030c6:	eb04 0903 	add.w	r9, r4, r3
 80030ca:	f000 fc61 	bl	8003990 <_sbrk_r>
 80030ce:	4581      	cmp	r9, r0
 80030d0:	d13f      	bne.n	8003152 <_malloc_r+0xe6>
 80030d2:	6821      	ldr	r1, [r4, #0]
 80030d4:	1a6d      	subs	r5, r5, r1
 80030d6:	4629      	mov	r1, r5
 80030d8:	4638      	mov	r0, r7
 80030da:	f7ff ffa7 	bl	800302c <sbrk_aligned>
 80030de:	3001      	adds	r0, #1
 80030e0:	d037      	beq.n	8003152 <_malloc_r+0xe6>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	442b      	add	r3, r5
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	f8d8 3000 	ldr.w	r3, [r8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d038      	beq.n	8003162 <_malloc_r+0xf6>
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	42a2      	cmp	r2, r4
 80030f4:	d12b      	bne.n	800314e <_malloc_r+0xe2>
 80030f6:	2200      	movs	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e00f      	b.n	800311c <_malloc_r+0xb0>
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	1b52      	subs	r2, r2, r5
 8003100:	d41f      	bmi.n	8003142 <_malloc_r+0xd6>
 8003102:	2a0b      	cmp	r2, #11
 8003104:	d917      	bls.n	8003136 <_malloc_r+0xca>
 8003106:	1961      	adds	r1, r4, r5
 8003108:	42a3      	cmp	r3, r4
 800310a:	6025      	str	r5, [r4, #0]
 800310c:	bf18      	it	ne
 800310e:	6059      	strne	r1, [r3, #4]
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	bf08      	it	eq
 8003114:	f8c8 1000 	streq.w	r1, [r8]
 8003118:	5162      	str	r2, [r4, r5]
 800311a:	604b      	str	r3, [r1, #4]
 800311c:	4638      	mov	r0, r7
 800311e:	f104 060b 	add.w	r6, r4, #11
 8003122:	f000 f829 	bl	8003178 <__malloc_unlock>
 8003126:	f026 0607 	bic.w	r6, r6, #7
 800312a:	1d23      	adds	r3, r4, #4
 800312c:	1af2      	subs	r2, r6, r3
 800312e:	d0ae      	beq.n	800308e <_malloc_r+0x22>
 8003130:	1b9b      	subs	r3, r3, r6
 8003132:	50a3      	str	r3, [r4, r2]
 8003134:	e7ab      	b.n	800308e <_malloc_r+0x22>
 8003136:	42a3      	cmp	r3, r4
 8003138:	6862      	ldr	r2, [r4, #4]
 800313a:	d1dd      	bne.n	80030f8 <_malloc_r+0x8c>
 800313c:	f8c8 2000 	str.w	r2, [r8]
 8003140:	e7ec      	b.n	800311c <_malloc_r+0xb0>
 8003142:	4623      	mov	r3, r4
 8003144:	6864      	ldr	r4, [r4, #4]
 8003146:	e7ac      	b.n	80030a2 <_malloc_r+0x36>
 8003148:	4634      	mov	r4, r6
 800314a:	6876      	ldr	r6, [r6, #4]
 800314c:	e7b4      	b.n	80030b8 <_malloc_r+0x4c>
 800314e:	4613      	mov	r3, r2
 8003150:	e7cc      	b.n	80030ec <_malloc_r+0x80>
 8003152:	230c      	movs	r3, #12
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4638      	mov	r0, r7
 8003158:	f000 f80e 	bl	8003178 <__malloc_unlock>
 800315c:	e797      	b.n	800308e <_malloc_r+0x22>
 800315e:	6025      	str	r5, [r4, #0]
 8003160:	e7dc      	b.n	800311c <_malloc_r+0xb0>
 8003162:	605b      	str	r3, [r3, #4]
 8003164:	deff      	udf	#255	; 0xff
 8003166:	bf00      	nop
 8003168:	20000258 	.word	0x20000258

0800316c <__malloc_lock>:
 800316c:	4801      	ldr	r0, [pc, #4]	; (8003174 <__malloc_lock+0x8>)
 800316e:	f7ff bf0e 	b.w	8002f8e <__retarget_lock_acquire_recursive>
 8003172:	bf00      	nop
 8003174:	20000254 	.word	0x20000254

08003178 <__malloc_unlock>:
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <__malloc_unlock+0x8>)
 800317a:	f7ff bf09 	b.w	8002f90 <__retarget_lock_release_recursive>
 800317e:	bf00      	nop
 8003180:	20000254 	.word	0x20000254

08003184 <__sfputc_r>:
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	3b01      	subs	r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	b410      	push	{r4}
 800318c:	6093      	str	r3, [r2, #8]
 800318e:	da08      	bge.n	80031a2 <__sfputc_r+0x1e>
 8003190:	6994      	ldr	r4, [r2, #24]
 8003192:	42a3      	cmp	r3, r4
 8003194:	db01      	blt.n	800319a <__sfputc_r+0x16>
 8003196:	290a      	cmp	r1, #10
 8003198:	d103      	bne.n	80031a2 <__sfputc_r+0x1e>
 800319a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800319e:	f7ff bde8 	b.w	8002d72 <__swbuf_r>
 80031a2:	6813      	ldr	r3, [r2, #0]
 80031a4:	1c58      	adds	r0, r3, #1
 80031a6:	6010      	str	r0, [r2, #0]
 80031a8:	7019      	strb	r1, [r3, #0]
 80031aa:	4608      	mov	r0, r1
 80031ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <__sfputs_r>:
 80031b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b4:	4606      	mov	r6, r0
 80031b6:	460f      	mov	r7, r1
 80031b8:	4614      	mov	r4, r2
 80031ba:	18d5      	adds	r5, r2, r3
 80031bc:	42ac      	cmp	r4, r5
 80031be:	d101      	bne.n	80031c4 <__sfputs_r+0x12>
 80031c0:	2000      	movs	r0, #0
 80031c2:	e007      	b.n	80031d4 <__sfputs_r+0x22>
 80031c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031c8:	463a      	mov	r2, r7
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7ff ffda 	bl	8003184 <__sfputc_r>
 80031d0:	1c43      	adds	r3, r0, #1
 80031d2:	d1f3      	bne.n	80031bc <__sfputs_r+0xa>
 80031d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031d8 <_vfiprintf_r>:
 80031d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031dc:	460d      	mov	r5, r1
 80031de:	b09d      	sub	sp, #116	; 0x74
 80031e0:	4614      	mov	r4, r2
 80031e2:	4698      	mov	r8, r3
 80031e4:	4606      	mov	r6, r0
 80031e6:	b118      	cbz	r0, 80031f0 <_vfiprintf_r+0x18>
 80031e8:	6a03      	ldr	r3, [r0, #32]
 80031ea:	b90b      	cbnz	r3, 80031f0 <_vfiprintf_r+0x18>
 80031ec:	f7ff fcda 	bl	8002ba4 <__sinit>
 80031f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031f2:	07d9      	lsls	r1, r3, #31
 80031f4:	d405      	bmi.n	8003202 <_vfiprintf_r+0x2a>
 80031f6:	89ab      	ldrh	r3, [r5, #12]
 80031f8:	059a      	lsls	r2, r3, #22
 80031fa:	d402      	bmi.n	8003202 <_vfiprintf_r+0x2a>
 80031fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031fe:	f7ff fec6 	bl	8002f8e <__retarget_lock_acquire_recursive>
 8003202:	89ab      	ldrh	r3, [r5, #12]
 8003204:	071b      	lsls	r3, r3, #28
 8003206:	d501      	bpl.n	800320c <_vfiprintf_r+0x34>
 8003208:	692b      	ldr	r3, [r5, #16]
 800320a:	b99b      	cbnz	r3, 8003234 <_vfiprintf_r+0x5c>
 800320c:	4629      	mov	r1, r5
 800320e:	4630      	mov	r0, r6
 8003210:	f7ff fdec 	bl	8002dec <__swsetup_r>
 8003214:	b170      	cbz	r0, 8003234 <_vfiprintf_r+0x5c>
 8003216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003218:	07dc      	lsls	r4, r3, #31
 800321a:	d504      	bpl.n	8003226 <_vfiprintf_r+0x4e>
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	b01d      	add	sp, #116	; 0x74
 8003222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	0598      	lsls	r0, r3, #22
 800322a:	d4f7      	bmi.n	800321c <_vfiprintf_r+0x44>
 800322c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800322e:	f7ff feaf 	bl	8002f90 <__retarget_lock_release_recursive>
 8003232:	e7f3      	b.n	800321c <_vfiprintf_r+0x44>
 8003234:	2300      	movs	r3, #0
 8003236:	9309      	str	r3, [sp, #36]	; 0x24
 8003238:	2320      	movs	r3, #32
 800323a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800323e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003242:	2330      	movs	r3, #48	; 0x30
 8003244:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80033f8 <_vfiprintf_r+0x220>
 8003248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800324c:	f04f 0901 	mov.w	r9, #1
 8003250:	4623      	mov	r3, r4
 8003252:	469a      	mov	sl, r3
 8003254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003258:	b10a      	cbz	r2, 800325e <_vfiprintf_r+0x86>
 800325a:	2a25      	cmp	r2, #37	; 0x25
 800325c:	d1f9      	bne.n	8003252 <_vfiprintf_r+0x7a>
 800325e:	ebba 0b04 	subs.w	fp, sl, r4
 8003262:	d00b      	beq.n	800327c <_vfiprintf_r+0xa4>
 8003264:	465b      	mov	r3, fp
 8003266:	4622      	mov	r2, r4
 8003268:	4629      	mov	r1, r5
 800326a:	4630      	mov	r0, r6
 800326c:	f7ff ffa1 	bl	80031b2 <__sfputs_r>
 8003270:	3001      	adds	r0, #1
 8003272:	f000 80a9 	beq.w	80033c8 <_vfiprintf_r+0x1f0>
 8003276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003278:	445a      	add	r2, fp
 800327a:	9209      	str	r2, [sp, #36]	; 0x24
 800327c:	f89a 3000 	ldrb.w	r3, [sl]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80a1 	beq.w	80033c8 <_vfiprintf_r+0x1f0>
 8003286:	2300      	movs	r3, #0
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003290:	f10a 0a01 	add.w	sl, sl, #1
 8003294:	9304      	str	r3, [sp, #16]
 8003296:	9307      	str	r3, [sp, #28]
 8003298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800329c:	931a      	str	r3, [sp, #104]	; 0x68
 800329e:	4654      	mov	r4, sl
 80032a0:	2205      	movs	r2, #5
 80032a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a6:	4854      	ldr	r0, [pc, #336]	; (80033f8 <_vfiprintf_r+0x220>)
 80032a8:	f7fc ff92 	bl	80001d0 <memchr>
 80032ac:	9a04      	ldr	r2, [sp, #16]
 80032ae:	b9d8      	cbnz	r0, 80032e8 <_vfiprintf_r+0x110>
 80032b0:	06d1      	lsls	r1, r2, #27
 80032b2:	bf44      	itt	mi
 80032b4:	2320      	movmi	r3, #32
 80032b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032ba:	0713      	lsls	r3, r2, #28
 80032bc:	bf44      	itt	mi
 80032be:	232b      	movmi	r3, #43	; 0x2b
 80032c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032c4:	f89a 3000 	ldrb.w	r3, [sl]
 80032c8:	2b2a      	cmp	r3, #42	; 0x2a
 80032ca:	d015      	beq.n	80032f8 <_vfiprintf_r+0x120>
 80032cc:	9a07      	ldr	r2, [sp, #28]
 80032ce:	4654      	mov	r4, sl
 80032d0:	2000      	movs	r0, #0
 80032d2:	f04f 0c0a 	mov.w	ip, #10
 80032d6:	4621      	mov	r1, r4
 80032d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032dc:	3b30      	subs	r3, #48	; 0x30
 80032de:	2b09      	cmp	r3, #9
 80032e0:	d94d      	bls.n	800337e <_vfiprintf_r+0x1a6>
 80032e2:	b1b0      	cbz	r0, 8003312 <_vfiprintf_r+0x13a>
 80032e4:	9207      	str	r2, [sp, #28]
 80032e6:	e014      	b.n	8003312 <_vfiprintf_r+0x13a>
 80032e8:	eba0 0308 	sub.w	r3, r0, r8
 80032ec:	fa09 f303 	lsl.w	r3, r9, r3
 80032f0:	4313      	orrs	r3, r2
 80032f2:	9304      	str	r3, [sp, #16]
 80032f4:	46a2      	mov	sl, r4
 80032f6:	e7d2      	b.n	800329e <_vfiprintf_r+0xc6>
 80032f8:	9b03      	ldr	r3, [sp, #12]
 80032fa:	1d19      	adds	r1, r3, #4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	9103      	str	r1, [sp, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	bfbb      	ittet	lt
 8003304:	425b      	neglt	r3, r3
 8003306:	f042 0202 	orrlt.w	r2, r2, #2
 800330a:	9307      	strge	r3, [sp, #28]
 800330c:	9307      	strlt	r3, [sp, #28]
 800330e:	bfb8      	it	lt
 8003310:	9204      	strlt	r2, [sp, #16]
 8003312:	7823      	ldrb	r3, [r4, #0]
 8003314:	2b2e      	cmp	r3, #46	; 0x2e
 8003316:	d10c      	bne.n	8003332 <_vfiprintf_r+0x15a>
 8003318:	7863      	ldrb	r3, [r4, #1]
 800331a:	2b2a      	cmp	r3, #42	; 0x2a
 800331c:	d134      	bne.n	8003388 <_vfiprintf_r+0x1b0>
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	1d1a      	adds	r2, r3, #4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	9203      	str	r2, [sp, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	bfb8      	it	lt
 800332a:	f04f 33ff 	movlt.w	r3, #4294967295
 800332e:	3402      	adds	r4, #2
 8003330:	9305      	str	r3, [sp, #20]
 8003332:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003408 <_vfiprintf_r+0x230>
 8003336:	7821      	ldrb	r1, [r4, #0]
 8003338:	2203      	movs	r2, #3
 800333a:	4650      	mov	r0, sl
 800333c:	f7fc ff48 	bl	80001d0 <memchr>
 8003340:	b138      	cbz	r0, 8003352 <_vfiprintf_r+0x17a>
 8003342:	9b04      	ldr	r3, [sp, #16]
 8003344:	eba0 000a 	sub.w	r0, r0, sl
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	4082      	lsls	r2, r0
 800334c:	4313      	orrs	r3, r2
 800334e:	3401      	adds	r4, #1
 8003350:	9304      	str	r3, [sp, #16]
 8003352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003356:	4829      	ldr	r0, [pc, #164]	; (80033fc <_vfiprintf_r+0x224>)
 8003358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800335c:	2206      	movs	r2, #6
 800335e:	f7fc ff37 	bl	80001d0 <memchr>
 8003362:	2800      	cmp	r0, #0
 8003364:	d03f      	beq.n	80033e6 <_vfiprintf_r+0x20e>
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <_vfiprintf_r+0x228>)
 8003368:	bb1b      	cbnz	r3, 80033b2 <_vfiprintf_r+0x1da>
 800336a:	9b03      	ldr	r3, [sp, #12]
 800336c:	3307      	adds	r3, #7
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	3308      	adds	r3, #8
 8003374:	9303      	str	r3, [sp, #12]
 8003376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003378:	443b      	add	r3, r7
 800337a:	9309      	str	r3, [sp, #36]	; 0x24
 800337c:	e768      	b.n	8003250 <_vfiprintf_r+0x78>
 800337e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003382:	460c      	mov	r4, r1
 8003384:	2001      	movs	r0, #1
 8003386:	e7a6      	b.n	80032d6 <_vfiprintf_r+0xfe>
 8003388:	2300      	movs	r3, #0
 800338a:	3401      	adds	r4, #1
 800338c:	9305      	str	r3, [sp, #20]
 800338e:	4619      	mov	r1, r3
 8003390:	f04f 0c0a 	mov.w	ip, #10
 8003394:	4620      	mov	r0, r4
 8003396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800339a:	3a30      	subs	r2, #48	; 0x30
 800339c:	2a09      	cmp	r2, #9
 800339e:	d903      	bls.n	80033a8 <_vfiprintf_r+0x1d0>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0c6      	beq.n	8003332 <_vfiprintf_r+0x15a>
 80033a4:	9105      	str	r1, [sp, #20]
 80033a6:	e7c4      	b.n	8003332 <_vfiprintf_r+0x15a>
 80033a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80033ac:	4604      	mov	r4, r0
 80033ae:	2301      	movs	r3, #1
 80033b0:	e7f0      	b.n	8003394 <_vfiprintf_r+0x1bc>
 80033b2:	ab03      	add	r3, sp, #12
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	462a      	mov	r2, r5
 80033b8:	4b12      	ldr	r3, [pc, #72]	; (8003404 <_vfiprintf_r+0x22c>)
 80033ba:	a904      	add	r1, sp, #16
 80033bc:	4630      	mov	r0, r6
 80033be:	f3af 8000 	nop.w
 80033c2:	4607      	mov	r7, r0
 80033c4:	1c78      	adds	r0, r7, #1
 80033c6:	d1d6      	bne.n	8003376 <_vfiprintf_r+0x19e>
 80033c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033ca:	07d9      	lsls	r1, r3, #31
 80033cc:	d405      	bmi.n	80033da <_vfiprintf_r+0x202>
 80033ce:	89ab      	ldrh	r3, [r5, #12]
 80033d0:	059a      	lsls	r2, r3, #22
 80033d2:	d402      	bmi.n	80033da <_vfiprintf_r+0x202>
 80033d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033d6:	f7ff fddb 	bl	8002f90 <__retarget_lock_release_recursive>
 80033da:	89ab      	ldrh	r3, [r5, #12]
 80033dc:	065b      	lsls	r3, r3, #25
 80033de:	f53f af1d 	bmi.w	800321c <_vfiprintf_r+0x44>
 80033e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033e4:	e71c      	b.n	8003220 <_vfiprintf_r+0x48>
 80033e6:	ab03      	add	r3, sp, #12
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	462a      	mov	r2, r5
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <_vfiprintf_r+0x22c>)
 80033ee:	a904      	add	r1, sp, #16
 80033f0:	4630      	mov	r0, r6
 80033f2:	f000 f879 	bl	80034e8 <_printf_i>
 80033f6:	e7e4      	b.n	80033c2 <_vfiprintf_r+0x1ea>
 80033f8:	08003a50 	.word	0x08003a50
 80033fc:	08003a5a 	.word	0x08003a5a
 8003400:	00000000 	.word	0x00000000
 8003404:	080031b3 	.word	0x080031b3
 8003408:	08003a56 	.word	0x08003a56

0800340c <_printf_common>:
 800340c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003410:	4616      	mov	r6, r2
 8003412:	4699      	mov	r9, r3
 8003414:	688a      	ldr	r2, [r1, #8]
 8003416:	690b      	ldr	r3, [r1, #16]
 8003418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800341c:	4293      	cmp	r3, r2
 800341e:	bfb8      	it	lt
 8003420:	4613      	movlt	r3, r2
 8003422:	6033      	str	r3, [r6, #0]
 8003424:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003428:	4607      	mov	r7, r0
 800342a:	460c      	mov	r4, r1
 800342c:	b10a      	cbz	r2, 8003432 <_printf_common+0x26>
 800342e:	3301      	adds	r3, #1
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	0699      	lsls	r1, r3, #26
 8003436:	bf42      	ittt	mi
 8003438:	6833      	ldrmi	r3, [r6, #0]
 800343a:	3302      	addmi	r3, #2
 800343c:	6033      	strmi	r3, [r6, #0]
 800343e:	6825      	ldr	r5, [r4, #0]
 8003440:	f015 0506 	ands.w	r5, r5, #6
 8003444:	d106      	bne.n	8003454 <_printf_common+0x48>
 8003446:	f104 0a19 	add.w	sl, r4, #25
 800344a:	68e3      	ldr	r3, [r4, #12]
 800344c:	6832      	ldr	r2, [r6, #0]
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	42ab      	cmp	r3, r5
 8003452:	dc26      	bgt.n	80034a2 <_printf_common+0x96>
 8003454:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003458:	1e13      	subs	r3, r2, #0
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	bf18      	it	ne
 800345e:	2301      	movne	r3, #1
 8003460:	0692      	lsls	r2, r2, #26
 8003462:	d42b      	bmi.n	80034bc <_printf_common+0xb0>
 8003464:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003468:	4649      	mov	r1, r9
 800346a:	4638      	mov	r0, r7
 800346c:	47c0      	blx	r8
 800346e:	3001      	adds	r0, #1
 8003470:	d01e      	beq.n	80034b0 <_printf_common+0xa4>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	6922      	ldr	r2, [r4, #16]
 8003476:	f003 0306 	and.w	r3, r3, #6
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf02      	ittt	eq
 800347e:	68e5      	ldreq	r5, [r4, #12]
 8003480:	6833      	ldreq	r3, [r6, #0]
 8003482:	1aed      	subeq	r5, r5, r3
 8003484:	68a3      	ldr	r3, [r4, #8]
 8003486:	bf0c      	ite	eq
 8003488:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800348c:	2500      	movne	r5, #0
 800348e:	4293      	cmp	r3, r2
 8003490:	bfc4      	itt	gt
 8003492:	1a9b      	subgt	r3, r3, r2
 8003494:	18ed      	addgt	r5, r5, r3
 8003496:	2600      	movs	r6, #0
 8003498:	341a      	adds	r4, #26
 800349a:	42b5      	cmp	r5, r6
 800349c:	d11a      	bne.n	80034d4 <_printf_common+0xc8>
 800349e:	2000      	movs	r0, #0
 80034a0:	e008      	b.n	80034b4 <_printf_common+0xa8>
 80034a2:	2301      	movs	r3, #1
 80034a4:	4652      	mov	r2, sl
 80034a6:	4649      	mov	r1, r9
 80034a8:	4638      	mov	r0, r7
 80034aa:	47c0      	blx	r8
 80034ac:	3001      	adds	r0, #1
 80034ae:	d103      	bne.n	80034b8 <_printf_common+0xac>
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b8:	3501      	adds	r5, #1
 80034ba:	e7c6      	b.n	800344a <_printf_common+0x3e>
 80034bc:	18e1      	adds	r1, r4, r3
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	2030      	movs	r0, #48	; 0x30
 80034c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034c6:	4422      	add	r2, r4
 80034c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034d0:	3302      	adds	r3, #2
 80034d2:	e7c7      	b.n	8003464 <_printf_common+0x58>
 80034d4:	2301      	movs	r3, #1
 80034d6:	4622      	mov	r2, r4
 80034d8:	4649      	mov	r1, r9
 80034da:	4638      	mov	r0, r7
 80034dc:	47c0      	blx	r8
 80034de:	3001      	adds	r0, #1
 80034e0:	d0e6      	beq.n	80034b0 <_printf_common+0xa4>
 80034e2:	3601      	adds	r6, #1
 80034e4:	e7d9      	b.n	800349a <_printf_common+0x8e>
	...

080034e8 <_printf_i>:
 80034e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034ec:	7e0f      	ldrb	r7, [r1, #24]
 80034ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034f0:	2f78      	cmp	r7, #120	; 0x78
 80034f2:	4691      	mov	r9, r2
 80034f4:	4680      	mov	r8, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	469a      	mov	sl, r3
 80034fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034fe:	d807      	bhi.n	8003510 <_printf_i+0x28>
 8003500:	2f62      	cmp	r7, #98	; 0x62
 8003502:	d80a      	bhi.n	800351a <_printf_i+0x32>
 8003504:	2f00      	cmp	r7, #0
 8003506:	f000 80d4 	beq.w	80036b2 <_printf_i+0x1ca>
 800350a:	2f58      	cmp	r7, #88	; 0x58
 800350c:	f000 80c0 	beq.w	8003690 <_printf_i+0x1a8>
 8003510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003514:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003518:	e03a      	b.n	8003590 <_printf_i+0xa8>
 800351a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800351e:	2b15      	cmp	r3, #21
 8003520:	d8f6      	bhi.n	8003510 <_printf_i+0x28>
 8003522:	a101      	add	r1, pc, #4	; (adr r1, 8003528 <_printf_i+0x40>)
 8003524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003528:	08003581 	.word	0x08003581
 800352c:	08003595 	.word	0x08003595
 8003530:	08003511 	.word	0x08003511
 8003534:	08003511 	.word	0x08003511
 8003538:	08003511 	.word	0x08003511
 800353c:	08003511 	.word	0x08003511
 8003540:	08003595 	.word	0x08003595
 8003544:	08003511 	.word	0x08003511
 8003548:	08003511 	.word	0x08003511
 800354c:	08003511 	.word	0x08003511
 8003550:	08003511 	.word	0x08003511
 8003554:	08003699 	.word	0x08003699
 8003558:	080035c1 	.word	0x080035c1
 800355c:	08003653 	.word	0x08003653
 8003560:	08003511 	.word	0x08003511
 8003564:	08003511 	.word	0x08003511
 8003568:	080036bb 	.word	0x080036bb
 800356c:	08003511 	.word	0x08003511
 8003570:	080035c1 	.word	0x080035c1
 8003574:	08003511 	.word	0x08003511
 8003578:	08003511 	.word	0x08003511
 800357c:	0800365b 	.word	0x0800365b
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	1d1a      	adds	r2, r3, #4
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	602a      	str	r2, [r5, #0]
 8003588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800358c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003590:	2301      	movs	r3, #1
 8003592:	e09f      	b.n	80036d4 <_printf_i+0x1ec>
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	682b      	ldr	r3, [r5, #0]
 8003598:	0607      	lsls	r7, r0, #24
 800359a:	f103 0104 	add.w	r1, r3, #4
 800359e:	6029      	str	r1, [r5, #0]
 80035a0:	d501      	bpl.n	80035a6 <_printf_i+0xbe>
 80035a2:	681e      	ldr	r6, [r3, #0]
 80035a4:	e003      	b.n	80035ae <_printf_i+0xc6>
 80035a6:	0646      	lsls	r6, r0, #25
 80035a8:	d5fb      	bpl.n	80035a2 <_printf_i+0xba>
 80035aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035ae:	2e00      	cmp	r6, #0
 80035b0:	da03      	bge.n	80035ba <_printf_i+0xd2>
 80035b2:	232d      	movs	r3, #45	; 0x2d
 80035b4:	4276      	negs	r6, r6
 80035b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035ba:	485a      	ldr	r0, [pc, #360]	; (8003724 <_printf_i+0x23c>)
 80035bc:	230a      	movs	r3, #10
 80035be:	e012      	b.n	80035e6 <_printf_i+0xfe>
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	6820      	ldr	r0, [r4, #0]
 80035c4:	1d19      	adds	r1, r3, #4
 80035c6:	6029      	str	r1, [r5, #0]
 80035c8:	0605      	lsls	r5, r0, #24
 80035ca:	d501      	bpl.n	80035d0 <_printf_i+0xe8>
 80035cc:	681e      	ldr	r6, [r3, #0]
 80035ce:	e002      	b.n	80035d6 <_printf_i+0xee>
 80035d0:	0641      	lsls	r1, r0, #25
 80035d2:	d5fb      	bpl.n	80035cc <_printf_i+0xe4>
 80035d4:	881e      	ldrh	r6, [r3, #0]
 80035d6:	4853      	ldr	r0, [pc, #332]	; (8003724 <_printf_i+0x23c>)
 80035d8:	2f6f      	cmp	r7, #111	; 0x6f
 80035da:	bf0c      	ite	eq
 80035dc:	2308      	moveq	r3, #8
 80035de:	230a      	movne	r3, #10
 80035e0:	2100      	movs	r1, #0
 80035e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035e6:	6865      	ldr	r5, [r4, #4]
 80035e8:	60a5      	str	r5, [r4, #8]
 80035ea:	2d00      	cmp	r5, #0
 80035ec:	bfa2      	ittt	ge
 80035ee:	6821      	ldrge	r1, [r4, #0]
 80035f0:	f021 0104 	bicge.w	r1, r1, #4
 80035f4:	6021      	strge	r1, [r4, #0]
 80035f6:	b90e      	cbnz	r6, 80035fc <_printf_i+0x114>
 80035f8:	2d00      	cmp	r5, #0
 80035fa:	d04b      	beq.n	8003694 <_printf_i+0x1ac>
 80035fc:	4615      	mov	r5, r2
 80035fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003602:	fb03 6711 	mls	r7, r3, r1, r6
 8003606:	5dc7      	ldrb	r7, [r0, r7]
 8003608:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800360c:	4637      	mov	r7, r6
 800360e:	42bb      	cmp	r3, r7
 8003610:	460e      	mov	r6, r1
 8003612:	d9f4      	bls.n	80035fe <_printf_i+0x116>
 8003614:	2b08      	cmp	r3, #8
 8003616:	d10b      	bne.n	8003630 <_printf_i+0x148>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	07de      	lsls	r6, r3, #31
 800361c:	d508      	bpl.n	8003630 <_printf_i+0x148>
 800361e:	6923      	ldr	r3, [r4, #16]
 8003620:	6861      	ldr	r1, [r4, #4]
 8003622:	4299      	cmp	r1, r3
 8003624:	bfde      	ittt	le
 8003626:	2330      	movle	r3, #48	; 0x30
 8003628:	f805 3c01 	strble.w	r3, [r5, #-1]
 800362c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003630:	1b52      	subs	r2, r2, r5
 8003632:	6122      	str	r2, [r4, #16]
 8003634:	f8cd a000 	str.w	sl, [sp]
 8003638:	464b      	mov	r3, r9
 800363a:	aa03      	add	r2, sp, #12
 800363c:	4621      	mov	r1, r4
 800363e:	4640      	mov	r0, r8
 8003640:	f7ff fee4 	bl	800340c <_printf_common>
 8003644:	3001      	adds	r0, #1
 8003646:	d14a      	bne.n	80036de <_printf_i+0x1f6>
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	b004      	add	sp, #16
 800364e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	f043 0320 	orr.w	r3, r3, #32
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	4833      	ldr	r0, [pc, #204]	; (8003728 <_printf_i+0x240>)
 800365c:	2778      	movs	r7, #120	; 0x78
 800365e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	6829      	ldr	r1, [r5, #0]
 8003666:	061f      	lsls	r7, r3, #24
 8003668:	f851 6b04 	ldr.w	r6, [r1], #4
 800366c:	d402      	bmi.n	8003674 <_printf_i+0x18c>
 800366e:	065f      	lsls	r7, r3, #25
 8003670:	bf48      	it	mi
 8003672:	b2b6      	uxthmi	r6, r6
 8003674:	07df      	lsls	r7, r3, #31
 8003676:	bf48      	it	mi
 8003678:	f043 0320 	orrmi.w	r3, r3, #32
 800367c:	6029      	str	r1, [r5, #0]
 800367e:	bf48      	it	mi
 8003680:	6023      	strmi	r3, [r4, #0]
 8003682:	b91e      	cbnz	r6, 800368c <_printf_i+0x1a4>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f023 0320 	bic.w	r3, r3, #32
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	2310      	movs	r3, #16
 800368e:	e7a7      	b.n	80035e0 <_printf_i+0xf8>
 8003690:	4824      	ldr	r0, [pc, #144]	; (8003724 <_printf_i+0x23c>)
 8003692:	e7e4      	b.n	800365e <_printf_i+0x176>
 8003694:	4615      	mov	r5, r2
 8003696:	e7bd      	b.n	8003614 <_printf_i+0x12c>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	6826      	ldr	r6, [r4, #0]
 800369c:	6961      	ldr	r1, [r4, #20]
 800369e:	1d18      	adds	r0, r3, #4
 80036a0:	6028      	str	r0, [r5, #0]
 80036a2:	0635      	lsls	r5, r6, #24
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	d501      	bpl.n	80036ac <_printf_i+0x1c4>
 80036a8:	6019      	str	r1, [r3, #0]
 80036aa:	e002      	b.n	80036b2 <_printf_i+0x1ca>
 80036ac:	0670      	lsls	r0, r6, #25
 80036ae:	d5fb      	bpl.n	80036a8 <_printf_i+0x1c0>
 80036b0:	8019      	strh	r1, [r3, #0]
 80036b2:	2300      	movs	r3, #0
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	4615      	mov	r5, r2
 80036b8:	e7bc      	b.n	8003634 <_printf_i+0x14c>
 80036ba:	682b      	ldr	r3, [r5, #0]
 80036bc:	1d1a      	adds	r2, r3, #4
 80036be:	602a      	str	r2, [r5, #0]
 80036c0:	681d      	ldr	r5, [r3, #0]
 80036c2:	6862      	ldr	r2, [r4, #4]
 80036c4:	2100      	movs	r1, #0
 80036c6:	4628      	mov	r0, r5
 80036c8:	f7fc fd82 	bl	80001d0 <memchr>
 80036cc:	b108      	cbz	r0, 80036d2 <_printf_i+0x1ea>
 80036ce:	1b40      	subs	r0, r0, r5
 80036d0:	6060      	str	r0, [r4, #4]
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	6123      	str	r3, [r4, #16]
 80036d6:	2300      	movs	r3, #0
 80036d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036dc:	e7aa      	b.n	8003634 <_printf_i+0x14c>
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	462a      	mov	r2, r5
 80036e2:	4649      	mov	r1, r9
 80036e4:	4640      	mov	r0, r8
 80036e6:	47d0      	blx	sl
 80036e8:	3001      	adds	r0, #1
 80036ea:	d0ad      	beq.n	8003648 <_printf_i+0x160>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	079b      	lsls	r3, r3, #30
 80036f0:	d413      	bmi.n	800371a <_printf_i+0x232>
 80036f2:	68e0      	ldr	r0, [r4, #12]
 80036f4:	9b03      	ldr	r3, [sp, #12]
 80036f6:	4298      	cmp	r0, r3
 80036f8:	bfb8      	it	lt
 80036fa:	4618      	movlt	r0, r3
 80036fc:	e7a6      	b.n	800364c <_printf_i+0x164>
 80036fe:	2301      	movs	r3, #1
 8003700:	4632      	mov	r2, r6
 8003702:	4649      	mov	r1, r9
 8003704:	4640      	mov	r0, r8
 8003706:	47d0      	blx	sl
 8003708:	3001      	adds	r0, #1
 800370a:	d09d      	beq.n	8003648 <_printf_i+0x160>
 800370c:	3501      	adds	r5, #1
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	9903      	ldr	r1, [sp, #12]
 8003712:	1a5b      	subs	r3, r3, r1
 8003714:	42ab      	cmp	r3, r5
 8003716:	dcf2      	bgt.n	80036fe <_printf_i+0x216>
 8003718:	e7eb      	b.n	80036f2 <_printf_i+0x20a>
 800371a:	2500      	movs	r5, #0
 800371c:	f104 0619 	add.w	r6, r4, #25
 8003720:	e7f5      	b.n	800370e <_printf_i+0x226>
 8003722:	bf00      	nop
 8003724:	08003a61 	.word	0x08003a61
 8003728:	08003a72 	.word	0x08003a72

0800372c <__sflush_r>:
 800372c:	898a      	ldrh	r2, [r1, #12]
 800372e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003732:	4605      	mov	r5, r0
 8003734:	0710      	lsls	r0, r2, #28
 8003736:	460c      	mov	r4, r1
 8003738:	d458      	bmi.n	80037ec <__sflush_r+0xc0>
 800373a:	684b      	ldr	r3, [r1, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	dc05      	bgt.n	800374c <__sflush_r+0x20>
 8003740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003742:	2b00      	cmp	r3, #0
 8003744:	dc02      	bgt.n	800374c <__sflush_r+0x20>
 8003746:	2000      	movs	r0, #0
 8003748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800374c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800374e:	2e00      	cmp	r6, #0
 8003750:	d0f9      	beq.n	8003746 <__sflush_r+0x1a>
 8003752:	2300      	movs	r3, #0
 8003754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003758:	682f      	ldr	r7, [r5, #0]
 800375a:	6a21      	ldr	r1, [r4, #32]
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	d032      	beq.n	80037c6 <__sflush_r+0x9a>
 8003760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	075a      	lsls	r2, r3, #29
 8003766:	d505      	bpl.n	8003774 <__sflush_r+0x48>
 8003768:	6863      	ldr	r3, [r4, #4]
 800376a:	1ac0      	subs	r0, r0, r3
 800376c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800376e:	b10b      	cbz	r3, 8003774 <__sflush_r+0x48>
 8003770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003772:	1ac0      	subs	r0, r0, r3
 8003774:	2300      	movs	r3, #0
 8003776:	4602      	mov	r2, r0
 8003778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800377a:	6a21      	ldr	r1, [r4, #32]
 800377c:	4628      	mov	r0, r5
 800377e:	47b0      	blx	r6
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	89a3      	ldrh	r3, [r4, #12]
 8003784:	d106      	bne.n	8003794 <__sflush_r+0x68>
 8003786:	6829      	ldr	r1, [r5, #0]
 8003788:	291d      	cmp	r1, #29
 800378a:	d82b      	bhi.n	80037e4 <__sflush_r+0xb8>
 800378c:	4a29      	ldr	r2, [pc, #164]	; (8003834 <__sflush_r+0x108>)
 800378e:	410a      	asrs	r2, r1
 8003790:	07d6      	lsls	r6, r2, #31
 8003792:	d427      	bmi.n	80037e4 <__sflush_r+0xb8>
 8003794:	2200      	movs	r2, #0
 8003796:	6062      	str	r2, [r4, #4]
 8003798:	04d9      	lsls	r1, r3, #19
 800379a:	6922      	ldr	r2, [r4, #16]
 800379c:	6022      	str	r2, [r4, #0]
 800379e:	d504      	bpl.n	80037aa <__sflush_r+0x7e>
 80037a0:	1c42      	adds	r2, r0, #1
 80037a2:	d101      	bne.n	80037a8 <__sflush_r+0x7c>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b903      	cbnz	r3, 80037aa <__sflush_r+0x7e>
 80037a8:	6560      	str	r0, [r4, #84]	; 0x54
 80037aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037ac:	602f      	str	r7, [r5, #0]
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d0c9      	beq.n	8003746 <__sflush_r+0x1a>
 80037b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037b6:	4299      	cmp	r1, r3
 80037b8:	d002      	beq.n	80037c0 <__sflush_r+0x94>
 80037ba:	4628      	mov	r0, r5
 80037bc:	f7ff fbea 	bl	8002f94 <_free_r>
 80037c0:	2000      	movs	r0, #0
 80037c2:	6360      	str	r0, [r4, #52]	; 0x34
 80037c4:	e7c0      	b.n	8003748 <__sflush_r+0x1c>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4628      	mov	r0, r5
 80037ca:	47b0      	blx	r6
 80037cc:	1c41      	adds	r1, r0, #1
 80037ce:	d1c8      	bne.n	8003762 <__sflush_r+0x36>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0c5      	beq.n	8003762 <__sflush_r+0x36>
 80037d6:	2b1d      	cmp	r3, #29
 80037d8:	d001      	beq.n	80037de <__sflush_r+0xb2>
 80037da:	2b16      	cmp	r3, #22
 80037dc:	d101      	bne.n	80037e2 <__sflush_r+0xb6>
 80037de:	602f      	str	r7, [r5, #0]
 80037e0:	e7b1      	b.n	8003746 <__sflush_r+0x1a>
 80037e2:	89a3      	ldrh	r3, [r4, #12]
 80037e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037e8:	81a3      	strh	r3, [r4, #12]
 80037ea:	e7ad      	b.n	8003748 <__sflush_r+0x1c>
 80037ec:	690f      	ldr	r7, [r1, #16]
 80037ee:	2f00      	cmp	r7, #0
 80037f0:	d0a9      	beq.n	8003746 <__sflush_r+0x1a>
 80037f2:	0793      	lsls	r3, r2, #30
 80037f4:	680e      	ldr	r6, [r1, #0]
 80037f6:	bf08      	it	eq
 80037f8:	694b      	ldreq	r3, [r1, #20]
 80037fa:	600f      	str	r7, [r1, #0]
 80037fc:	bf18      	it	ne
 80037fe:	2300      	movne	r3, #0
 8003800:	eba6 0807 	sub.w	r8, r6, r7
 8003804:	608b      	str	r3, [r1, #8]
 8003806:	f1b8 0f00 	cmp.w	r8, #0
 800380a:	dd9c      	ble.n	8003746 <__sflush_r+0x1a>
 800380c:	6a21      	ldr	r1, [r4, #32]
 800380e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003810:	4643      	mov	r3, r8
 8003812:	463a      	mov	r2, r7
 8003814:	4628      	mov	r0, r5
 8003816:	47b0      	blx	r6
 8003818:	2800      	cmp	r0, #0
 800381a:	dc06      	bgt.n	800382a <__sflush_r+0xfe>
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	e78e      	b.n	8003748 <__sflush_r+0x1c>
 800382a:	4407      	add	r7, r0
 800382c:	eba8 0800 	sub.w	r8, r8, r0
 8003830:	e7e9      	b.n	8003806 <__sflush_r+0xda>
 8003832:	bf00      	nop
 8003834:	dfbffffe 	.word	0xdfbffffe

08003838 <_fflush_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	690b      	ldr	r3, [r1, #16]
 800383c:	4605      	mov	r5, r0
 800383e:	460c      	mov	r4, r1
 8003840:	b913      	cbnz	r3, 8003848 <_fflush_r+0x10>
 8003842:	2500      	movs	r5, #0
 8003844:	4628      	mov	r0, r5
 8003846:	bd38      	pop	{r3, r4, r5, pc}
 8003848:	b118      	cbz	r0, 8003852 <_fflush_r+0x1a>
 800384a:	6a03      	ldr	r3, [r0, #32]
 800384c:	b90b      	cbnz	r3, 8003852 <_fflush_r+0x1a>
 800384e:	f7ff f9a9 	bl	8002ba4 <__sinit>
 8003852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f3      	beq.n	8003842 <_fflush_r+0xa>
 800385a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800385c:	07d0      	lsls	r0, r2, #31
 800385e:	d404      	bmi.n	800386a <_fflush_r+0x32>
 8003860:	0599      	lsls	r1, r3, #22
 8003862:	d402      	bmi.n	800386a <_fflush_r+0x32>
 8003864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003866:	f7ff fb92 	bl	8002f8e <__retarget_lock_acquire_recursive>
 800386a:	4628      	mov	r0, r5
 800386c:	4621      	mov	r1, r4
 800386e:	f7ff ff5d 	bl	800372c <__sflush_r>
 8003872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003874:	07da      	lsls	r2, r3, #31
 8003876:	4605      	mov	r5, r0
 8003878:	d4e4      	bmi.n	8003844 <_fflush_r+0xc>
 800387a:	89a3      	ldrh	r3, [r4, #12]
 800387c:	059b      	lsls	r3, r3, #22
 800387e:	d4e1      	bmi.n	8003844 <_fflush_r+0xc>
 8003880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003882:	f7ff fb85 	bl	8002f90 <__retarget_lock_release_recursive>
 8003886:	e7dd      	b.n	8003844 <_fflush_r+0xc>

08003888 <__swhatbuf_r>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	460c      	mov	r4, r1
 800388c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003890:	2900      	cmp	r1, #0
 8003892:	b096      	sub	sp, #88	; 0x58
 8003894:	4615      	mov	r5, r2
 8003896:	461e      	mov	r6, r3
 8003898:	da0d      	bge.n	80038b6 <__swhatbuf_r+0x2e>
 800389a:	89a3      	ldrh	r3, [r4, #12]
 800389c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80038aa:	2340      	movne	r3, #64	; 0x40
 80038ac:	2000      	movs	r0, #0
 80038ae:	6031      	str	r1, [r6, #0]
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	b016      	add	sp, #88	; 0x58
 80038b4:	bd70      	pop	{r4, r5, r6, pc}
 80038b6:	466a      	mov	r2, sp
 80038b8:	f000 f848 	bl	800394c <_fstat_r>
 80038bc:	2800      	cmp	r0, #0
 80038be:	dbec      	blt.n	800389a <__swhatbuf_r+0x12>
 80038c0:	9901      	ldr	r1, [sp, #4]
 80038c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80038c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80038ca:	4259      	negs	r1, r3
 80038cc:	4159      	adcs	r1, r3
 80038ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d2:	e7eb      	b.n	80038ac <__swhatbuf_r+0x24>

080038d4 <__smakebuf_r>:
 80038d4:	898b      	ldrh	r3, [r1, #12]
 80038d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038d8:	079d      	lsls	r5, r3, #30
 80038da:	4606      	mov	r6, r0
 80038dc:	460c      	mov	r4, r1
 80038de:	d507      	bpl.n	80038f0 <__smakebuf_r+0x1c>
 80038e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	2301      	movs	r3, #1
 80038ea:	6163      	str	r3, [r4, #20]
 80038ec:	b002      	add	sp, #8
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	ab01      	add	r3, sp, #4
 80038f2:	466a      	mov	r2, sp
 80038f4:	f7ff ffc8 	bl	8003888 <__swhatbuf_r>
 80038f8:	9900      	ldr	r1, [sp, #0]
 80038fa:	4605      	mov	r5, r0
 80038fc:	4630      	mov	r0, r6
 80038fe:	f7ff fbb5 	bl	800306c <_malloc_r>
 8003902:	b948      	cbnz	r0, 8003918 <__smakebuf_r+0x44>
 8003904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003908:	059a      	lsls	r2, r3, #22
 800390a:	d4ef      	bmi.n	80038ec <__smakebuf_r+0x18>
 800390c:	f023 0303 	bic.w	r3, r3, #3
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	81a3      	strh	r3, [r4, #12]
 8003916:	e7e3      	b.n	80038e0 <__smakebuf_r+0xc>
 8003918:	89a3      	ldrh	r3, [r4, #12]
 800391a:	6020      	str	r0, [r4, #0]
 800391c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003920:	81a3      	strh	r3, [r4, #12]
 8003922:	9b00      	ldr	r3, [sp, #0]
 8003924:	6163      	str	r3, [r4, #20]
 8003926:	9b01      	ldr	r3, [sp, #4]
 8003928:	6120      	str	r0, [r4, #16]
 800392a:	b15b      	cbz	r3, 8003944 <__smakebuf_r+0x70>
 800392c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003930:	4630      	mov	r0, r6
 8003932:	f000 f81d 	bl	8003970 <_isatty_r>
 8003936:	b128      	cbz	r0, 8003944 <__smakebuf_r+0x70>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	81a3      	strh	r3, [r4, #12]
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	431d      	orrs	r5, r3
 8003948:	81a5      	strh	r5, [r4, #12]
 800394a:	e7cf      	b.n	80038ec <__smakebuf_r+0x18>

0800394c <_fstat_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d07      	ldr	r5, [pc, #28]	; (800396c <_fstat_r+0x20>)
 8003950:	2300      	movs	r3, #0
 8003952:	4604      	mov	r4, r0
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	602b      	str	r3, [r5, #0]
 800395a:	f7fc fe6a 	bl	8000632 <_fstat>
 800395e:	1c43      	adds	r3, r0, #1
 8003960:	d102      	bne.n	8003968 <_fstat_r+0x1c>
 8003962:	682b      	ldr	r3, [r5, #0]
 8003964:	b103      	cbz	r3, 8003968 <_fstat_r+0x1c>
 8003966:	6023      	str	r3, [r4, #0]
 8003968:	bd38      	pop	{r3, r4, r5, pc}
 800396a:	bf00      	nop
 800396c:	20000250 	.word	0x20000250

08003970 <_isatty_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4d06      	ldr	r5, [pc, #24]	; (800398c <_isatty_r+0x1c>)
 8003974:	2300      	movs	r3, #0
 8003976:	4604      	mov	r4, r0
 8003978:	4608      	mov	r0, r1
 800397a:	602b      	str	r3, [r5, #0]
 800397c:	f7fc fe69 	bl	8000652 <_isatty>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d102      	bne.n	800398a <_isatty_r+0x1a>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	b103      	cbz	r3, 800398a <_isatty_r+0x1a>
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20000250 	.word	0x20000250

08003990 <_sbrk_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4d06      	ldr	r5, [pc, #24]	; (80039ac <_sbrk_r+0x1c>)
 8003994:	2300      	movs	r3, #0
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	f7fc fe72 	bl	8000684 <_sbrk>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_sbrk_r+0x1a>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_sbrk_r+0x1a>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000250 	.word	0x20000250

080039b0 <_init>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	bf00      	nop
 80039b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b6:	bc08      	pop	{r3}
 80039b8:	469e      	mov	lr, r3
 80039ba:	4770      	bx	lr

080039bc <_fini>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr
